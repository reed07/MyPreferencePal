package com.myfitnesspal.shared.injection.component;

import android.app.Application;
import android.arch.lifecycle.ViewModel;
import android.arch.lifecycle.ViewModelProvider.Factory;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.media.AudioManager;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;
import com.myfitnesspal.android.login.Welcome;
import com.myfitnesspal.android.login.Welcome_MembersInjector;
import com.myfitnesspal.app.MyFitnessPalApp;
import com.myfitnesspal.app.MyFitnessPalApp_MembersInjector;
import com.myfitnesspal.feature.achievementinterstitialad.repository.UserSummaryRepository;
import com.myfitnesspal.feature.achievementinterstitialad.service.AchievementAdAnalyticsEvents;
import com.myfitnesspal.feature.achievementinterstitialad.service.StoredAchievementEvents;
import com.myfitnesspal.feature.achievementinterstitialad.ui.AchievementInterstitialAd;
import com.myfitnesspal.feature.addentry.ui.activity.AddFood;
import com.myfitnesspal.feature.addentry.ui.activity.AddFoodSummaryView;
import com.myfitnesspal.feature.addentry.ui.activity.AddFoodSummaryViewV2;
import com.myfitnesspal.feature.addentry.ui.activity.AddFoodSummaryViewV2_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.activity.AddFoodSummaryView_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.activity.AddFood_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.activity.QuickAddActivity;
import com.myfitnesspal.feature.addentry.ui.activity.QuickAddActivity_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.activity.WaterEntryActivity;
import com.myfitnesspal.feature.addentry.ui.activity.WaterEntryActivity_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.dialog.AddCustomFoodImprovementDialogFragment;
import com.myfitnesspal.feature.addentry.ui.dialog.AddCustomFoodImprovementDialogFragment_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.dialog.EditServingsDialogFragment;
import com.myfitnesspal.feature.addentry.ui.dialog.EditServingsDialogFragmentV2;
import com.myfitnesspal.feature.addentry.ui.dialog.EditServingsDialogFragmentV2_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.dialog.EditV2SearchServingsDialogFragment;
import com.myfitnesspal.feature.addentry.ui.dialog.EditV2SearchServingsDialogFragment_MembersInjector;
import com.myfitnesspal.feature.addentry.ui.dialog.SearchViewItemContextualDialog;
import com.myfitnesspal.feature.addentry.ui.dialog.SearchViewItemContextualDialog_MembersInjector;
import com.myfitnesspal.feature.addfriends.service.ContactsOnMfpService_Factory;
import com.myfitnesspal.feature.addfriends.service.FacebookFriendOnMfpConstructorArgs_Factory;
import com.myfitnesspal.feature.addfriends.service.FacebookFriendOnMfpService_Factory;
import com.myfitnesspal.feature.addfriends.service.FriendOnMfpConstructorArgs_Factory;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsContacts;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsContacts_MembersInjector;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsFacebook;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsFacebook_MembersInjector;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsParent;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsParent_MembersInjector;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsSplash;
import com.myfitnesspal.feature.addfriends.ui.activity.AddFriendsSplash_MembersInjector;
import com.myfitnesspal.feature.alexainterstitial.analytics.AlexaInterstitialAnalyticsHelper;
import com.myfitnesspal.feature.alexainterstitial.ui.activity.AlexaInterstitialActivity;
import com.myfitnesspal.feature.alexainterstitial.ui.activity.AlexaInterstitialActivity_MembersInjector;
import com.myfitnesspal.feature.appgallery.ui.AppDetailFragment;
import com.myfitnesspal.feature.appgallery.ui.AppDetailFragment_MembersInjector;
import com.myfitnesspal.feature.appgallery.ui.AppGalleryActivity;
import com.myfitnesspal.feature.appgallery.ui.AppGalleryActivity_MembersInjector;
import com.myfitnesspal.feature.appgallery.ui.AppsHomeFragment;
import com.myfitnesspal.feature.appgallery.ui.AppsHomeFragment_MembersInjector;
import com.myfitnesspal.feature.appgallery.ui.GoogleFitPermissionsFragment;
import com.myfitnesspal.feature.appgallery.ui.OurOtherAppsFragment;
import com.myfitnesspal.feature.appgallery.ui.OurOtherAppsFragment_MembersInjector;
import com.myfitnesspal.feature.appgallery.ui.XPromoInterstitialActivity;
import com.myfitnesspal.feature.appgallery.ui.XPromoInterstitialFragment;
import com.myfitnesspal.feature.appgallery.ui.XPromoInterstitialFragment_MembersInjector;
import com.myfitnesspal.feature.barcode.service.BarcodeService;
import com.myfitnesspal.feature.barcode.ui.activity.BarcodeMatchActivity;
import com.myfitnesspal.feature.barcode.ui.activity.BarcodeMatchActivity_MembersInjector;
import com.myfitnesspal.feature.barcode.ui.activity.BarcodeScannerActivity;
import com.myfitnesspal.feature.barcode.ui.activity.BarcodeScannerActivity_MembersInjector;
import com.myfitnesspal.feature.barcode.ui.fragment.BarcodeScanDialogFragment;
import com.myfitnesspal.feature.barcode.ui.fragment.BarcodeScanDialogFragment_MembersInjector;
import com.myfitnesspal.feature.blog.ui.activity.BlogActivity;
import com.myfitnesspal.feature.blog.ui.fragment.BlogFragment;
import com.myfitnesspal.feature.blog.ui.fragment.BlogFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeAchievementActivity;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeAchievementActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeDetailActivity;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeDetailActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeFriendListActivity;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeFriendListActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeShareActivity;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengeShareActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.ChallengesActivity;
import com.myfitnesspal.feature.challenges.ui.activity.InviteContactsToChallengeActivity;
import com.myfitnesspal.feature.challenges.ui.activity.InviteContactsToChallengeActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.InviteSourceListActivity;
import com.myfitnesspal.feature.challenges.ui.activity.InviteSourceListActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.JoinChallengeActivity;
import com.myfitnesspal.feature.challenges.ui.activity.JoinChallengeActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.activity.UserAchievementsActivity;
import com.myfitnesspal.feature.challenges.ui.activity.UserAchievementsActivity_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeDetailsFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeDetailsFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeFriendsFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeFriendsFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengePrizesFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengePrizesFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeWebViewFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengeWebViewFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengesFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.ChallengesFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedChallengeSummaryFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedChallengeSummaryFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedFriendsFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedFriendsFragment_MembersInjector;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedPrizesFragment;
import com.myfitnesspal.feature.challenges.ui.fragment.JoinedPrizesFragment_MembersInjector;
import com.myfitnesspal.feature.community.service.CommunityService;
import com.myfitnesspal.feature.community.ui.activity.CommunityActivity;
import com.myfitnesspal.feature.community.ui.fragment.CommunityFragment;
import com.myfitnesspal.feature.community.ui.fragment.CommunityFragment_MembersInjector;
import com.myfitnesspal.feature.consents.model.AdConsentsViewModel;
import com.myfitnesspal.feature.consents.model.AdConsentsViewModel_Factory;
import com.myfitnesspal.feature.consents.model.ConsentsViewModel;
import com.myfitnesspal.feature.consents.model.ConsentsViewModel_Factory;
import com.myfitnesspal.feature.consents.service.ConsentsService;
import com.myfitnesspal.feature.consents.ui.activity.AdConsentsActivity;
import com.myfitnesspal.feature.consents.ui.activity.AdConsentsActivity_MembersInjector;
import com.myfitnesspal.feature.consents.ui.activity.ConsentsActivity;
import com.myfitnesspal.feature.consents.ui.activity.ConsentsActivity_MembersInjector;
import com.myfitnesspal.feature.consents.ui.activity.LearnMoreActivity;
import com.myfitnesspal.feature.consents.util.AdConsentsAnalyticsHelper;
import com.myfitnesspal.feature.dashboard.ui.activity.NutrientDashboardSettingsActivity;
import com.myfitnesspal.feature.dashboard.ui.activity.NutrientDashboardSettingsActivity_MembersInjector;
import com.myfitnesspal.feature.dashboard.ui.fragment.CustomNutrientDashboardSelectionFragment;
import com.myfitnesspal.feature.dashboard.ui.fragment.CustomNutrientDashboardSelectionFragment_MembersInjector;
import com.myfitnesspal.feature.dashboard.ui.fragment.NutrientDashboardPresetSelectionFragment;
import com.myfitnesspal.feature.dashboard.ui.fragment.NutrientDashboardPresetSelectionFragment_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.AnalyticsEventsActivity;
import com.myfitnesspal.feature.debug.ui.activity.AnalyticsEventsActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.EndpointActivity;
import com.myfitnesspal.feature.debug.ui.activity.EndpointActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.FlagResetActivity;
import com.myfitnesspal.feature.debug.ui.activity.FlagResetActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.LocaleOverrideActivity;
import com.myfitnesspal.feature.debug.ui.activity.LocaleOverrideActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.PaymentsDebugActivity;
import com.myfitnesspal.feature.debug.ui.activity.PaymentsDebugActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.PremiumDebugActivity;
import com.myfitnesspal.feature.debug.ui.activity.PremiumDebugActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.ProgressPhotosDebugActivity;
import com.myfitnesspal.feature.debug.ui.activity.ProgressPhotosDebugActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.RetrieveMealFoodDebugActivity;
import com.myfitnesspal.feature.debug.ui.activity.RetrieveMealFoodDebugActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.activity.RolloutDebugActivity;
import com.myfitnesspal.feature.debug.ui.activity.RolloutDebugActivity_MembersInjector;
import com.myfitnesspal.feature.debug.ui.fragment.AdvancedDebuggingFragment;
import com.myfitnesspal.feature.debug.ui.fragment.AdvancedDebuggingFragment_MembersInjector;
import com.myfitnesspal.feature.debug.ui.fragment.AnalyticsEventsFragment;
import com.myfitnesspal.feature.debug.ui.fragment.DebugLogsFragment;
import com.myfitnesspal.feature.debug.ui.fragment.DebugLogsFragment_MembersInjector;
import com.myfitnesspal.feature.debug.util.DebugSettingsService;
import com.myfitnesspal.feature.deleteaccount.ui.activity.DeleteAccountActivity;
import com.myfitnesspal.feature.deleteaccount.ui.activity.DeleteAccountActivity_MembersInjector;
import com.myfitnesspal.feature.diary.service.DiaryDayCache;
import com.myfitnesspal.feature.diary.service.DiaryService;
import com.myfitnesspal.feature.diary.ui.activity.CompleteDiaryActivity;
import com.myfitnesspal.feature.diary.ui.activity.CompleteDiaryActivity_MembersInjector;
import com.myfitnesspal.feature.diary.ui.activity.Diary;
import com.myfitnesspal.feature.diary.ui.activity.DiarySettingsActivity;
import com.myfitnesspal.feature.diary.ui.activity.Diary_MembersInjector;
import com.myfitnesspal.feature.diary.ui.activity.EditDiaryNoteView;
import com.myfitnesspal.feature.diary.ui.activity.EditDiaryNoteView_MembersInjector;
import com.myfitnesspal.feature.diary.ui.activity.FriendDiary;
import com.myfitnesspal.feature.diary.ui.adapter.DiaryAdapter;
import com.myfitnesspal.feature.diary.ui.adapter.DiaryAdapter_MembersInjector;
import com.myfitnesspal.feature.diary.ui.adapter.DiaryLandscapeAdapter;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryLongPressDialogFragment;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryLongPressDialogFragment_MembersInjector;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryMoreActionsDialog;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryMoreActionsDialog_MembersInjector;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryQuickToolsDialogFragment;
import com.myfitnesspal.feature.diary.ui.dialog.DiaryQuickToolsDialogFragment_MembersInjector;
import com.myfitnesspal.feature.diary.ui.dialog.ExerciseTypeDialogFragment;
import com.myfitnesspal.feature.diary.ui.dialog.ExerciseTypeDialogFragment_MembersInjector;
import com.myfitnesspal.feature.diary.ui.dialog.FriendDiaryPasswordDialogFragment;
import com.myfitnesspal.feature.diary.ui.dialog.FriendDiaryPasswordDialogFragment_MembersInjector;
import com.myfitnesspal.feature.diary.ui.fragment.DiaryFragmentBase;
import com.myfitnesspal.feature.diary.ui.fragment.DiaryFragmentBase_MembersInjector;
import com.myfitnesspal.feature.diary.ui.fragment.FriendDiaryFragment;
import com.myfitnesspal.feature.diary.ui.fragment.FriendDiaryFragment_MembersInjector;
import com.myfitnesspal.feature.diary.ui.fragment.UserDiaryFragment;
import com.myfitnesspal.feature.diary.ui.fragment.UserDiaryFragment_MembersInjector;
import com.myfitnesspal.feature.drawer.ui.view.LeftDrawerLayout;
import com.myfitnesspal.feature.drawer.ui.view.LeftDrawerLayout_MembersInjector;
import com.myfitnesspal.feature.drawer.ui.view.LeftDrawerMenu;
import com.myfitnesspal.feature.drawer.ui.view.LeftDrawerMenu_MembersInjector;
import com.myfitnesspal.feature.exercise.service.ExerciseAnalyticsHelper;
import com.myfitnesspal.feature.exercise.service.ExerciseService;
import com.myfitnesspal.feature.exercise.ui.activity.AddExerciseEntry;
import com.myfitnesspal.feature.exercise.ui.activity.AddExerciseEntry_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.EditCardio;
import com.myfitnesspal.feature.exercise.ui.activity.EditCardio_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.EditStrength;
import com.myfitnesspal.feature.exercise.ui.activity.EditStrength_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.ExerciseSearchActivity;
import com.myfitnesspal.feature.exercise.ui.activity.ExerciseSearchActivity_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.GenericExercise;
import com.myfitnesspal.feature.exercise.ui.activity.GenericExercise_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.NewCardio;
import com.myfitnesspal.feature.exercise.ui.activity.NewCardio_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.activity.NewStrength;
import com.myfitnesspal.feature.exercise.ui.activity.NewStrength_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.dialog.ExerciseSortOrderDialogFragment;
import com.myfitnesspal.feature.exercise.ui.dialog.ExerciseSortOrderDialogFragment_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.fragment.ExerciseSearchFragment;
import com.myfitnesspal.feature.exercise.ui.fragment.ExerciseSearchFragment_MembersInjector;
import com.myfitnesspal.feature.exercise.ui.fragment.MyExercisesFragment;
import com.myfitnesspal.feature.exercise.ui.fragment.MyExercisesFragment_MembersInjector;
import com.myfitnesspal.feature.explore.analytics.ExploreAnalytics;
import com.myfitnesspal.feature.explore.analytics.ExploreAnalytics_MembersInjector;
import com.myfitnesspal.feature.explore.service.ExploreService;
import com.myfitnesspal.feature.explore.ui.activity.ExploreActivity;
import com.myfitnesspal.feature.explore.ui.activity.ExploreActivity_MembersInjector;
import com.myfitnesspal.feature.explore.ui.fragment.PrototypeExploreFragment;
import com.myfitnesspal.feature.explore.ui.viewmodel.ExploreViewModel.ExploreDataTask;
import com.myfitnesspal.feature.explore.ui.viewmodel.ExploreViewModel_ExploreDataTask_MembersInjector;
import com.myfitnesspal.feature.externalsync.impl.googlefit.client.GoogleFitClient;
import com.myfitnesspal.feature.externalsync.impl.googlefit.service.GoogleFitExerciseService;
import com.myfitnesspal.feature.externalsync.impl.googlefit.service.GoogleFitNutritionService;
import com.myfitnesspal.feature.externalsync.impl.googlefit.service.GoogleFitStepsService;
import com.myfitnesspal.feature.externalsync.impl.googlefit.service.GoogleFitSubscriptionService;
import com.myfitnesspal.feature.externalsync.impl.googlefit.service.GoogleFitUserService;
import com.myfitnesspal.feature.externalsync.impl.shealth.service.SHealthConnection;
import com.myfitnesspal.feature.externalsync.impl.shealth.service.SHealthExerciseService;
import com.myfitnesspal.feature.externalsync.impl.shealth.service.SHealthNutritionService;
import com.myfitnesspal.feature.externalsync.impl.shealth.service.SHealthStepsService;
import com.myfitnesspal.feature.externalsync.impl.shealth.service.SHealthUserService;
import com.myfitnesspal.feature.externalsync.service.ExternalExerciseService;
import com.myfitnesspal.feature.externalsync.service.ExternalNutritionService;
import com.myfitnesspal.feature.externalsync.service.ExternalStepsService;
import com.myfitnesspal.feature.externalsync.service.ExternalUserService;
import com.myfitnesspal.feature.fileexport.ui.activity.FileExport;
import com.myfitnesspal.feature.fileexport.ui.activity.FileExportPreview;
import com.myfitnesspal.feature.fileexport.ui.activity.FileExportPreview_MembersInjector;
import com.myfitnesspal.feature.fileexport.ui.activity.FileExport_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.activity.FoodEditorActivity;
import com.myfitnesspal.feature.foodeditor.ui.activity.FoodEditorActivity_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.activity.FoodNotesActivity;
import com.myfitnesspal.feature.foodeditor.ui.activity.FoodNotesActivity_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.dialog.EditServingsDialogFragmentBase;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.BarcodeMultiAddMixin;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.BarcodeMultiAddMixin_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.FoodEditorMixin;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.FoodEditorMixin_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.MenuItemEditorMixin;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.MenuItemEditorMixin_MembersInjector;
import com.myfitnesspal.feature.foodeditor.ui.mixin.impl.MultiAddFoodEditorMixin;
import com.myfitnesspal.feature.foodeditor.ui.service.FoodEditorAnalytics;
import com.myfitnesspal.feature.foodfeedback.mixin.FoodFeedbackOptionsMixin;
import com.myfitnesspal.feature.foodfeedback.mixin.FoodFeedbackOptionsMixin_MembersInjector;
import com.myfitnesspal.feature.foodfeedback.model.FoodFeedbackViewModel;
import com.myfitnesspal.feature.foodfeedback.model.FoodFeedbackViewModel_Factory;
import com.myfitnesspal.feature.foodfeedback.repository.FoodFeedbackAction;
import com.myfitnesspal.feature.foodfeedback.service.FoodFeedbackAnalyticsHelper;
import com.myfitnesspal.feature.foodfeedback.ui.activity.FoodFeedbackActivity;
import com.myfitnesspal.feature.foodfeedback.ui.activity.FoodFeedbackActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.CommentsActivity;
import com.myfitnesspal.feature.friends.ui.activity.CommentsActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.ComposeMessageActivity;
import com.myfitnesspal.feature.friends.ui.activity.ComposeMessageActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.DetailedMessageActivity;
import com.myfitnesspal.feature.friends.ui.activity.DetailedMessageActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.FriendsActivity;
import com.myfitnesspal.feature.friends.ui.activity.FriendsActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.InviteFriendActivity;
import com.myfitnesspal.feature.friends.ui.activity.InviteFriendActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.activity.NewStatusOrCommentActivity;
import com.myfitnesspal.feature.friends.ui.activity.NewStatusOrCommentActivity_MembersInjector;
import com.myfitnesspal.feature.friends.ui.fragment.FriendRequestsFragment;
import com.myfitnesspal.feature.friends.ui.fragment.FriendRequestsFragment_MembersInjector;
import com.myfitnesspal.feature.friends.ui.fragment.FriendsListFragment;
import com.myfitnesspal.feature.friends.ui.fragment.FriendsListFragment_MembersInjector;
import com.myfitnesspal.feature.friends.ui.fragment.LikesListFragment;
import com.myfitnesspal.feature.friends.ui.fragment.LikesListFragment_MembersInjector;
import com.myfitnesspal.feature.friends.ui.fragment.MessagesFragment;
import com.myfitnesspal.feature.friends.ui.fragment.MessagesFragment_MembersInjector;
import com.myfitnesspal.feature.gdprhelp.activity.GDPRHelpActivity;
import com.myfitnesspal.feature.gdprhelp.activity.GDPRHelpActivity_MembersInjector;
import com.myfitnesspal.feature.goals.service.NutrientGoalService;
import com.myfitnesspal.feature.goals.service.NutrientGoalsUtil;
import com.myfitnesspal.feature.goals.ui.activity.CalorieAdjustmentExplanationView;
import com.myfitnesspal.feature.goals.ui.activity.CalorieAdjustmentExplanationView_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.CalorieAdjustmentIntro;
import com.myfitnesspal.feature.goals.ui.activity.CalorieAdjustmentIntro_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.CustomExerciseCaloriesActivity;
import com.myfitnesspal.feature.goals.ui.activity.CustomExerciseCaloriesActivity_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.EditCustomMacroGoalsActivity;
import com.myfitnesspal.feature.goals.ui.activity.EditCustomMacroGoalsActivity_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.ExerciseCaloriesActivity;
import com.myfitnesspal.feature.goals.ui.activity.ExerciseCaloriesActivity_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.MacroGoalEditorActivity;
import com.myfitnesspal.feature.goals.ui.activity.MacroGoalEditorActivity_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.MealGoalsActivity;
import com.myfitnesspal.feature.goals.ui.activity.MealGoalsActivity_MembersInjector;
import com.myfitnesspal.feature.goals.ui.activity.UpdateGoals;
import com.myfitnesspal.feature.goals.ui.activity.UpdateGoals_MembersInjector;
import com.myfitnesspal.feature.goals.ui.dialog.ActivityLevelDialogFragment;
import com.myfitnesspal.feature.goals.ui.dialog.ExerciseGoalsDialogFragment;
import com.myfitnesspal.feature.goals.ui.dialog.ExerciseGoalsDialogFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.dialog.MacroNutrientEditorDialog;
import com.myfitnesspal.feature.goals.ui.dialog.MacroNutrientEditorDialog_MembersInjector;
import com.myfitnesspal.feature.goals.ui.dialog.NetEnergyGoalDialogFragment;
import com.myfitnesspal.feature.goals.ui.dialog.NetEnergyGoalDialogFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.dialog.WeightGoalDialogFragment;
import com.myfitnesspal.feature.goals.ui.dialog.WeightGoalDialogFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.AdditionalNutrientGoalsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.AdditionalNutrientGoalsFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.CustomGoalByDayFragment;
import com.myfitnesspal.feature.goals.ui.fragment.CustomGoalByDayFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.EatingDisorderUpdateGoalCompleteFragment;
import com.myfitnesspal.feature.goals.ui.fragment.EatingDisorderUpdateGoalCompleteFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.EditCustomMacroGoalsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.EditCustomMacroGoalsFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.EditMacroGoalsByGramsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.EditMacroGoalsByGramsFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.EditMacroGoalsByPercentFragment;
import com.myfitnesspal.feature.goals.ui.fragment.EditMacroGoalsByPercentFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.ExerciseCaloriesFragment;
import com.myfitnesspal.feature.goals.ui.fragment.ExerciseCaloriesFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.GoalsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.GoalsFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.MealGoalsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.MealGoalsFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.UpdateGoalsCompleteFragment;
import com.myfitnesspal.feature.goals.ui.fragment.UpdateGoalsCompleteFragment_MembersInjector;
import com.myfitnesspal.feature.goals.ui.fragment.UpdateGoalsFragment;
import com.myfitnesspal.feature.goals.ui.fragment.UpdateGoalsFragment_MembersInjector;
import com.myfitnesspal.feature.help.ui.activity.AboutUs;
import com.myfitnesspal.feature.help.ui.activity.AboutUs_MembersInjector;
import com.myfitnesspal.feature.help.ui.activity.Faq;
import com.myfitnesspal.feature.help.ui.activity.FaqFeedbackBaseActivity;
import com.myfitnesspal.feature.help.ui.activity.FaqFeedbackBaseActivity_MembersInjector;
import com.myfitnesspal.feature.help.ui.activity.Faq_MembersInjector;
import com.myfitnesspal.feature.help.ui.activity.NewsFeedSettings;
import com.myfitnesspal.feature.help.ui.activity.NewsFeedSettings_MembersInjector;
import com.myfitnesspal.feature.help.ui.fragment.HelpListFragment;
import com.myfitnesspal.feature.help.ui.fragment.HelpListFragment_MembersInjector;
import com.myfitnesspal.feature.home.service.AppRatingService_Factory;
import com.myfitnesspal.feature.home.ui.activity.HomeActivity;
import com.myfitnesspal.feature.home.ui.activity.HomeActivity_MembersInjector;
import com.myfitnesspal.feature.home.ui.activity.HomeMessagesActivity;
import com.myfitnesspal.feature.home.ui.activity.ImageReportingActivity;
import com.myfitnesspal.feature.home.ui.activity.ImageReportingDetailsActivity;
import com.myfitnesspal.feature.home.ui.activity.ImageReportingDetailsActivity_MembersInjector;
import com.myfitnesspal.feature.home.ui.activity.PrototypeHomeActivity;
import com.myfitnesspal.feature.home.ui.dialog.AppRatingDialogFragment;
import com.myfitnesspal.feature.home.ui.dialog.AppRatingDialogFragment_MembersInjector;
import com.myfitnesspal.feature.home.ui.fragment.HomeFragment;
import com.myfitnesspal.feature.home.ui.fragment.HomeFragment_MembersInjector;
import com.myfitnesspal.feature.home.util.HomeAnalyticsHelper;
import com.myfitnesspal.feature.images.service.ImageAssociationService;
import com.myfitnesspal.feature.images.service.ImageService;
import com.myfitnesspal.feature.meals.ui.dialog.DeleteMealConfirmationDialogFragment;
import com.myfitnesspal.feature.meals.ui.dialog.DeleteMealConfirmationDialogFragment_MembersInjector;
import com.myfitnesspal.feature.meals.ui.dialog.EditMealNameDialogFragment;
import com.myfitnesspal.feature.meals.ui.dialog.MealFoodPermissionSelectionDialogFragment;
import com.myfitnesspal.feature.meals.ui.mixin.MealEditorMixin;
import com.myfitnesspal.feature.meals.ui.mixin.MealEditorMixin_MembersInjector;
import com.myfitnesspal.feature.meals.ui.mixin.MealIngredientMixin;
import com.myfitnesspal.feature.meals.ui.mixin.MealIngredientMixin_MembersInjector;
import com.myfitnesspal.feature.meals.ui.mixin.SharedMealViewerMixin;
import com.myfitnesspal.feature.meals.ui.mixin.SharedMealViewerMixin_MembersInjector;
import com.myfitnesspal.feature.meals.util.MealSharingDirectionsAnalyticsHelper;
import com.myfitnesspal.feature.notificationinbox.ui.activity.NotificationInboxActivity;
import com.myfitnesspal.feature.notificationinbox.ui.fragment.NotificationInboxFragment;
import com.myfitnesspal.feature.notificationinbox.ui.fragment.NotificationInboxFragment_MembersInjector;
import com.myfitnesspal.feature.nutrition.service.ChartLegendFactory;
import com.myfitnesspal.feature.nutrition.service.ChartRendererFactory;
import com.myfitnesspal.feature.nutrition.service.NutritionAnalyticsHelper;
import com.myfitnesspal.feature.nutrition.service.NutritionDetailsDelegate;
import com.myfitnesspal.feature.nutrition.service.NutritionDetailsDelegate_MembersInjector;
import com.myfitnesspal.feature.nutrition.service.NutritionGraphAnalyticsHelper;
import com.myfitnesspal.feature.nutrition.ui.activity.FoodListsActivity;
import com.myfitnesspal.feature.nutrition.ui.activity.FoodListsActivity_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.activity.Nutrition;
import com.myfitnesspal.feature.nutrition.ui.activity.NutritionPremiumActivityBase_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.activity.Nutrition_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.fragment.GraphViewFragment;
import com.myfitnesspal.feature.nutrition.ui.fragment.GraphViewFragment_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.view.CaloriePieLegend;
import com.myfitnesspal.feature.nutrition.ui.view.CaloriePieLegend_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.view.CustomBarChart;
import com.myfitnesspal.feature.nutrition.ui.view.CustomBarChart_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.view.CustomLineChart;
import com.myfitnesspal.feature.nutrition.ui.view.CustomPieChart;
import com.myfitnesspal.feature.nutrition.ui.view.CustomPieChart_MembersInjector;
import com.myfitnesspal.feature.nutrition.ui.view.MiniFoodList;
import com.myfitnesspal.feature.nutrition.ui.view.MiniFoodList_MembersInjector;
import com.myfitnesspal.feature.onboarding.navigation.Navigator;
import com.myfitnesspal.feature.onboarding.navigation.PremiumOnboardingFlowCoordinator;
import com.myfitnesspal.feature.onboarding.service.PremiumOnboardingAnalyticsHelper;
import com.myfitnesspal.feature.onboarding.ui.activity.OnboardingActivity;
import com.myfitnesspal.feature.onboarding.ui.activity.OnboardingActivity_MembersInjector;
import com.myfitnesspal.feature.onboarding.ui.fragment.AnimatedOnboardingFragment;
import com.myfitnesspal.feature.onboarding.ui.fragment.AnimatedOnboardingFragment_MembersInjector;
import com.myfitnesspal.feature.onboarding.ui.fragment.WelcomeScreenFragment;
import com.myfitnesspal.feature.onboarding.ui.fragment.WelcomeScreenFragment_MembersInjector;
import com.myfitnesspal.feature.onboarding.ui.viewmodel.PremiumOnboardingViewModelFactory;
import com.myfitnesspal.feature.payments.service.PaymentAnalyticsHelper;
import com.myfitnesspal.feature.payments.service.PaymentService;
import com.myfitnesspal.feature.payments.service.SubscriptionService;
import com.myfitnesspal.feature.payments.ui.activity.GooglePlayPaymentActivity;
import com.myfitnesspal.feature.payments.ui.activity.GooglePlayPaymentActivity_MembersInjector;
import com.myfitnesspal.feature.payments.ui.activity.PaymentActivityBase;
import com.myfitnesspal.feature.payments.ui.activity.PaymentActivityBase_MembersInjector;
import com.myfitnesspal.feature.payments.ui.activity.PaymentConfirmation;
import com.myfitnesspal.feature.payments.ui.activity.PaymentConfirmation_MembersInjector;
import com.myfitnesspal.feature.permissions.PermissionsFragment;
import com.myfitnesspal.feature.permissions.PermissionsFragment_MembersInjector;
import com.myfitnesspal.feature.premium.service.PremiumService;
import com.myfitnesspal.feature.premium.service.ProductService;
import com.myfitnesspal.feature.premium.service.UpsellService;
import com.myfitnesspal.feature.premium.ui.activity.PremiumInterstitialActivity;
import com.myfitnesspal.feature.premium.ui.activity.PremiumInterstitialActivity_MembersInjector;
import com.myfitnesspal.feature.premium.ui.activity.PremiumUpsellActivity;
import com.myfitnesspal.feature.premium.ui.activity.PremiumUpsellActivity_MembersInjector;
import com.myfitnesspal.feature.premium.ui.activity.SubscriptionStatus;
import com.myfitnesspal.feature.premium.ui.activity.SubscriptionStatus_MembersInjector;
import com.myfitnesspal.feature.premium.ui.fragment.PremiumUpsellFragment;
import com.myfitnesspal.feature.premium.ui.fragment.PremiumUpsellFragment_MembersInjector;
import com.myfitnesspal.feature.premium.ui.fragment.PremiumUpsellWebFragment;
import com.myfitnesspal.feature.premium.ui.fragment.PremiumUpsellWebFragment_MembersInjector;
import com.myfitnesspal.feature.premium.ui.fragment.SubscriptionStatusFragment;
import com.myfitnesspal.feature.premium.ui.fragment.SubscriptionStatusFragment_MembersInjector;
import com.myfitnesspal.feature.premium.ui.navigation.PremiumUpsellCoordinator;
import com.myfitnesspal.feature.premium.ui.navigation.PremiumUpsellNavigator;
import com.myfitnesspal.feature.premium.ui.viewmodel.PremiumUpsellViewModelFactory;
import com.myfitnesspal.feature.premium.util.PremiumFeatureOverrides;
import com.myfitnesspal.feature.profile.analytics.MeAnalytics;
import com.myfitnesspal.feature.profile.analytics.MeAnalytics_MembersInjector;
import com.myfitnesspal.feature.profile.service.ProfileAggregatorService;
import com.myfitnesspal.feature.profile.ui.activity.MeActivity;
import com.myfitnesspal.feature.profile.ui.activity.MeActivity_MembersInjector;
import com.myfitnesspal.feature.profile.ui.fragment.MyInfoFragment;
import com.myfitnesspal.feature.profile.ui.fragment.MyInfoFragment_MembersInjector;
import com.myfitnesspal.feature.profile.ui.fragment.MyItemsFragment;
import com.myfitnesspal.feature.profile.ui.fragment.MyItemsFragment_MembersInjector;
import com.myfitnesspal.feature.profile.ui.fragment.ProfileFragment;
import com.myfitnesspal.feature.profile.ui.fragment.ProfileFragment_MembersInjector;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyInfoViewModel.OfflineDataTask;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyInfoViewModel.OnlineDataTask;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyInfoViewModel_OfflineDataTask_MembersInjector;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyInfoViewModel_OnlineDataTask_MembersInjector;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyItemsViewModel.MyItemsTask;
import com.myfitnesspal.feature.profile.ui.viewmodel.MyItemsViewModel_MyItemsTask_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.AddWeightActivity;
import com.myfitnesspal.feature.progress.ui.activity.AddWeightActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ImportPhotoActivity;
import com.myfitnesspal.feature.progress.ui.activity.ImportPhotoActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ProgressActivity;
import com.myfitnesspal.feature.progress.ui.activity.ProgressActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ProgressCongratsActivity;
import com.myfitnesspal.feature.progress.ui.activity.ProgressCongratsActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ProgressPhotosGalleryActivity;
import com.myfitnesspal.feature.progress.ui.activity.ProgressPhotosGalleryActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ProgressPhotosInterstitialActivity;
import com.myfitnesspal.feature.progress.ui.activity.ProgressPhotosInterstitialActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.RecommendGoal;
import com.myfitnesspal.feature.progress.ui.activity.RecommendGoal_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.ShareProgressActivity;
import com.myfitnesspal.feature.progress.ui.activity.ShareProgressActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.activity.StatusUpdateActivity;
import com.myfitnesspal.feature.progress.ui.activity.StatusUpdateActivity_MembersInjector;
import com.myfitnesspal.feature.progress.ui.dialog.GraphPeriodDialogFragment;
import com.myfitnesspal.feature.progress.ui.dialog.GraphPeriodDialogFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.dialog.MeasurementTypeDialogFragment;
import com.myfitnesspal.feature.progress.ui.dialog.MeasurementTypeDialogFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.dialog.MeasurementValueDialogFragment;
import com.myfitnesspal.feature.progress.ui.dialog.MeasurementValueDialogFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.dialog.ProgressEntryLongPressDialogFragment;
import com.myfitnesspal.feature.progress.ui.dialog.ProgressEntryLongPressDialogFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.fragment.ImportPhotoFragment;
import com.myfitnesspal.feature.progress.ui.fragment.ImportPhotoFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.fragment.LegacyWeightPickerFragment;
import com.myfitnesspal.feature.progress.ui.fragment.LegacyWeightPickerFragment_MembersInjector;
import com.myfitnesspal.feature.progress.ui.viewmodel.ProgressViewModel;
import com.myfitnesspal.feature.progress.ui.viewmodel.ProgressViewModel_MembersInjector;
import com.myfitnesspal.feature.recipes.model.MfpRecipeListContainer;
import com.myfitnesspal.feature.recipes.ui.activity.CreateRecipeManuallyActivity;
import com.myfitnesspal.feature.recipes.ui.activity.CreateRecipeManuallyActivity_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.activity.IngredientMatchingActivity;
import com.myfitnesspal.feature.recipes.ui.activity.IngredientMatchingActivity_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeDetailsActivity;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeDetailsActivity_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeImportBrowserActivity;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeImportBrowserActivity_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeImportReviewActivity;
import com.myfitnesspal.feature.recipes.ui.activity.RecipeImportReviewActivity_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.activity.RecipesAndFoods;
import com.myfitnesspal.feature.recipes.ui.activity.RecipesAndFoods_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.dialog.CreateRecipeDialogFragment;
import com.myfitnesspal.feature.recipes.ui.dialog.CreateRecipeDialogFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.fragment.CreateOrEditRecipeFragment;
import com.myfitnesspal.feature.recipes.ui.fragment.CreateOrEditRecipeFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.fragment.MyFoodsFragment;
import com.myfitnesspal.feature.recipes.ui.fragment.MyFoodsFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.fragment.MyMealsFragment;
import com.myfitnesspal.feature.recipes.ui.fragment.MyMealsFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.fragment.MyRecipesFragment;
import com.myfitnesspal.feature.recipes.ui.fragment.MyRecipesFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.fragment.RecipeDetailsFragment;
import com.myfitnesspal.feature.recipes.ui.fragment.RecipeDetailsFragment_MembersInjector;
import com.myfitnesspal.feature.recipes.ui.view.IngredientsContainer;
import com.myfitnesspal.feature.recipes.ui.view.IngredientsContainer_MembersInjector;
import com.myfitnesspal.feature.registration.model.LoginModel;
import com.myfitnesspal.feature.registration.model.SignUpModel;
import com.myfitnesspal.feature.registration.service.SignUpService;
import com.myfitnesspal.feature.registration.ui.activity.AccountRestrictedActivity;
import com.myfitnesspal.feature.registration.ui.activity.AccountRestrictedActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.FacebookLoginActivity;
import com.myfitnesspal.feature.registration.ui.activity.FacebookLoginActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.FinishOnboardingActivity;
import com.myfitnesspal.feature.registration.ui.activity.FinishOnboardingActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.ForgotPasswordActivity;
import com.myfitnesspal.feature.registration.ui.activity.ForgotPasswordActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.LoginActivity;
import com.myfitnesspal.feature.registration.ui.activity.LoginActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.LogoutActivity;
import com.myfitnesspal.feature.registration.ui.activity.LogoutActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.OAuthActivity;
import com.myfitnesspal.feature.registration.ui.activity.OAuthActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.PrefetchActivity;
import com.myfitnesspal.feature.registration.ui.activity.PrefetchActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.SignUpActivity;
import com.myfitnesspal.feature.registration.ui.activity.SignUpActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.TermsOfUseActivity;
import com.myfitnesspal.feature.registration.ui.activity.TermsOfUseActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.activity.UpdatedTermsActivity;
import com.myfitnesspal.feature.registration.ui.activity.UpdatedTermsActivity_MembersInjector;
import com.myfitnesspal.feature.registration.ui.dialog.SignUpHeightDialogFragment;
import com.myfitnesspal.feature.registration.ui.dialog.SignUpHeightDialogFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.dialog.SignUpWeightDialogFragment;
import com.myfitnesspal.feature.registration.ui.dialog.SignUpWeightDialogFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.LoginPleaseWaitFragment;
import com.myfitnesspal.feature.registration.ui.fragment.LoginSignInUpButtonsFragment;
import com.myfitnesspal.feature.registration.ui.fragment.LoginUserPassFragment;
import com.myfitnesspal.feature.registration.ui.fragment.LoginUserPassFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpActivityLevelFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpActivityLevelFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpCongratsFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpCongratsFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpFragmentBase;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpFragmentBase_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpGenderAgeFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpGenderAgeFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpGoalTypeFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpGoalTypeFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpMarketingOptInFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpMarketingOptInFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpUsernamePasswordEmailFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpUsernamePasswordEmailFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpWeeklyWeightGoalFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpWeeklyWeightGoalFragment_MembersInjector;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpWeightHeightFragment;
import com.myfitnesspal.feature.registration.ui.fragment.SignUpWeightHeightFragment_MembersInjector;
import com.myfitnesspal.feature.registration.util.PasswordResetHelper_Factory;
import com.myfitnesspal.feature.registration.util.StartupManager;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.MenusActivity;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.MenusActivity_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.RestaurantLoggingInterstitial;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.RestaurantLoggingInterstitial_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.SearchMatchActivity;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.SearchMatchActivity_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.VenuesActivity;
import com.myfitnesspal.feature.restaurantlogging.ui.activity.VenuesActivity_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.dialog.NotifyRequestMenuDialogFragment;
import com.myfitnesspal.feature.restaurantlogging.ui.dialog.NotifyRequestMenuDialogFragment_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.view.MenusListView;
import com.myfitnesspal.feature.restaurantlogging.ui.view.MenusListView_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.ui.view.VenuesListView;
import com.myfitnesspal.feature.restaurantlogging.ui.view.VenuesListView_MembersInjector;
import com.myfitnesspal.feature.restaurantlogging.util.MultiAddMenuItemHelper;
import com.myfitnesspal.feature.search.repository.LocalFoodSearchRepository;
import com.myfitnesspal.feature.search.repository.OnlineFoodSearchRepository;
import com.myfitnesspal.feature.search.service.SearchService;
import com.myfitnesspal.feature.search.ui.FoodSearchActivityFactory;
import com.myfitnesspal.feature.search.ui.FoodSearchActivityFactory_Factory;
import com.myfitnesspal.feature.search.ui.activity.FoodSearchActivity;
import com.myfitnesspal.feature.search.ui.activity.FoodSearchActivityV2;
import com.myfitnesspal.feature.search.ui.activity.FoodSearchActivityV2_MembersInjector;
import com.myfitnesspal.feature.search.ui.activity.FoodSearchActivity_MembersInjector;
import com.myfitnesspal.feature.search.ui.adapter.SearchCategoryItemAdapter;
import com.myfitnesspal.feature.search.ui.adapter.SearchCategoryItemAdapter_MembersInjector;
import com.myfitnesspal.feature.search.ui.dialog.MealFilterDialog;
import com.myfitnesspal.feature.search.ui.dialog.MealFilterDialog_MembersInjector;
import com.myfitnesspal.feature.search.ui.dialog.SearchCategoryDialog;
import com.myfitnesspal.feature.search.ui.dialog.SearchCategoryDialog_MembersInjector;
import com.myfitnesspal.feature.search.ui.dialog.SortOrderDialog;
import com.myfitnesspal.feature.search.ui.dialog.SortOrderDialog_MembersInjector;
import com.myfitnesspal.feature.search.ui.fragment.LocalFoodSearchFragment;
import com.myfitnesspal.feature.search.ui.fragment.LocalFoodSearchFragmentV2;
import com.myfitnesspal.feature.search.ui.fragment.LocalFoodSearchFragmentV2_MembersInjector;
import com.myfitnesspal.feature.search.ui.fragment.LocalFoodSearchFragment_MembersInjector;
import com.myfitnesspal.feature.search.ui.fragment.OnlineFoodSearchFragment;
import com.myfitnesspal.feature.search.ui.fragment.OnlineFoodSearchFragment_MembersInjector;
import com.myfitnesspal.feature.search.ui.viewmodel.FoodSearchViewModel;
import com.myfitnesspal.feature.search.ui.viewmodel.FoodSearchViewModel_Factory;
import com.myfitnesspal.feature.search.ui.viewmodel.LocalFoodSearchViewModel;
import com.myfitnesspal.feature.search.ui.viewmodel.LocalFoodSearchViewModel_Factory;
import com.myfitnesspal.feature.search.ui.viewmodel.OnlineFoodSearchViewModel;
import com.myfitnesspal.feature.search.ui.viewmodel.OnlineFoodSearchViewModel_Factory;
import com.myfitnesspal.feature.search.util.SortOrderHelper;
import com.myfitnesspal.feature.search.util.SortOrderHelper_Factory;
import com.myfitnesspal.feature.settings.api.TroubleShootingApi;
import com.myfitnesspal.feature.settings.model.ABTestSettings;
import com.myfitnesspal.feature.settings.model.ABTestSettings_Factory;
import com.myfitnesspal.feature.settings.model.AdsSettings;
import com.myfitnesspal.feature.settings.model.AdsSettings_Factory;
import com.myfitnesspal.feature.settings.model.AppSettings;
import com.myfitnesspal.feature.settings.model.AppSettings_Factory;
import com.myfitnesspal.feature.settings.model.ChangePasswordViewModel;
import com.myfitnesspal.feature.settings.model.ChangePasswordViewModel_Factory;
import com.myfitnesspal.feature.settings.model.InsightSettings_Factory;
import com.myfitnesspal.feature.settings.model.TroubleshootingViewModel;
import com.myfitnesspal.feature.settings.model.TroubleshootingViewModel_Factory;
import com.myfitnesspal.feature.settings.model.XPromoSettings;
import com.myfitnesspal.feature.settings.model.XPromoSettings_Factory;
import com.myfitnesspal.feature.settings.service.TroubleshootingService;
import com.myfitnesspal.feature.settings.ui.activity.AutoPlaySettings;
import com.myfitnesspal.feature.settings.ui.activity.AutoPlaySettings_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.ChangePasswordActivity;
import com.myfitnesspal.feature.settings.ui.activity.ChangePasswordActivity_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.CustomMealNames;
import com.myfitnesspal.feature.settings.ui.activity.CustomMealNames_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.EditCardioExercise;
import com.myfitnesspal.feature.settings.ui.activity.EditCardioExercise_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.EditFood;
import com.myfitnesspal.feature.settings.ui.activity.EditFood_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.EditProfile;
import com.myfitnesspal.feature.settings.ui.activity.EditProfile_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.EditReminder;
import com.myfitnesspal.feature.settings.ui.activity.EditReminder_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.FacebookSettings;
import com.myfitnesspal.feature.settings.ui.activity.FacebookSettings_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.PasscodeView;
import com.myfitnesspal.feature.settings.ui.activity.PasscodeView_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.PrivacyCenterActivity;
import com.myfitnesspal.feature.settings.ui.activity.PrivacyCenterActivity_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.RemindersActivity;
import com.myfitnesspal.feature.settings.ui.activity.SelectReminder;
import com.myfitnesspal.feature.settings.ui.activity.SelectReminder_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.SettingsActivity;
import com.myfitnesspal.feature.settings.ui.activity.SettingsActivity_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.TroubleshootingActivity;
import com.myfitnesspal.feature.settings.ui.activity.TroubleshootingActivity_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.ViewFoodActivity;
import com.myfitnesspal.feature.settings.ui.activity.ViewFoodActivity_MembersInjector;
import com.myfitnesspal.feature.settings.ui.activity.WeeklyNutritionSettings;
import com.myfitnesspal.feature.settings.ui.dialog.CountryDialogFragment;
import com.myfitnesspal.feature.settings.ui.dialog.CountryDialogFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.dialog.GenderDialogFragment;
import com.myfitnesspal.feature.settings.ui.dialog.HeightDialogFragment;
import com.myfitnesspal.feature.settings.ui.dialog.HeightDialogFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.dialog.PinCodeDialogFragment;
import com.myfitnesspal.feature.settings.ui.dialog.PinCodeDialogFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.dialog.UnitsDialogFragment;
import com.myfitnesspal.feature.settings.ui.dialog.UnitsDialogFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.DiarySettingsFragment;
import com.myfitnesspal.feature.settings.ui.fragment.DiarySettingsFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.EmailSettingsListFragment;
import com.myfitnesspal.feature.settings.ui.fragment.EmailSettingsListFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.RemindersFragment;
import com.myfitnesspal.feature.settings.ui.fragment.RemindersFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.SettingsListFragment;
import com.myfitnesspal.feature.settings.ui.fragment.SettingsListFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.SharingAndPrivacySettingsListFragment;
import com.myfitnesspal.feature.settings.ui.fragment.SharingAndPrivacySettingsListFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.StepsSettingsListFragment;
import com.myfitnesspal.feature.settings.ui.fragment.StepsSettingsListFragment_MembersInjector;
import com.myfitnesspal.feature.settings.ui.fragment.WeeklyNutritionSettingsListFragment;
import com.myfitnesspal.feature.settings.ui.fragment.WeeklyNutritionSettingsListFragment_MembersInjector;
import com.myfitnesspal.feature.settings.util.DiarySharingSettingsManager;
import com.myfitnesspal.feature.settings.util.DiarySharingSettingsManager_Factory;
import com.myfitnesspal.feature.timestamp.mixin.TimestampPickerMixin;
import com.myfitnesspal.feature.timestamp.mixin.TimestampPickerMixin_MembersInjector;
import com.myfitnesspal.feature.timestamp.service.TimestampAnalyticsHelper_Factory;
import com.myfitnesspal.feature.tizen.service.MfpGearMessageBridge;
import com.myfitnesspal.feature.tizen.service.MfpGearMessageBridge_MembersInjector;
import com.myfitnesspal.feature.userapplicationsettings.service.UserApplicationSettingsService;
import com.myfitnesspal.feature.video.activity.VideoActivity;
import com.myfitnesspal.feature.video.activity.VideoActivity_MembersInjector;
import com.myfitnesspal.feature.walkthrough.ui.activity.WalkthroughLoggingActivity;
import com.myfitnesspal.feature.walkthrough.ui.activity.WalkthroughLoggingActivity_MembersInjector;
import com.myfitnesspal.feature.walkthrough.ui.fragment.WalkthroughFoodSearchFragment;
import com.myfitnesspal.feature.walkthrough.ui.fragment.WalkthroughFoodSearchFragment_MembersInjector;
import com.myfitnesspal.feature.walkthrough.ui.fragment.WalkthroughServingSizeV2Fragment;
import com.myfitnesspal.feature.walkthrough.ui.fragment.WalkthroughServingSizeV2Fragment_MembersInjector;
import com.myfitnesspal.feature.walkthrough.util.WalkthroughUtil;
import com.myfitnesspal.framework.mvvm.ViewModelCache;
import com.myfitnesspal.shared.api.ApiUrlProvider;
import com.myfitnesspal.shared.api.MfpApiSettings;
import com.myfitnesspal.shared.api.auth.AuthTokenProvider;
import com.myfitnesspal.shared.api.auth.LegacyAuthTokenStore;
import com.myfitnesspal.shared.api.v2.interceptor.BaseHeaderRequestInterceptor;
import com.myfitnesspal.shared.db.DbConnectionManager;
import com.myfitnesspal.shared.db.adapter.DeletedItemsDBAdapter_Factory;
import com.myfitnesspal.shared.db.adapter.SessionDBAdapter;
import com.myfitnesspal.shared.db.adapter.SessionDBAdapter_MembersInjector;
import com.myfitnesspal.shared.db.table.DeletedItemsTable;
import com.myfitnesspal.shared.db.table.DeletedItemsTable_Factory;
import com.myfitnesspal.shared.db.table.DeletedMostUsedFoodsTable;
import com.myfitnesspal.shared.db.table.DeletedMostUsedFoodsTable_Factory;
import com.myfitnesspal.shared.db.table.ExerciseEntriesTable_Factory;
import com.myfitnesspal.shared.db.table.FoodNotesTable_Factory;
import com.myfitnesspal.shared.db.table.FoodPermissionsTable_Factory;
import com.myfitnesspal.shared.db.table.FoodsTable;
import com.myfitnesspal.shared.db.table.FoodsTable_Factory;
import com.myfitnesspal.shared.db.table.MeasurementTypesTable_Factory;
import com.myfitnesspal.shared.db.table.MeasurementsTable_Factory;
import com.myfitnesspal.shared.db.table.ProfileImagesTable_Factory;
import com.myfitnesspal.shared.db.table.RecipesTable_Factory;
import com.myfitnesspal.shared.db.table.RemindersTable_Factory;
import com.myfitnesspal.shared.db.table.StepsTable_Factory;
import com.myfitnesspal.shared.db.table.SyncPointersTable_Factory;
import com.myfitnesspal.shared.factory.DeviceUuidFactory_Factory;
import com.myfitnesspal.shared.geolocation.GeoLocationService;
import com.myfitnesspal.shared.injection.module.ApiModule;
import com.myfitnesspal.shared.injection.module.ApiModule_ProvideBaseRequestInterceptorFactory;
import com.myfitnesspal.shared.injection.module.ApiModule_ProvideHttpClientFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule;
import com.myfitnesspal.shared.injection.module.ApplicationModule_GetFacebookAppIdFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_GetPackageManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideABTestSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAchievementAdAnalyticsEventsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAchievementAdManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAchievementInterstitialAdFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAchievementsStoreSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAdConsentsAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAdIdConsentCompliantFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAdUnitServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAdsSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAlexaInterstitialAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAndroidAdvertisementIdentifierFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideApiSettingsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideApiUrlProviderFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppContextFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppLifecycleObserverFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppSessionIdFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppVersionCodeFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAppVersionStringFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideApplicationFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideAudioManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideBinaryCtorArgsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideCarrierNameFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideClientIdFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideConsentsAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDatabaseFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDbConnectionManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDebugSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDeleteAccountAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDeleteAccountServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDeviceUUIDBytesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideDeviceUUIDFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideEmailValidatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideExerciseAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideExerciseServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideExerciseSortingPrefsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideFoodFeedbackRepositoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideFoodFoodbackAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideFoodServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideFoodSortingPrefsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideFriendInviteStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGDPRHelpAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGeoLocationSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGlobalAppPreferenceMigrationUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGlobalSettingsPreferenceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGlobalSettingsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGsonFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideGuestAccessTokenFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideHomeAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideInputMethodManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideInsightsSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideJobServiceFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideLocalFoodSearchRepositoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideLocationServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideLoginSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideMainHandlerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideMealBrowseAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideMfpAnalyticsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideNavigatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideNutritionAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideNutritionGraphPreferenceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideOkHttpClientFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideOnlineFoodSearchRepositoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePaymentAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePermissionAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumOnboardingAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumOnboardingFlowCoordinatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumOnboardingViewFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumOverridesSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumUpsellCoordinatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumUpsellNavigatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidePremiumUpsellViewModelFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideProfileAggregatorServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideProgressCongratsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideProgressCongratsSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRecipeCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRecipeCacheStoreSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRecipeServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRecipesAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRemindersServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRestaurantSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideRetrofitInterfaceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideServingSizeValidatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSettingsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSettingsSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSharedPreferencesCacheStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSharedPreferences_NewsFeedCacheStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSignUpSharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideStartupManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideStepsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideStockDatabaseFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideStoredAchievementEventsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSyncPointerServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSyncSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideSyncV2SharedPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideTelephonyManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideTroubleshootingApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideTroubleshootingRepositoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfConfigurationSdkFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfConfigurationUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfEmailVerificationManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfIdentitySdkFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfVariantSdkFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUacfVariantUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUserAgentFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUserGoalsPrefsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUserImageServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideUserSummaryRepositoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideVideoAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideWeightValidatorFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvideXPromoSettingsStoreFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesActionApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesActionTrackingServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAdsAnalyticHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAdvancedDebuggingUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAmplitudeServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAnalyticsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAnalyticsTaskQueueFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAppGalleryServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesAppIndexerBotFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesBackgroundServiceHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesBarcodeServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesBlogServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesBusyManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesChallengesAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesChallengesServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesChartRendererFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesConfigurationCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesConnectivityManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesConsentServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesCoreChartLegendFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesCoreChartRendererBaseConstructorArgsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesCountryServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDebugSettingsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDeepLinkManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDeepLinkRouterFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDeviceActivationApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDeviceInfoFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDiaryAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDiaryDayCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDiaryNoteMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDiaryServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesDispatcherFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExerciseEntryFromServerMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExerciseEntryMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExerciseFromServerMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExerciseMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExerciseSearchAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesExploreServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFacebookServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFileExportAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFileExportServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodEditorAnalyticsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodEntryFromServerMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodMigrationAndCorrectionHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodPermissionsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodPortionMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFoodSearchAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFriendCheckCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFriendServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesFriendsCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesGeoLocationServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesGlideFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesGoogleAnalyticsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesIdServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesImageAssociationServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesImageReportingServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesImageServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesImageUploadServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesInAppNotificationManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesInfoApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesInstallManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesLocalizedStringServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesLocalizedStringsUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMealAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMealHelperUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMealIngedientMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMealServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMeasurementLineChartRendererFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMeasurementsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMenuServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMessageServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMfpAnalyticsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMfpConfigJsonApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMfpFoodMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMfpPlatformAppDetailsCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMiniUserInfoMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMultiAddFoodHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesMultiAddMenuItemHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNavigationHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNewsFeedAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNewsFeedCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNewsFeedServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNotificationInboxAnalyticsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutrientDashboardAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutrientDashboardRendererFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutrientGoalServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutritionGraphAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutritionGraphPreferenceServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutritionGraphServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesNutritionalGoalsUtilServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPacketFactoryFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPrefetchServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPremiumAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPremiumApiErrorUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPremiumFeatureOverridesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPrivateFilePrinterFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPrivateLogFileFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesProductServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesProgressAnalyticsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesProgressServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesPushNotificationManagerFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesRadialGraphNutrientDashboardFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesResourceUtilsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesRestaurantLoggingAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesRestaurantLoggingSettingsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSearchApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSearchServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSettingsAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSignInServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSignUpModelFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSignUpServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesStatusAnalyticsFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesStepsBarChartRendererFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSubscriptionServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesSyncApiFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesTextNutrientDashboardFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesTroubleshootingServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUpdatedTermsAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUpsellServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUserApplicationSettingsServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUserPropertiesServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUserSummaryServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesUserV1GoalPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesVanillaServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesVenueServiceFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesViewModelCacheFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesWalkThroughUtilFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesWaterEntryMapperFactory;
import com.myfitnesspal.shared.injection.module.ApplicationModule_ProvidesWaterLoggingAnalyticsHelperFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvideGoogleFitPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesAggregateExternalExerciseServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesAggregateExternalNutritionServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesAggregateExternalStepsServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesAggregateExternalUserServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesExternalSyncOpFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesFitClientPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitActivityServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitClientFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitNutrientServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitStepsServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitSubscriptionServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesGoogleFitUserServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthConnectionFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthExerciseServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthNutritionServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthPreferencesFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthStepsServiceFactory;
import com.myfitnesspal.shared.injection.module.ExternalSyncModule_ProvidesSHealthUserServiceFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvideOttoBusFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesConfigServiceFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesInterceptorFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesLnConfigFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesLoginModelFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesMfpJsonV2ApiFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesPaymentServiceFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesPremiumServiceFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesPrinterFactory;
import com.myfitnesspal.shared.injection.module.ServiceModule_ProvidesSubscriptionServiceDbAdapterFactory;
import com.myfitnesspal.shared.injection.module.SessionModule;
import com.myfitnesspal.shared.injection.module.SessionModule_ProvideAuthTokenProviderFactory;
import com.myfitnesspal.shared.injection.module.SessionModule_ProvideOAuthTokenStoreFactory;
import com.myfitnesspal.shared.injection.module.SessionModule_ProvideUserImplFactory;
import com.myfitnesspal.shared.injection.module.SessionModule_ProvidesSessionFactory;
import com.myfitnesspal.shared.injection.module.SessionModule_ProvidesUserServiceFactory;
import com.myfitnesspal.shared.injection.module.SyncModule;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvideClientEmailVerificationStatusFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesAnalyticsSyncOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesAnalyticsSyncSchedulerFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesAnalyticsSyncServiceFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesAuthTokenOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesConfigOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesConfigurationOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesFindAndCorrectFoodsWithMissingInfoOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesGeoLocationOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesImageSyncServiceDelegateFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesImageSyncServiceFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesLegacySyncManagerFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesMigrateTokenOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesProductServiceOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesReceiptsOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesRolloutsOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncEngineFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncItemConsumersFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncSchedulerDelegateFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncSchedulerFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncServiceDelegateFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncUtilFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncV1OpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncV2OpDelegateFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesSyncV2OpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesUacfUserOpFactory;
import com.myfitnesspal.shared.injection.module.SyncModule_ProvidesUserV2SyncOpFactory;
import com.myfitnesspal.shared.model.mapper.ApiBinaryMapperBase_Factory;
import com.myfitnesspal.shared.model.mapper.ApiJsonMapper_Factory;
import com.myfitnesspal.shared.model.mapper.impl.ExerciseEntryMapper;
import com.myfitnesspal.shared.model.mapper.impl.FoodMapper;
import com.myfitnesspal.shared.model.v1.DiaryDay;
import com.myfitnesspal.shared.model.v1.DiaryDay_MembersInjector;
import com.myfitnesspal.shared.model.v1.UserV1;
import com.myfitnesspal.shared.model.v1.UserV1NutrientGoals;
import com.myfitnesspal.shared.model.v1.UserV1NutrientGoals_MembersInjector;
import com.myfitnesspal.shared.model.v1.UserV1_MembersInjector;
import com.myfitnesspal.shared.model.v15.StatusUpdateObject;
import com.myfitnesspal.shared.model.v15.StatusUpdateObject_MembersInjector;
import com.myfitnesspal.shared.model.v2.MfpNewsFeedActivityEntryListContainer;
import com.myfitnesspal.shared.notification.InAppNotificationManager;
import com.myfitnesspal.shared.notification.JobServiceFactory;
import com.myfitnesspal.shared.notification.MfpNotificationHandler;
import com.myfitnesspal.shared.notification.MfpNotificationHandler_Factory;
import com.myfitnesspal.shared.notification.PushNotificationManager;
import com.myfitnesspal.shared.notification.service.InAppNotificationService;
import com.myfitnesspal.shared.notification.service.InAppNotificationService_MembersInjector;
import com.myfitnesspal.shared.notification.service.MfpNotificationActionService;
import com.myfitnesspal.shared.notification.service.MfpNotificationActionService_MembersInjector;
import com.myfitnesspal.shared.notification.service.NotificationInvokerService;
import com.myfitnesspal.shared.notification.service.NotificationInvokerService_MembersInjector;
import com.myfitnesspal.shared.provider.MPFAppWidgetProvider;
import com.myfitnesspal.shared.provider.MPFAppWidgetProvider_MembersInjector;
import com.myfitnesspal.shared.receiver.MfpNotificationActionReceiver;
import com.myfitnesspal.shared.receiver.MfpNotificationActionReceiver_MembersInjector;
import com.myfitnesspal.shared.receiver.NotificationBroadcastReceiver;
import com.myfitnesspal.shared.receiver.NotificationBroadcastReceiver_MembersInjector;
import com.myfitnesspal.shared.service.BackgroundJobHelperImpl;
import com.myfitnesspal.shared.service.BackgroundJobHelperImpl_MembersInjector;
import com.myfitnesspal.shared.service.ExerciseStringService;
import com.myfitnesspal.shared.service.ExerciseStringService_Factory;
import com.myfitnesspal.shared.service.ads.AdIdConsentCompliant;
import com.myfitnesspal.shared.service.ads.AdsAnalyticsHelper;
import com.myfitnesspal.shared.service.ads.AndroidAdvertisementIdentifier;
import com.myfitnesspal.shared.service.analytics.ActionTrackingService;
import com.myfitnesspal.shared.service.analytics.AmplitudeService;
import com.myfitnesspal.shared.service.analytics.AnalyticsService;
import com.myfitnesspal.shared.service.analytics.AnalyticsSyncMode;
import com.myfitnesspal.shared.service.analytics.GoogleAnalyticsService;
import com.myfitnesspal.shared.service.analytics.MfpAnalyticsService;
import com.myfitnesspal.shared.service.analytics.MfpAnalyticsTaskQueue;
import com.myfitnesspal.shared.service.appindexer.AppIndexerBot;
import com.myfitnesspal.shared.service.config.ConfigService;
import com.myfitnesspal.shared.service.device.UserAgentProvider;
import com.myfitnesspal.shared.service.foods.FoodService;
import com.myfitnesspal.shared.service.globalsettings.GlobalSettingsService;
import com.myfitnesspal.shared.service.imagesync.ImageSyncMode;
import com.myfitnesspal.shared.service.imagesync.ImageSyncServiceDelegate;
import com.myfitnesspal.shared.service.install.CountryService;
import com.myfitnesspal.shared.service.lifecycle.AppLifecycleObserver;
import com.myfitnesspal.shared.service.localsettings.LocalSettingsService;
import com.myfitnesspal.shared.service.location.LocationService;
import com.myfitnesspal.shared.service.measurements.MeasurementsService;
import com.myfitnesspal.shared.service.message.MFPFirebaseMessagingService;
import com.myfitnesspal.shared.service.message.MFPFirebaseMessagingService_MembersInjector;
import com.myfitnesspal.shared.service.newsfeed.NewsFeedService;
import com.myfitnesspal.shared.service.session.Session;
import com.myfitnesspal.shared.service.session.UserImpl;
import com.myfitnesspal.shared.service.session.UserV2Service;
import com.myfitnesspal.shared.service.steps.StepService;
import com.myfitnesspal.shared.service.syncv1.ApiDeviceTokenProvider;
import com.myfitnesspal.shared.service.syncv1.BinaryEncoder;
import com.myfitnesspal.shared.service.syncv1.BinaryEncoder_Factory;
import com.myfitnesspal.shared.service.syncv1.BinaryResponse;
import com.myfitnesspal.shared.service.syncv1.BinaryResponse_MembersInjector;
import com.myfitnesspal.shared.service.syncv1.LegacySyncManager;
import com.myfitnesspal.shared.service.syncv1.SyncSettings;
import com.myfitnesspal.shared.service.syncv1.SynchronizationRequest;
import com.myfitnesspal.shared.service.syncv1.SynchronizationRequest_MembersInjector;
import com.myfitnesspal.shared.service.syncv1.SynchronizationResponse;
import com.myfitnesspal.shared.service.syncv1.SynchronizationResponse_MembersInjector;
import com.myfitnesspal.shared.service.syncv1.packets.request.ApiRequestPacketImpl;
import com.myfitnesspal.shared.service.syncv1.packets.request.ApiRequestPacketImpl_MembersInjector;
import com.myfitnesspal.shared.service.syncv1.packets.request.EmailUniquenessCheckRequestPacket;
import com.myfitnesspal.shared.service.syncv1.packets.request.EmailUniquenessCheckRequestPacket_MembersInjector;
import com.myfitnesspal.shared.service.syncv2.MfpSyncEngineDelegate;
import com.myfitnesspal.shared.service.syncv2.SyncService;
import com.myfitnesspal.shared.service.syncv2.SyncType;
import com.myfitnesspal.shared.service.syncv2.SyncUtil;
import com.myfitnesspal.shared.service.syncv2.ops.MfpSyncV2OpDelegate;
import com.myfitnesspal.shared.service.syncv2.ops.MfpSyncV2OpDelegate_MembersInjector;
import com.myfitnesspal.shared.service.thirdparty.ThirdPartyService_Factory;
import com.myfitnesspal.shared.service.userdata.UserDistanceService;
import com.myfitnesspal.shared.service.userdata.UserDistanceService_Factory;
import com.myfitnesspal.shared.service.userdata.UserEnergyService;
import com.myfitnesspal.shared.service.userdata.UserEnergyService_Factory;
import com.myfitnesspal.shared.service.userdata.UserHeightService;
import com.myfitnesspal.shared.service.userdata.UserHeightService_Factory;
import com.myfitnesspal.shared.service.userdata.UserSummaryService;
import com.myfitnesspal.shared.service.userdata.UserWeightService;
import com.myfitnesspal.shared.service.userdata.UserWeightService_Factory;
import com.myfitnesspal.shared.uacf.UacfConfigurationUtil;
import com.myfitnesspal.shared.uacf.UacfEmailVerificationManager;
import com.myfitnesspal.shared.uacf.UacfRolloutUtil;
import com.myfitnesspal.shared.uacf.UacfSharedLibrary.UacfThumbprintAnalyticsCallback;
import com.myfitnesspal.shared.uacf.UacfSharedLibrary_UacfThumbprintAnalyticsCallback_MembersInjector;
import com.myfitnesspal.shared.ui.activity.FloatingButtonMixin;
import com.myfitnesspal.shared.ui.activity.FloatingButtonMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.MfpActivity;
import com.myfitnesspal.shared.ui.activity.MfpActivity_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.DisconnectFacebook;
import com.myfitnesspal.shared.ui.activity.impl.DisconnectFacebook_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.FullScreenWebView;
import com.myfitnesspal.shared.ui.activity.impl.FullScreenWebView_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.DeepLinkRouterActivity;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.DeepLinkRouterActivity_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AddExerciseDeepLinkMixin;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AddExerciseDeepLinkMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AddFoodDeepLinkMixin;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AddFoodDeepLinkMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AppIndexerMixinBase;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.AppIndexerMixinBase_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.ChallengesMixin;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.ChallengesMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.DeepLinkMixinBase;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.DeepLinkMixinBase_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.SendVerificationEmailMixin;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.SendVerificationEmailMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.VenueDeepLinkMixin;
import com.myfitnesspal.shared.ui.activity.impl.deeplink.mixin.VenueDeepLinkMixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.resourceloader.mixin.GetRecipeV2Mixin;
import com.myfitnesspal.shared.ui.activity.impl.resourceloader.mixin.GetRecipeV2Mixin_MembersInjector;
import com.myfitnesspal.shared.ui.activity.impl.resourceloader.mixin.MealFoodLoaderMixin;
import com.myfitnesspal.shared.ui.activity.impl.resourceloader.mixin.MealFoodLoaderMixin_MembersInjector;
import com.myfitnesspal.shared.ui.component.MfpUiComponentDelegate;
import com.myfitnesspal.shared.ui.component.MfpUiComponentDelegate_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.CustomLayoutBaseDialogFragment;
import com.myfitnesspal.shared.ui.dialog.CustomLayoutBaseDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.AccountRestrictedDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.AccountRestrictedDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.CalorieAddErrorDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.CalorieAddErrorDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.ImageChooserDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.ImageChooserDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.MealNamesDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.MealNamesDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.QuickAddCaloriesDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.QuickAddCaloriesDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.dialog.impl.WeightDialogFragment;
import com.myfitnesspal.shared.ui.dialog.impl.WeightDialogFragment_MembersInjector;
import com.myfitnesspal.shared.ui.factory.VMFactory;
import com.myfitnesspal.shared.ui.factory.VMFactory_Factory;
import com.myfitnesspal.shared.ui.fragment.MfpFragment;
import com.myfitnesspal.shared.ui.fragment.MfpFragment_MembersInjector;
import com.myfitnesspal.shared.ui.fragment.NutritionFactsFragmentBase;
import com.myfitnesspal.shared.ui.fragment.NutritionFactsFragmentBase_MembersInjector;
import com.myfitnesspal.shared.ui.fragment.impl.ExternalWebViewFragment;
import com.myfitnesspal.shared.ui.fragment.impl.ExternalWebViewFragment_MembersInjector;
import com.myfitnesspal.shared.ui.fragment.impl.NewNutritionFactsFragment;
import com.myfitnesspal.shared.ui.fragment.impl.NewNutritionFactsFragment_MembersInjector;
import com.myfitnesspal.shared.ui.mixin.BottomBarMixin;
import com.myfitnesspal.shared.ui.mixin.BottomBarMixin_MembersInjector;
import com.myfitnesspal.shared.ui.view.MfpWebView;
import com.myfitnesspal.shared.ui.view.MfpWebView_MembersInjector;
import com.myfitnesspal.shared.util.InputMethodManagerHelper_Factory;
import com.myfitnesspal.shared.util.LocalizedStringsUtil;
import com.myfitnesspal.shared.util.MultiAddFoodHelper;
import com.myfitnesspal.shared.util.UpdateWeightProxy;
import com.myfitnesspal.shared.util.UpdateWeightProxy_MembersInjector;
import com.squareup.otto.Bus;
import com.uacf.core.caching.Cache;
import com.uacf.core.database.SQLiteDatabaseWrapper;
import com.uacf.core.logging.PrivateFilePrinter;
import com.uacf.core.mock.interceptor.RequestInterceptor;
import com.uacf.core.preferences.KeyedSharedPreferences;
import com.uacf.identity.sdk.UacfIdentitySdk;
import com.uacf.sync.engine.UacfScheduler;
import com.uacf.sync.engine.UacfSchedulerDelegate;
import com.uacf.sync.engine.UacfSchedulerEngine;
import com.uacf.sync.provider.sdk.model.SyncItemHandler;
import dagger.Lazy;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import io.uacf.configuration.sdk.UacfConfigurationSdk;
import io.uacf.rollouts.sdk.UacfVariantSdk;
import java.io.File;
import java.util.Map;
import java.util.UUID;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
    private ABTestSettings_Factory aBTestSettingsProvider;
    private AdConsentsViewModel_Factory adConsentsViewModelProvider;
    private AdsSettings_Factory adsSettingsProvider;
    private ApiBinaryMapperBase_Factory apiBinaryMapperBaseProvider;
    private AppRatingService_Factory appRatingServiceProvider;
    private AppSettings_Factory appSettingsProvider;
    private ApplicationModule applicationModule;
    private ChangePasswordViewModel_Factory changePasswordViewModelProvider;
    private ConsentsViewModel_Factory consentsViewModelProvider;
    private ContactsOnMfpService_Factory contactsOnMfpServiceProvider;
    private DeletedItemsDBAdapter_Factory deletedItemsDBAdapterProvider;
    private DeletedItemsTable_Factory deletedItemsTableProvider;
    private DeletedMostUsedFoodsTable_Factory deletedMostUsedFoodsTableProvider;
    private DeviceUuidFactory_Factory deviceUuidFactoryProvider;
    private DiarySharingSettingsManager_Factory diarySharingSettingsManagerProvider;
    private ExerciseEntriesTable_Factory exerciseEntriesTableProvider;
    private ExerciseStringService_Factory exerciseStringServiceProvider;
    private FacebookFriendOnMfpConstructorArgs_Factory facebookFriendOnMfpConstructorArgsProvider;
    private FacebookFriendOnMfpService_Factory facebookFriendOnMfpServiceProvider;
    private FoodFeedbackViewModel_Factory foodFeedbackViewModelProvider;
    private FoodNotesTable_Factory foodNotesTableProvider;
    private FoodPermissionsTable_Factory foodPermissionsTableProvider;
    private FoodSearchActivityFactory_Factory foodSearchActivityFactoryProvider;
    private FoodSearchViewModel_Factory foodSearchViewModelProvider;
    private FoodsTable_Factory foodsTableProvider;
    private FriendOnMfpConstructorArgs_Factory friendOnMfpConstructorArgsProvider;
    private ApplicationModule_GetFacebookAppIdFactory getFacebookAppIdProvider;
    private InputMethodManagerHelper_Factory inputMethodManagerHelperProvider;
    private InsightSettings_Factory insightSettingsProvider;
    private LocalFoodSearchViewModel_Factory localFoodSearchViewModelProvider;
    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;
    private MeasurementTypesTable_Factory measurementTypesTableProvider;
    private MeasurementsTable_Factory measurementsTableProvider;
    private Provider<MfpNotificationHandler> mfpNotificationHandlerProvider;
    private OnlineFoodSearchViewModel_Factory onlineFoodSearchViewModelProvider;
    private PasswordResetHelper_Factory passwordResetHelperProvider;
    private ProfileImagesTable_Factory profileImagesTableProvider;
    private ApplicationModule_ProvideABTestSettingsStoreFactory provideABTestSettingsStoreProvider;
    private Provider<AchievementAdAnalyticsEvents> provideAchievementAdAnalyticsEventsProvider;
    private ApplicationModule_ProvideAchievementAdManagerFactory provideAchievementAdManagerProvider;
    private Provider<AchievementInterstitialAd> provideAchievementInterstitialAdProvider;
    private ApplicationModule_ProvideAchievementsStoreSharedPreferencesFactory provideAchievementsStoreSharedPreferencesProvider;
    private Provider<AdConsentsAnalyticsHelper> provideAdConsentsAnalyticsHelperProvider;
    private Provider<AdIdConsentCompliant> provideAdIdConsentCompliantProvider;
    private ApplicationModule_ProvideAdUnitServiceFactory provideAdUnitServiceProvider;
    private ApplicationModule_ProvideAdsSettingsStoreFactory provideAdsSettingsStoreProvider;
    private Provider<AndroidAdvertisementIdentifier> provideAndroidAdvertisementIdentifierProvider;
    private ApplicationModule_ProvideApiSettingsFactory provideApiSettingsProvider;
    private Provider<ApiUrlProvider> provideApiUrlProvider;
    private Provider<Context> provideAppContextProvider;
    private Provider<AppLifecycleObserver> provideAppLifecycleObserverProvider;
    private Provider<String> provideAppSessionIdProvider;
    private ApplicationModule_ProvideAppSettingsStoreFactory provideAppSettingsStoreProvider;
    private ApplicationModule_ProvideAppVersionCodeFactory provideAppVersionCodeProvider;
    private ApplicationModule_ProvideAppVersionStringFactory provideAppVersionStringProvider;
    private Provider<Application> provideApplicationProvider;
    private Provider<AudioManager> provideAudioManagerProvider;
    private Provider<AuthTokenProvider> provideAuthTokenProvider;
    private Provider<BaseHeaderRequestInterceptor> provideBaseRequestInterceptorProvider;
    private ApplicationModule_ProvideBinaryCtorArgsFactory provideBinaryCtorArgsProvider;
    private Provider<String> provideCarrierNameProvider;
    private SyncModule_ProvideClientEmailVerificationStatusFactory provideClientEmailVerificationStatusProvider;
    private ApplicationModule_ProvideClientIdFactory provideClientIdProvider;
    private ApplicationModule_ProvideConsentsAnalyticsHelperFactory provideConsentsAnalyticsHelperProvider;
    private ApplicationModule_ProvideDatabaseFactory provideDatabaseProvider;
    private Provider<DbConnectionManager> provideDbConnectionManagerProvider;
    private ApplicationModule_ProvideDebugSharedPreferencesFactory provideDebugSharedPreferencesProvider;
    private ApplicationModule_ProvideDeleteAccountAnalyticsHelperFactory provideDeleteAccountAnalyticsHelperProvider;
    private ApplicationModule_ProvideDeleteAccountServiceFactory provideDeleteAccountServiceProvider;
    private Provider<byte[]> provideDeviceUUIDBytesProvider;
    private Provider<UUID> provideDeviceUUIDProvider;
    private Provider<ExerciseAnalyticsHelper> provideExerciseAnalyticsHelperProvider;
    private ApplicationModule_ProvideExerciseServiceFactory provideExerciseServiceProvider;
    private ApplicationModule_ProvideExerciseSortingPrefsFactory provideExerciseSortingPrefsProvider;
    private Provider<FoodFeedbackAction> provideFoodFeedbackRepositoryProvider;
    private Provider<FoodFeedbackAnalyticsHelper> provideFoodFoodbackAnalyticsHelperProvider;
    private ApplicationModule_ProvideFoodServiceFactory provideFoodServiceProvider;
    private ApplicationModule_ProvideFoodSortingPrefsFactory provideFoodSortingPrefsProvider;
    private ApplicationModule_ProvideFriendInviteStoreFactory provideFriendInviteStoreProvider;
    private ApplicationModule_ProvideGDPRHelpAnalyticsHelperFactory provideGDPRHelpAnalyticsHelperProvider;
    private ApplicationModule_ProvideGeoLocationSettingsStoreFactory provideGeoLocationSettingsStoreProvider;
    private ApplicationModule_ProvideGlobalAppPreferenceMigrationUtilFactory provideGlobalAppPreferenceMigrationUtilProvider;
    private ApplicationModule_ProvideGlobalSettingsPreferenceFactory provideGlobalSettingsPreferenceProvider;
    private ApplicationModule_ProvideGlobalSettingsServiceFactory provideGlobalSettingsServiceProvider;
    private ExternalSyncModule_ProvideGoogleFitPreferencesFactory provideGoogleFitPreferencesProvider;
    private Provider<Gson> provideGsonProvider;
    private ApplicationModule_ProvideGuestAccessTokenFactory provideGuestAccessTokenProvider;
    private Provider<HomeAnalyticsHelper> provideHomeAnalyticsHelperProvider;
    private Provider<OkHttpClient> provideHttpClientProvider;
    private ApplicationModule_ProvideInputMethodManagerFactory provideInputMethodManagerProvider;
    private ApplicationModule_ProvideInsightsSettingsStoreFactory provideInsightsSettingsStoreProvider;
    private ApplicationModule_ProvideJobServiceFactoryFactory provideJobServiceFactoryProvider;
    private Provider<LocalFoodSearchRepository> provideLocalFoodSearchRepositoryProvider;
    private Provider<LocationService> provideLocationServiceProvider;
    private ApplicationModule_ProvideLoginSharedPreferencesFactory provideLoginSharedPreferencesProvider;
    private ApplicationModule_ProvideMainHandlerFactory provideMainHandlerProvider;
    private Provider<MealSharingDirectionsAnalyticsHelper> provideMealBrowseAnalyticsHelperProvider;
    private ApplicationModule_ProvideMfpAnalyticsStoreFactory provideMfpAnalyticsStoreProvider;
    private Provider<Navigator> provideNavigatorProvider;
    private Provider<NutritionAnalyticsHelper> provideNutritionAnalyticsHelperProvider;
    private ApplicationModule_ProvideNutritionGraphPreferenceFactory provideNutritionGraphPreferenceProvider;
    private SessionModule_ProvideOAuthTokenStoreFactory provideOAuthTokenStoreProvider;
    private Provider<OkHttpClient> provideOkHttpClientProvider;
    private Provider<OnlineFoodSearchRepository> provideOnlineFoodSearchRepositoryProvider;
    private Provider<Bus> provideOttoBusProvider;
    private Provider<PaymentAnalyticsHelper> providePaymentAnalyticsHelperProvider;
    private ApplicationModule_ProvidePermissionAnalyticsHelperFactory providePermissionAnalyticsHelperProvider;
    private Provider<PremiumOnboardingAnalyticsHelper> providePremiumOnboardingAnalyticsHelperProvider;
    private Provider<PremiumOnboardingFlowCoordinator> providePremiumOnboardingFlowCoordinatorProvider;
    private Provider<PremiumOnboardingViewModelFactory> providePremiumOnboardingViewFactoryProvider;
    private ApplicationModule_ProvidePremiumOverridesSharedPreferencesFactory providePremiumOverridesSharedPreferencesProvider;
    private Provider<PremiumUpsellCoordinator> providePremiumUpsellCoordinatorProvider;
    private Provider<PremiumUpsellNavigator> providePremiumUpsellNavigatorProvider;
    private Provider<PremiumUpsellViewModelFactory> providePremiumUpsellViewModelFactoryProvider;
    private Provider<ProfileAggregatorService> provideProfileAggregatorServiceProvider;
    private ApplicationModule_ProvideProgressCongratsServiceFactory provideProgressCongratsServiceProvider;
    private ApplicationModule_ProvideProgressCongratsSharedPreferencesFactory provideProgressCongratsSharedPreferencesProvider;
    private Provider<Cache<MfpRecipeListContainer>> provideRecipeCacheProvider;
    private ApplicationModule_ProvideRecipeCacheStoreSharedPreferencesFactory provideRecipeCacheStoreSharedPreferencesProvider;
    private ApplicationModule_ProvideRecipeServiceFactory provideRecipeServiceProvider;
    private ApplicationModule_ProvideRecipesAnalyticsHelperFactory provideRecipesAnalyticsHelperProvider;
    private ApplicationModule_ProvideRemindersServiceFactory provideRemindersServiceProvider;
    private ApplicationModule_ProvideRestaurantSharedPreferencesFactory provideRestaurantSharedPreferencesProvider;
    private Provider<Retrofit> provideRetrofitInterfaceProvider;
    private Provider<LocalSettingsService> provideSettingsServiceProvider;
    private ApplicationModule_ProvideSettingsSharedPreferencesFactory provideSettingsSharedPreferencesProvider;
    private ApplicationModule_ProvideSharedPreferencesCacheStoreFactory provideSharedPreferencesCacheStoreProvider;
    private ApplicationModule_ProvideSharedPreferences_NewsFeedCacheStoreFactory provideSharedPreferences_NewsFeedCacheStoreProvider;
    private ApplicationModule_ProvideSignUpSharedPreferencesFactory provideSignUpSharedPreferencesProvider;
    private Provider<StartupManager> provideStartupManagerProvider;
    private Provider<StepService> provideStepsServiceProvider;
    private ApplicationModule_ProvideStockDatabaseFactory provideStockDatabaseProvider;
    private ApplicationModule_ProvideStoredAchievementEventsFactory provideStoredAchievementEventsProvider;
    private ApplicationModule_ProvideSyncPointerServiceFactory provideSyncPointerServiceProvider;
    private ApplicationModule_ProvideSyncV2SharedPreferencesFactory provideSyncV2SharedPreferencesProvider;
    private ApplicationModule_ProvideTelephonyManagerFactory provideTelephonyManagerProvider;
    private Provider<TroubleShootingApi> provideTroubleshootingApiProvider;
    private ApplicationModule_ProvideTroubleshootingRepositoryFactory provideTroubleshootingRepositoryProvider;
    private Provider<UacfConfigurationSdk> provideUacfConfigurationSdkProvider;
    private Provider<UacfConfigurationUtil> provideUacfConfigurationUtilProvider;
    private Provider<UacfEmailVerificationManager> provideUacfEmailVerificationManagerProvider;
    private Provider<UacfIdentitySdk> provideUacfIdentitySdkProvider;
    private Provider<UacfVariantSdk> provideUacfVariantSdkProvider;
    private Provider<UacfRolloutUtil> provideUacfVariantUtilProvider;
    private Provider<UserAgentProvider> provideUserAgentProvider;
    private ApplicationModule_ProvideUserGoalsPrefsFactory provideUserGoalsPrefsProvider;
    private ApplicationModule_ProvideUserImageServiceFactory provideUserImageServiceProvider;
    private Provider<UserImpl> provideUserImplProvider;
    private Provider<UserSummaryRepository> provideUserSummaryRepositoryProvider;
    private ApplicationModule_ProvideVideoAnalyticsHelperFactory provideVideoAnalyticsHelperProvider;
    private ApplicationModule_ProvideWeightValidatorFactory provideWeightValidatorProvider;
    private ApplicationModule_ProvideXPromoSettingsStoreFactory provideXPromoSettingsStoreProvider;
    private ApplicationModule_ProvidesActionApiFactory providesActionApiProvider;
    private Provider<ActionTrackingService> providesActionTrackingServiceProvider;
    private Provider<AdsAnalyticsHelper> providesAdsAnalyticHelperProvider;
    private ApplicationModule_ProvidesAdvancedDebuggingUtilFactory providesAdvancedDebuggingUtilProvider;
    private Provider<ExternalExerciseService> providesAggregateExternalExerciseServiceProvider;
    private Provider<ExternalNutritionService> providesAggregateExternalNutritionServiceProvider;
    private Provider<ExternalStepsService> providesAggregateExternalStepsServiceProvider;
    private Provider<ExternalUserService> providesAggregateExternalUserServiceProvider;
    private Provider<AmplitudeService> providesAmplitudeServiceProvider;
    private Provider<AnalyticsService> providesAnalyticsServiceProvider;
    private SyncModule_ProvidesAnalyticsSyncOpFactory providesAnalyticsSyncOpProvider;
    private Provider<UacfScheduler<AnalyticsSyncMode>> providesAnalyticsSyncSchedulerProvider;
    private Provider<UacfSchedulerEngine<AnalyticsSyncMode>> providesAnalyticsSyncServiceProvider;
    private Provider<MfpAnalyticsTaskQueue> providesAnalyticsTaskQueueProvider;
    private ApplicationModule_ProvidesAppGalleryServiceFactory providesAppGalleryServiceProvider;
    private Provider<AppIndexerBot> providesAppIndexerBotProvider;
    private SyncModule_ProvidesAuthTokenOpFactory providesAuthTokenOpProvider;
    private ApplicationModule_ProvidesBackgroundServiceHelperFactory providesBackgroundServiceHelperProvider;
    private ApplicationModule_ProvidesBarcodeServiceFactory providesBarcodeServiceProvider;
    private ApplicationModule_ProvidesBlogServiceFactory providesBlogServiceProvider;
    private ApplicationModule_ProvidesBusyManagerFactory providesBusyManagerProvider;
    private ApplicationModule_ProvidesChallengesAnalyticsHelperFactory providesChallengesAnalyticsHelperProvider;
    private ApplicationModule_ProvidesChallengesServiceFactory providesChallengesServiceProvider;
    private Provider<ChartRendererFactory> providesChartRendererFactoryProvider;
    private SyncModule_ProvidesConfigOpFactory providesConfigOpProvider;
    private Provider<ConfigService> providesConfigServiceProvider;
    private ApplicationModule_ProvidesConfigurationCacheFactory providesConfigurationCacheProvider;
    private SyncModule_ProvidesConfigurationOpFactory providesConfigurationOpProvider;
    private ApplicationModule_ProvidesConnectivityManagerFactory providesConnectivityManagerProvider;
    private Provider<ConsentsService> providesConsentServiceProvider;
    private Provider<ChartLegendFactory> providesCoreChartLegendFactoryProvider;
    private ApplicationModule_ProvidesCoreChartRendererBaseConstructorArgsFactory providesCoreChartRendererBaseConstructorArgsProvider;
    private Provider<CountryService> providesCountryServiceProvider;
    private ApplicationModule_ProvidesDebugSettingsServiceFactory providesDebugSettingsServiceProvider;
    private ApplicationModule_ProvidesDeepLinkManagerFactory providesDeepLinkManagerProvider;
    private ApplicationModule_ProvidesDeepLinkRouterFactory providesDeepLinkRouterProvider;
    private ApplicationModule_ProvidesDeviceActivationApiFactory providesDeviceActivationApiProvider;
    private ApplicationModule_ProvidesDeviceInfoFactory providesDeviceInfoProvider;
    private ApplicationModule_ProvidesDiaryAnalyticsHelperFactory providesDiaryAnalyticsHelperProvider;
    private Provider<DiaryDayCache> providesDiaryDayCacheProvider;
    private ApplicationModule_ProvidesDiaryNoteMapperFactory providesDiaryNoteMapperProvider;
    private Provider<DiaryService> providesDiaryServiceProvider;
    private ApplicationModule_ProvidesDispatcherFactory providesDispatcherProvider;
    private ApplicationModule_ProvidesExerciseEntryFromServerMapperFactory providesExerciseEntryFromServerMapperProvider;
    private ApplicationModule_ProvidesExerciseEntryMapperFactory providesExerciseEntryMapperProvider;
    private ApplicationModule_ProvidesExerciseFromServerMapperFactory providesExerciseFromServerMapperProvider;
    private ApplicationModule_ProvidesExerciseMapperFactory providesExerciseMapperProvider;
    private ApplicationModule_ProvidesExerciseSearchAnalyticsHelperFactory providesExerciseSearchAnalyticsHelperProvider;
    private ApplicationModule_ProvidesExploreServiceFactory providesExploreServiceProvider;
    private ExternalSyncModule_ProvidesExternalSyncOpFactory providesExternalSyncOpProvider;
    private ApplicationModule_ProvidesFacebookServiceFactory providesFacebookServiceProvider;
    private ApplicationModule_ProvidesFileExportAnalyticsHelperFactory providesFileExportAnalyticsHelperProvider;
    private ApplicationModule_ProvidesFileExportServiceFactory providesFileExportServiceProvider;
    private SyncModule_ProvidesFindAndCorrectFoodsWithMissingInfoOpFactory providesFindAndCorrectFoodsWithMissingInfoOpProvider;
    private ExternalSyncModule_ProvidesFitClientPreferencesFactory providesFitClientPreferencesProvider;
    private ApplicationModule_ProvidesFoodEditorAnalyticsFactory providesFoodEditorAnalyticsProvider;
    private ApplicationModule_ProvidesFoodEntryFromServerMapperFactory providesFoodEntryFromServerMapperProvider;
    private ApplicationModule_ProvidesFoodMapperFactory providesFoodMapperProvider;
    private ApplicationModule_ProvidesFoodMigrationAndCorrectionHelperFactory providesFoodMigrationAndCorrectionHelperProvider;
    private ApplicationModule_ProvidesFoodPermissionsServiceFactory providesFoodPermissionsServiceProvider;
    private ApplicationModule_ProvidesFoodPortionMapperFactory providesFoodPortionMapperProvider;
    private ApplicationModule_ProvidesFoodSearchAnalyticsHelperFactory providesFoodSearchAnalyticsHelperProvider;
    private ApplicationModule_ProvidesFriendCheckCacheFactory providesFriendCheckCacheProvider;
    private ApplicationModule_ProvidesFriendServiceFactory providesFriendServiceProvider;
    private ApplicationModule_ProvidesFriendsCacheFactory providesFriendsCacheProvider;
    private SyncModule_ProvidesGeoLocationOpFactory providesGeoLocationOpProvider;
    private Provider<GeoLocationService> providesGeoLocationServiceProvider;
    private Provider<Glide> providesGlideProvider;
    private Provider<GoogleAnalyticsService> providesGoogleAnalyticsServiceProvider;
    private Provider<GoogleFitExerciseService> providesGoogleFitActivityServiceProvider;
    private Provider<GoogleFitClient> providesGoogleFitClientProvider;
    private Provider<GoogleFitNutritionService> providesGoogleFitNutrientServiceProvider;
    private Provider<GoogleFitStepsService> providesGoogleFitStepsServiceProvider;
    private Provider<GoogleFitSubscriptionService> providesGoogleFitSubscriptionServiceProvider;
    private Provider<GoogleFitUserService> providesGoogleFitUserServiceProvider;
    private ApplicationModule_ProvidesIdServiceFactory providesIdServiceProvider;
    private ApplicationModule_ProvidesImageAssociationServiceFactory providesImageAssociationServiceProvider;
    private ApplicationModule_ProvidesImageReportingServiceFactory providesImageReportingServiceProvider;
    private ApplicationModule_ProvidesImageServiceFactory providesImageServiceProvider;
    private Provider<ImageSyncServiceDelegate> providesImageSyncServiceDelegateProvider;
    private Provider<UacfSchedulerEngine<ImageSyncMode>> providesImageSyncServiceProvider;
    private ApplicationModule_ProvidesImageUploadServiceFactory providesImageUploadServiceProvider;
    private Provider<InAppNotificationManager> providesInAppNotificationManagerProvider;
    private ApplicationModule_ProvidesInfoApiFactory providesInfoApiProvider;
    private ApplicationModule_ProvidesInstallManagerFactory providesInstallManagerProvider;
    private Provider<RequestInterceptor> providesInterceptorProvider;
    private Provider<LegacySyncManager> providesLegacySyncManagerProvider;
    private ServiceModule_ProvidesLnConfigFactory providesLnConfigProvider;
    private ApplicationModule_ProvidesLocalizedStringServiceFactory providesLocalizedStringServiceProvider;
    private ApplicationModule_ProvidesLocalizedStringsUtilFactory providesLocalizedStringsUtilProvider;
    private Provider<LoginModel> providesLoginModelProvider;
    private ApplicationModule_ProvidesMealAnalyticsHelperFactory providesMealAnalyticsHelperProvider;
    private ApplicationModule_ProvidesMealHelperUtilFactory providesMealHelperUtilProvider;
    private ApplicationModule_ProvidesMealIngedientMapperFactory providesMealIngedientMapperProvider;
    private ApplicationModule_ProvidesMealServiceFactory providesMealServiceProvider;
    private ApplicationModule_ProvidesMeasurementLineChartRendererFactory providesMeasurementLineChartRendererProvider;
    private Provider<MeasurementsService> providesMeasurementsServiceProvider;
    private ApplicationModule_ProvidesMenuServiceFactory providesMenuServiceProvider;
    private ApplicationModule_ProvidesMessageServiceFactory providesMessageServiceProvider;
    private Provider<MfpAnalyticsService> providesMfpAnalyticsServiceProvider;
    private ApplicationModule_ProvidesMfpConfigJsonApiFactory providesMfpConfigJsonApiProvider;
    private ApplicationModule_ProvidesMfpFoodMapperFactory providesMfpFoodMapperProvider;
    private ServiceModule_ProvidesMfpJsonV2ApiFactory providesMfpJsonV2ApiProvider;
    private ApplicationModule_ProvidesMfpPlatformAppDetailsCacheFactory providesMfpPlatformAppDetailsCacheProvider;
    private SyncModule_ProvidesMigrateTokenOpFactory providesMigrateTokenOpProvider;
    private ApplicationModule_ProvidesMiniUserInfoMapperFactory providesMiniUserInfoMapperProvider;
    private Provider<MultiAddFoodHelper> providesMultiAddFoodHelperProvider;
    private Provider<MultiAddMenuItemHelper> providesMultiAddMenuItemHelperProvider;
    private ApplicationModule_ProvidesNavigationHelperFactory providesNavigationHelperProvider;
    private ApplicationModule_ProvidesNewsFeedAnalyticsHelperFactory providesNewsFeedAnalyticsHelperProvider;
    private ApplicationModule_ProvidesNewsFeedCacheFactory providesNewsFeedCacheProvider;
    private ApplicationModule_ProvidesNewsFeedServiceFactory providesNewsFeedServiceProvider;
    private ApplicationModule_ProvidesNotificationInboxAnalyticsServiceFactory providesNotificationInboxAnalyticsServiceProvider;
    private ApplicationModule_ProvidesNutrientDashboardAnalyticsHelperFactory providesNutrientDashboardAnalyticsHelperProvider;
    private ApplicationModule_ProvidesNutrientDashboardRendererFactory providesNutrientDashboardRendererProvider;
    private Provider<NutrientGoalService> providesNutrientGoalServiceProvider;
    private Provider<NutritionGraphAnalyticsHelper> providesNutritionGraphAnalyticsHelperProvider;
    private ApplicationModule_ProvidesNutritionGraphPreferenceServiceFactory providesNutritionGraphPreferenceServiceProvider;
    private ApplicationModule_ProvidesNutritionGraphServiceFactory providesNutritionGraphServiceProvider;
    private Provider<NutrientGoalsUtil> providesNutritionalGoalsUtilServiceProvider;
    private ApplicationModule_ProvidesPacketFactoryFactory providesPacketFactoryProvider;
    private Provider<PaymentService> providesPaymentServiceProvider;
    private ApplicationModule_ProvidesPrefetchServiceFactory providesPrefetchServiceProvider;
    private ApplicationModule_ProvidesPremiumAnalyticsHelperFactory providesPremiumAnalyticsHelperProvider;
    private ApplicationModule_ProvidesPremiumApiErrorUtilFactory providesPremiumApiErrorUtilProvider;
    private Provider<PremiumFeatureOverrides> providesPremiumFeatureOverridesProvider;
    private Provider<PremiumService> providesPremiumServiceProvider;
    private ServiceModule_ProvidesPrinterFactory providesPrinterProvider;
    private Provider<PrivateFilePrinter> providesPrivateFilePrinterProvider;
    private ApplicationModule_ProvidesPrivateLogFileFactory providesPrivateLogFileProvider;
    private SyncModule_ProvidesProductServiceOpFactory providesProductServiceOpProvider;
    private Provider<ProductService> providesProductServiceProvider;
    private ApplicationModule_ProvidesProgressAnalyticsFactory providesProgressAnalyticsProvider;
    private ApplicationModule_ProvidesProgressServiceFactory providesProgressServiceProvider;
    private Provider<PushNotificationManager> providesPushNotificationManagerProvider;
    private ApplicationModule_ProvidesRadialGraphNutrientDashboardFactory providesRadialGraphNutrientDashboardProvider;
    private SyncModule_ProvidesReceiptsOpFactory providesReceiptsOpProvider;
    private ApplicationModule_ProvidesResourceUtilsFactory providesResourceUtilsProvider;
    private ApplicationModule_ProvidesRestaurantLoggingAnalyticsHelperFactory providesRestaurantLoggingAnalyticsHelperProvider;
    private ApplicationModule_ProvidesRestaurantLoggingSettingsServiceFactory providesRestaurantLoggingSettingsServiceProvider;
    private SyncModule_ProvidesRolloutsOpFactory providesRolloutsOpProvider;
    private Provider<SHealthConnection> providesSHealthConnectionProvider;
    private Provider<SHealthExerciseService> providesSHealthExerciseServiceProvider;
    private Provider<SHealthNutritionService> providesSHealthNutritionServiceProvider;
    private ExternalSyncModule_ProvidesSHealthPreferencesFactory providesSHealthPreferencesProvider;
    private Provider<SHealthStepsService> providesSHealthStepsServiceProvider;
    private Provider<SHealthUserService> providesSHealthUserServiceProvider;
    private ApplicationModule_ProvidesSearchApiFactory providesSearchApiProvider;
    private ApplicationModule_ProvidesSearchServiceFactory providesSearchServiceProvider;
    private Provider<Session> providesSessionProvider;
    private ApplicationModule_ProvidesSettingsAnalyticsHelperFactory providesSettingsAnalyticsHelperProvider;
    private ApplicationModule_ProvidesSignInServiceFactory providesSignInServiceProvider;
    private Provider<SignUpModel> providesSignUpModelProvider;
    private Provider<SignUpService> providesSignUpServiceProvider;
    private ApplicationModule_ProvidesStatusAnalyticsFactory providesStatusAnalyticsProvider;
    private ApplicationModule_ProvidesStepsBarChartRendererFactory providesStepsBarChartRendererProvider;
    private ServiceModule_ProvidesSubscriptionServiceDbAdapterFactory providesSubscriptionServiceDbAdapterProvider;
    private Provider<SubscriptionService> providesSubscriptionServiceProvider;
    private ApplicationModule_ProvidesSyncApiFactory providesSyncApiProvider;
    private Provider<SyncService> providesSyncEngineProvider;
    private Provider<UacfSchedulerDelegate<SyncType>> providesSyncSchedulerDelegateProvider;
    private Provider<UacfScheduler<SyncType>> providesSyncSchedulerProvider;
    private Provider<MfpSyncEngineDelegate> providesSyncServiceDelegateProvider;
    private Provider<SyncUtil> providesSyncUtilProvider;
    private SyncModule_ProvidesSyncV1OpFactory providesSyncV1OpProvider;
    private SyncModule_ProvidesSyncV2OpDelegateFactory providesSyncV2OpDelegateProvider;
    private SyncModule_ProvidesSyncV2OpFactory providesSyncV2OpProvider;
    private ApplicationModule_ProvidesTextNutrientDashboardFactory providesTextNutrientDashboardProvider;
    private Provider<TroubleshootingService> providesTroubleshootingServiceProvider;
    private SyncModule_ProvidesUacfUserOpFactory providesUacfUserOpProvider;
    private ApplicationModule_ProvidesUpdatedTermsAnalyticsHelperFactory providesUpdatedTermsAnalyticsHelperProvider;
    private Provider<UpsellService> providesUpsellServiceProvider;
    private Provider<UserApplicationSettingsService> providesUserApplicationSettingsServiceProvider;
    private ApplicationModule_ProvidesUserPropertiesServiceFactory providesUserPropertiesServiceProvider;
    private Provider<UserV2Service> providesUserServiceProvider;
    private ApplicationModule_ProvidesUserSummaryServiceFactory providesUserSummaryServiceProvider;
    private ApplicationModule_ProvidesUserV1GoalPreferencesFactory providesUserV1GoalPreferencesProvider;
    private SyncModule_ProvidesUserV2SyncOpFactory providesUserV2SyncOpProvider;
    private ApplicationModule_ProvidesVanillaServiceFactory providesVanillaServiceProvider;
    private ApplicationModule_ProvidesVenueServiceFactory providesVenueServiceProvider;
    private Provider<ViewModelCache> providesViewModelCacheProvider;
    private ApplicationModule_ProvidesWalkThroughUtilFactory providesWalkThroughUtilProvider;
    private ApplicationModule_ProvidesWaterEntryMapperFactory providesWaterEntryMapperProvider;
    private ApplicationModule_ProvidesWaterLoggingAnalyticsHelperFactory providesWaterLoggingAnalyticsHelperProvider;
    private RecipesTable_Factory recipesTableProvider;
    private RemindersTable_Factory remindersTableProvider;
    private SessionModule sessionModule;
    private SortOrderHelper_Factory sortOrderHelperProvider;
    private StepsTable_Factory stepsTableProvider;
    private SyncModule syncModule;
    private SyncPointersTable_Factory syncPointersTableProvider;
    private ThirdPartyService_Factory thirdPartyServiceProvider;
    private TimestampAnalyticsHelper_Factory timestampAnalyticsHelperProvider;
    private TroubleshootingViewModel_Factory troubleshootingViewModelProvider;
    private UserDistanceService_Factory userDistanceServiceProvider;
    private UserEnergyService_Factory userEnergyServiceProvider;
    private UserHeightService_Factory userHeightServiceProvider;
    private Provider<UserWeightService> userWeightServiceProvider;
    private Provider<VMFactory> vMFactoryProvider;
    private XPromoSettings_Factory xPromoSettingsProvider;

    public static final class Builder {
        /* access modifiers changed from: private */
        public ApiModule apiModule;
        /* access modifiers changed from: private */
        public ApplicationModule applicationModule;
        /* access modifiers changed from: private */
        public ExternalSyncModule externalSyncModule;
        /* access modifiers changed from: private */
        public ServiceModule serviceModule;
        /* access modifiers changed from: private */
        public SessionModule sessionModule;
        /* access modifiers changed from: private */
        public SyncModule syncModule;

        private Builder() {
        }

        public ApplicationComponent build() {
            if (this.applicationModule != null) {
                if (this.sessionModule == null) {
                    this.sessionModule = new SessionModule();
                }
                if (this.syncModule == null) {
                    this.syncModule = new SyncModule();
                }
                if (this.serviceModule == null) {
                    this.serviceModule = new ServiceModule();
                }
                if (this.externalSyncModule == null) {
                    this.externalSyncModule = new ExternalSyncModule();
                }
                if (this.apiModule == null) {
                    this.apiModule = new ApiModule();
                }
                return new DaggerApplicationComponent(this);
            }
            StringBuilder sb = new StringBuilder();
            sb.append(ApplicationModule.class.getCanonicalName());
            sb.append(" must be set");
            throw new IllegalStateException(sb.toString());
        }

        public Builder applicationModule(ApplicationModule applicationModule2) {
            this.applicationModule = (ApplicationModule) Preconditions.checkNotNull(applicationModule2);
            return this;
        }

        public Builder syncModule(SyncModule syncModule2) {
            this.syncModule = (SyncModule) Preconditions.checkNotNull(syncModule2);
            return this;
        }

        public Builder externalSyncModule(ExternalSyncModule externalSyncModule2) {
            this.externalSyncModule = (ExternalSyncModule) Preconditions.checkNotNull(externalSyncModule2);
            return this;
        }

        public Builder sessionModule(SessionModule sessionModule2) {
            this.sessionModule = (SessionModule) Preconditions.checkNotNull(sessionModule2);
            return this;
        }

        public Builder serviceModule(ServiceModule serviceModule2) {
            this.serviceModule = (ServiceModule) Preconditions.checkNotNull(serviceModule2);
            return this;
        }

        public Builder apiModule(ApiModule apiModule2) {
            this.apiModule = (ApiModule) Preconditions.checkNotNull(apiModule2);
            return this;
        }
    }

    public void inject(CustomLineChart customLineChart) {
    }

    public void inject(OnlineFoodSearchViewModel onlineFoodSearchViewModel) {
    }

    private DaggerApplicationComponent(Builder builder) {
        initialize(builder);
        initialize2(builder);
        initialize3(builder);
        initialize4(builder);
    }

    public static Builder builder() {
        return new Builder();
    }

    private FoodMapper getFoodMapper() {
        ApplicationModule applicationModule2 = this.applicationModule;
        return ApplicationModule_ProvidesFoodMapperFactory.proxyProvidesFoodMapper(applicationModule2, ApplicationModule_ProvidesFoodPortionMapperFactory.proxyProvidesFoodPortionMapper(applicationModule2));
    }

    private UserWeightService getUserWeightService() {
        UserWeightService userWeightService = new UserWeightService((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.providesMeasurementsServiceProvider), DoubleCheck.lazy(this.providesConfigServiceProvider), DoubleCheck.lazy(this.providesUserServiceProvider), ApplicationModule_ProvideWeightValidatorFactory.proxyProvideWeightValidator(this.applicationModule));
        return userWeightService;
    }

    private ExerciseStringService getExerciseStringService() {
        ExerciseStringService exerciseStringService = new ExerciseStringService((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.userDistanceServiceProvider), DoubleCheck.lazy(this.userWeightServiceProvider), DoubleCheck.lazy(this.providesExerciseMapperProvider), DoubleCheck.lazy(this.providesExerciseEntryMapperProvider));
        return exerciseStringService;
    }

    private DiarySharingSettingsManager getDiarySharingSettingsManager() {
        return new DiarySharingSettingsManager((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), (Bus) this.provideOttoBusProvider.get());
    }

    private long getNamedLong() {
        return ApplicationModule_ProvideAppVersionCodeFactory.proxyProvideAppVersionCode(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private String getNamedString() {
        return ApplicationModule_ProvideAppVersionStringFactory.proxyProvideAppVersionString(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private String getNamedString2() {
        return ApplicationModule_ProvideClientIdFactory.proxyProvideClientId(this.applicationModule, (AppIndexerBot) this.providesAppIndexerBotProvider.get());
    }

    private String getNamedString3() {
        return ApplicationModule_ProvideGuestAccessTokenFactory.proxyProvideGuestAccessToken(this.applicationModule, DoubleCheck.lazy(this.provideApiSettingsProvider), (AppIndexerBot) this.providesAppIndexerBotProvider.get());
    }

    private ApiUrlProvider getApiUrlProvider() {
        return ApplicationModule_ProvideApiUrlProviderFactory.proxyProvideApiUrlProvider(this.applicationModule, DoubleCheck.lazy(this.provideApiSettingsProvider), DoubleCheck.lazy(this.providesCountryServiceProvider), DoubleCheck.lazy(this.provideAuthTokenProvider), getNamedString2(), getNamedString3());
    }

    private KeyedSharedPreferences getNamedKeyedSharedPreferences() {
        return ApplicationModule_ProvideSettingsSharedPreferencesFactory.proxyProvideSettingsSharedPreferences(this.applicationModule, (Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider));
    }

    private LocalSettingsService getLocalSettingsService() {
        return ApplicationModule_ProvideSettingsServiceFactory.proxyProvideSettingsService(this.applicationModule, getNamedKeyedSharedPreferences(), DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider), DoubleCheck.lazy(this.providesCountryServiceProvider));
    }

    private SharedPreferences getNamedSharedPreferences() {
        return ApplicationModule_ProvideAppSettingsStoreFactory.proxyProvideAppSettingsStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private AppSettings getAppSettings() {
        return new AppSettings(getNamedSharedPreferences(), ApiJsonMapper_Factory.create());
    }

    private DebugSettingsService getDebugSettingsService() {
        return ApplicationModule_ProvidesDebugSettingsServiceFactory.proxyProvidesDebugSettingsService(this.applicationModule, DoubleCheck.lazy(this.provideDebugSharedPreferencesProvider));
    }

    private UserSummaryService getUserSummaryService() {
        return ApplicationModule_ProvidesUserSummaryServiceFactory.proxyProvidesUserSummaryService(this.applicationModule, this.providesInfoApiProvider, DoubleCheck.lazy(this.providesDebugSettingsServiceProvider));
    }

    private SharedPreferences getNamedSharedPreferences2() {
        return ApplicationModule_ProvideABTestSettingsStoreFactory.proxyProvideABTestSettingsStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private ABTestSettings getABTestSettings() {
        return new ABTestSettings((Context) this.provideAppContextProvider.get(), getNamedSharedPreferences2());
    }

    private AlexaInterstitialAnalyticsHelper getAlexaInterstitialAnalyticsHelper() {
        return ApplicationModule_ProvideAlexaInterstitialAnalyticsHelperFactory.proxyProvideAlexaInterstitialAnalyticsHelper(this.applicationModule, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
    }

    private SharedPreferences getNamedSharedPreferences3() {
        return ApplicationModule_ProvideAdsSettingsStoreFactory.proxyProvideAdsSettingsStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private String getNamedString4() {
        return ApplicationModule_GetFacebookAppIdFactory.proxyGetFacebookAppId(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private AdsSettings getAdsSettings() {
        return new AdsSettings(getNamedSharedPreferences3(), getNamedString4(), DoubleCheck.lazy(this.provideUacfConfigurationUtilProvider), (Session) this.providesSessionProvider.get());
    }

    private SharedPreferences getNamedSharedPreferences4() {
        return ApplicationModule_ProvideGlobalSettingsPreferenceFactory.proxyProvideGlobalSettingsPreference(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private GlobalSettingsService getGlobalSettingsService() {
        return ApplicationModule_ProvideGlobalSettingsServiceFactory.proxyProvideGlobalSettingsService(this.applicationModule, getNamedSharedPreferences4());
    }

    private SharedPreferences getNamedSharedPreferences5() {
        return ApplicationModule_ProvideAchievementsStoreSharedPreferencesFactory.proxyProvideAchievementsStoreSharedPreferences(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private StoredAchievementEvents getStoredAchievementEvents() {
        return ApplicationModule_ProvideStoredAchievementEventsFactory.proxyProvideStoredAchievementEvents(this.applicationModule, getNamedSharedPreferences5());
    }

    private CommunityService getCommunityService() {
        return ApplicationModule_ProvidesVanillaServiceFactory.proxyProvidesVanillaService(this.applicationModule, this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesConfigServiceProvider), DoubleCheck.lazy(this.providesCountryServiceProvider));
    }

    private File getNamedFile() {
        return ApplicationModule_ProvidesPrivateLogFileFactory.proxyProvidesPrivateLogFile(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private WalkthroughUtil getWalkthroughUtil() {
        return ApplicationModule_ProvidesWalkThroughUtilFactory.proxyProvidesWalkThroughUtil(this.applicationModule, DoubleCheck.lazy(this.provideOttoBusProvider), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider), DoubleCheck.lazy(this.userEnergyServiceProvider));
    }

    private LocalizedStringsUtil getLocalizedStringsUtil() {
        return ApplicationModule_ProvidesLocalizedStringsUtilFactory.proxyProvidesLocalizedStringsUtil(this.applicationModule, (Context) this.provideAppContextProvider.get(), ApplicationModule_ProvidesResourceUtilsFactory.proxyProvidesResourceUtils(this.applicationModule));
    }

    private UserHeightService getUserHeightService() {
        return new UserHeightService((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider));
    }

    private PackageManager getPackageManager() {
        return ApplicationModule_GetPackageManagerFactory.proxyGetPackageManager(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private UserEnergyService getUserEnergyService() {
        return new UserEnergyService((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider), DoubleCheck.lazy(this.providesMealHelperUtilProvider));
    }

    private SharedPreferences getNamedSharedPreferences6() {
        return ApplicationModule_ProvideSharedPreferences_NewsFeedCacheStoreFactory.proxyProvideSharedPreferences_NewsFeedCacheStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private Cache<MfpNewsFeedActivityEntryListContainer> getCacheOfMfpNewsFeedActivityEntryListContainer() {
        return ApplicationModule_ProvidesNewsFeedCacheFactory.proxyProvidesNewsFeedCache(this.applicationModule, getNamedSharedPreferences6());
    }

    private NewsFeedService getNewsFeedService() {
        return ApplicationModule_ProvidesNewsFeedServiceFactory.proxyProvidesNewsFeedService(this.applicationModule, this.providesInfoApiProvider, this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesSessionProvider), getCacheOfMfpNewsFeedActivityEntryListContainer());
    }

    private SQLiteDatabaseWrapper getSQLiteDatabaseWrapper() {
        return ApplicationModule_ProvideDatabaseFactory.proxyProvideDatabase(this.applicationModule, (Context) this.provideAppContextProvider.get(), (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
    }

    private DeletedMostUsedFoodsTable getDeletedMostUsedFoodsTable() {
        return new DeletedMostUsedFoodsTable(getSQLiteDatabaseWrapper());
    }

    private FoodsTable getFoodsTable() {
        return new FoodsTable(getSQLiteDatabaseWrapper());
    }

    private DeletedItemsTable getDeletedItemsTable() {
        return new DeletedItemsTable(getSQLiteDatabaseWrapper());
    }

    private FoodService getFoodService() {
        return ApplicationModule_ProvideFoodServiceFactory.proxyProvideFoodService(this.applicationModule, getDeletedMostUsedFoodsTable(), DoubleCheck.lazy(this.providesSessionProvider), getFoodsTable(), getDeletedItemsTable(), DoubleCheck.lazy(this.provideAuthTokenProvider), this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesActionTrackingServiceProvider), this.providesActionApiProvider, DoubleCheck.lazy(this.providesFoodMapperProvider), DoubleCheck.lazy(this.foodNotesTableProvider), DoubleCheck.lazy(this.deletedItemsDBAdapterProvider), DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
    }

    private SharedPreferences getNamedSharedPreferences7() {
        return ApplicationModule_ProvideExerciseSortingPrefsFactory.proxyProvideExerciseSortingPrefs(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private SharedPreferences getNamedSharedPreferences8() {
        return ApplicationModule_ProvideFoodSortingPrefsFactory.proxyProvideFoodSortingPrefs(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private SortOrderHelper getSortOrderHelper() {
        return new SortOrderHelper(getNamedSharedPreferences7(), getNamedSharedPreferences8(), DoubleCheck.lazy(this.provideSettingsServiceProvider));
    }

    private UserDistanceService getUserDistanceService() {
        return new UserDistanceService((Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider));
    }

    private SharedPreferences getNamedSharedPreferences9() {
        return ApplicationModule_ProvideXPromoSettingsStoreFactory.proxyProvideXPromoSettingsStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private XPromoSettings getXPromoSettings() {
        return new XPromoSettings(getNamedSharedPreferences9(), DoubleCheck.lazy(this.providesSessionProvider));
    }

    private ExerciseEntryMapper getExerciseEntryMapper() {
        ApplicationModule applicationModule2 = this.applicationModule;
        return ApplicationModule_ProvidesExerciseEntryMapperFactory.proxyProvidesExerciseEntryMapper(applicationModule2, ApplicationModule_ProvidesExerciseMapperFactory.proxyProvidesExerciseMapper(applicationModule2));
    }

    private ExploreService getExploreService() {
        return ApplicationModule_ProvidesExploreServiceFactory.proxyProvidesExploreService(this.applicationModule, this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesChallengesServiceProvider), DoubleCheck.lazy(this.providesMealServiceProvider), DoubleCheck.lazy(this.providesVenueServiceProvider));
    }

    private ApiDeviceTokenProvider getApiDeviceTokenProvider() {
        return new ApiDeviceTokenProvider(DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider), DoubleCheck.lazy(this.deviceUuidFactoryProvider));
    }

    private SharedPreferences getNamedSharedPreferences10() {
        return ApplicationModule_ProvideSyncSettingsStoreFactory.proxyProvideSyncSettingsStore(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private SyncSettings getSyncSettings() {
        return new SyncSettings(getNamedSharedPreferences10());
    }

    private DiaryService getDiaryService() {
        return ApplicationModule_ProvidesDiaryServiceFactory.proxyProvidesDiaryService(this.applicationModule, this.providesActionApiProvider, this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesDiaryDayCacheProvider), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.providesAggregateExternalExerciseServiceProvider), DoubleCheck.lazy(this.providesActionTrackingServiceProvider), DoubleCheck.lazy(this.providesAnalyticsServiceProvider), DoubleCheck.lazy(this.provideDatabaseProvider), DoubleCheck.lazy(this.providesExerciseEntryMapperProvider), DoubleCheck.lazy(this.provideExerciseServiceProvider), DoubleCheck.lazy(this.providesDiaryServiceProvider), DoubleCheck.lazy(this.userEnergyServiceProvider), DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
    }

    private ImageService getImageService() {
        return ApplicationModule_ProvidesImageServiceFactory.proxyProvidesImageService(this.applicationModule, (Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.provideApiUrlProvider), this.providesMfpJsonV2ApiProvider);
    }

    private ImageAssociationService getImageAssociationService() {
        return ApplicationModule_ProvidesImageAssociationServiceFactory.proxyProvidesImageAssociationService(this.applicationModule, (Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), DoubleCheck.lazy(this.providesImageServiceProvider), this.providesMfpJsonV2ApiProvider);
    }

    private Map<String, SyncItemHandler> getMapOfStringAndSyncItemHandler() {
        return SyncModule_ProvidesSyncItemConsumersFactory.proxyProvidesSyncItemConsumers(this.syncModule, (UserV2Service) this.providesUserServiceProvider.get(), (NutrientGoalService) this.providesNutrientGoalServiceProvider.get(), (SubscriptionService) this.providesSubscriptionServiceProvider.get(), exerciseService(), getDiaryService(), getImageService(), getImageAssociationService(), (UserApplicationSettingsService) this.providesUserApplicationSettingsServiceProvider.get());
    }

    private KeyedSharedPreferences getNamedKeyedSharedPreferences2() {
        return ApplicationModule_ProvideSyncV2SharedPreferencesFactory.proxyProvideSyncV2SharedPreferences(this.applicationModule, (Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesSessionProvider));
    }

    private LegacyAuthTokenStore getLegacyAuthTokenStore() {
        return SessionModule_ProvideOAuthTokenStoreFactory.proxyProvideOAuthTokenStore(this.sessionModule, getNamedSharedPreferences());
    }

    private JobServiceFactory getJobServiceFactory() {
        return ApplicationModule_ProvideJobServiceFactoryFactory.proxyProvideJobServiceFactory(this.applicationModule, (Context) this.provideAppContextProvider.get());
    }

    private void initialize(Builder builder) {
        this.provideAppContextProvider = DoubleCheck.provider(ApplicationModule_ProvideAppContextFactory.create(builder.applicationModule));
        this.provideAdsSettingsStoreProvider = ApplicationModule_ProvideAdsSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.getFacebookAppIdProvider = ApplicationModule_GetFacebookAppIdFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideUacfConfigurationSdkProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfConfigurationSdkFactory.create(builder.applicationModule));
        this.provideUacfConfigurationUtilProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfConfigurationUtilFactory.create(builder.applicationModule, this.provideUacfConfigurationSdkProvider));
        this.providesAppIndexerBotProvider = DoubleCheck.provider(ApplicationModule_ProvidesAppIndexerBotFactory.create(builder.applicationModule));
        this.provideUserImplProvider = new DelegateFactory();
        this.provideAppSettingsStoreProvider = ApplicationModule_ProvideAppSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.appSettingsProvider = AppSettings_Factory.create(this.provideAppSettingsStoreProvider, ApiJsonMapper_Factory.create());
        this.provideApiSettingsProvider = ApplicationModule_ProvideApiSettingsFactory.create(builder.applicationModule, this.provideAppSettingsStoreProvider);
        this.providesResourceUtilsProvider = ApplicationModule_ProvidesResourceUtilsFactory.create(builder.applicationModule);
        this.provideGlobalSettingsPreferenceProvider = ApplicationModule_ProvideGlobalSettingsPreferenceFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideGlobalSettingsServiceProvider = ApplicationModule_ProvideGlobalSettingsServiceFactory.create(builder.applicationModule, this.provideGlobalSettingsPreferenceProvider);
        this.providesCountryServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesCountryServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesResourceUtilsProvider, this.provideGlobalSettingsServiceProvider));
        this.provideAppSessionIdProvider = DoubleCheck.provider(ApplicationModule_ProvideAppSessionIdFactory.create(builder.applicationModule));
        this.provideCarrierNameProvider = DoubleCheck.provider(ApplicationModule_ProvideCarrierNameFactory.create(builder.applicationModule, this.provideAppContextProvider));
        this.provideMfpAnalyticsStoreProvider = ApplicationModule_ProvideMfpAnalyticsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesAnalyticsTaskQueueProvider = DoubleCheck.provider(ApplicationModule_ProvidesAnalyticsTaskQueueFactory.create(builder.applicationModule, this.provideMfpAnalyticsStoreProvider));
        this.provideDeviceUUIDProvider = DoubleCheck.provider(ApplicationModule_ProvideDeviceUUIDFactory.create(builder.applicationModule, this.provideAppContextProvider));
        this.provideClientIdProvider = ApplicationModule_ProvideClientIdFactory.create(builder.applicationModule, this.providesAppIndexerBotProvider);
        this.provideAuthTokenProvider = new DelegateFactory();
        this.providesSessionProvider = new DelegateFactory();
        this.provideOttoBusProvider = DoubleCheck.provider(ServiceModule_ProvideOttoBusFactory.create(builder.serviceModule));
        this.providesSubscriptionServiceDbAdapterProvider = ServiceModule_ProvidesSubscriptionServiceDbAdapterFactory.create(builder.serviceModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.provideApiUrlProvider = new DelegateFactory();
        this.provideApplicationProvider = DoubleCheck.provider(ApplicationModule_ProvideApplicationFactory.create(builder.applicationModule));
        this.provideTelephonyManagerProvider = ApplicationModule_ProvideTelephonyManagerFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideUserAgentProvider = DoubleCheck.provider(ApplicationModule_ProvideUserAgentFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideApplicationProvider, this.provideTelephonyManagerProvider, this.provideClientIdProvider));
        this.provideAppVersionCodeProvider = ApplicationModule_ProvideAppVersionCodeFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesInterceptorProvider = DoubleCheck.provider(ServiceModule_ProvidesInterceptorFactory.create(builder.serviceModule, this.provideApiSettingsProvider));
        this.providesDeviceInfoProvider = ApplicationModule_ProvidesDeviceInfoFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesMfpJsonV2ApiProvider = ServiceModule_ProvidesMfpJsonV2ApiFactory.create(builder.serviceModule, this.provideApiUrlProvider, this.provideUserAgentProvider, this.provideDeviceUUIDProvider, this.provideAppVersionCodeProvider, this.providesInterceptorProvider, ApiJsonMapper_Factory.create(), this.provideOttoBusProvider, this.provideAuthTokenProvider, this.providesCountryServiceProvider, this.providesDeviceInfoProvider);
        this.provideDbConnectionManagerProvider = new DelegateFactory();
        this.providesPacketFactoryProvider = ApplicationModule_ProvidesPacketFactoryFactory.create(builder.applicationModule, this.provideDbConnectionManagerProvider);
        this.apiBinaryMapperBaseProvider = ApiBinaryMapperBase_Factory.create(this.providesPacketFactoryProvider);
        this.provideBinaryCtorArgsProvider = ApplicationModule_ProvideBinaryCtorArgsFactory.create(builder.applicationModule, this.provideApiUrlProvider, this.provideUserAgentProvider, this.provideDeviceUUIDProvider, this.provideAppVersionCodeProvider, this.providesInterceptorProvider, this.provideOttoBusProvider, BinaryEncoder_Factory.create(), this.apiBinaryMapperBaseProvider, this.provideAuthTokenProvider, this.providesCountryServiceProvider, this.providesDeviceInfoProvider);
        this.providesActionApiProvider = ApplicationModule_ProvidesActionApiFactory.create(builder.applicationModule, this.provideBinaryCtorArgsProvider);
        this.providesBackgroundServiceHelperProvider = ApplicationModule_ProvidesBackgroundServiceHelperFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideSharedPreferencesCacheStoreProvider = ApplicationModule_ProvideSharedPreferencesCacheStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesFriendsCacheProvider = ApplicationModule_ProvidesFriendsCacheFactory.create(builder.applicationModule, this.provideSharedPreferencesCacheStoreProvider);
        this.provideSettingsSharedPreferencesProvider = ApplicationModule_ProvideSettingsSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.provideDatabaseProvider = ApplicationModule_ProvideDatabaseFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideDbConnectionManagerProvider);
        this.provideSettingsServiceProvider = new DelegateFactory();
        this.providesUserApplicationSettingsServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesUserApplicationSettingsServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.provideDatabaseProvider, this.provideSettingsServiceProvider, this.providesSessionProvider));
        DelegateFactory delegateFactory = (DelegateFactory) this.provideSettingsServiceProvider;
        this.provideSettingsServiceProvider = ApplicationModule_ProvideSettingsServiceFactory.create(builder.applicationModule, this.provideSettingsSharedPreferencesProvider, this.providesUserApplicationSettingsServiceProvider, this.providesCountryServiceProvider);
        delegateFactory.setDelegatedProvider(this.provideSettingsServiceProvider);
        this.providesFriendServiceProvider = ApplicationModule_ProvidesFriendServiceFactory.create(builder.applicationModule, this.providesActionApiProvider, this.providesBackgroundServiceHelperProvider, this.providesFriendsCacheProvider, this.provideSettingsServiceProvider, this.providesSessionProvider);
        this.providesMfpPlatformAppDetailsCacheProvider = ApplicationModule_ProvidesMfpPlatformAppDetailsCacheFactory.create(builder.applicationModule, this.provideSharedPreferencesCacheStoreProvider);
        this.providesConfigServiceProvider = new DelegateFactory();
        this.providesAppGalleryServiceProvider = ApplicationModule_ProvidesAppGalleryServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesMfpPlatformAppDetailsCacheProvider, this.providesDeviceInfoProvider, this.providesSessionProvider, this.providesConfigServiceProvider);
        this.providesSubscriptionServiceProvider = new DelegateFactory();
        this.provideInsightsSettingsStoreProvider = ApplicationModule_ProvideInsightsSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.insightSettingsProvider = InsightSettings_Factory.create(this.provideInsightsSettingsStoreProvider, this.providesSessionProvider);
        this.diarySharingSettingsManagerProvider = DiarySharingSettingsManager_Factory.create(this.provideAppContextProvider, this.providesSessionProvider, this.provideOttoBusProvider);
        this.provideLoginSharedPreferencesProvider = ApplicationModule_ProvideLoginSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesLoginModelProvider = DoubleCheck.provider(ServiceModule_ProvidesLoginModelFactory.create(builder.serviceModule, this.provideLoginSharedPreferencesProvider, this.providesSessionProvider, this.provideGlobalSettingsServiceProvider));
        this.providesPremiumServiceProvider = new DelegateFactory();
        this.provideGeoLocationSettingsStoreProvider = ApplicationModule_ProvideGeoLocationSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesGeoLocationServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesGeoLocationServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideGeoLocationSettingsStoreProvider));
        this.providesProductServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesProductServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesPremiumServiceProvider, this.providesGeoLocationServiceProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesConfigServiceProvider, this.provideApiSettingsProvider, this.provideSettingsServiceProvider, this.providesUserApplicationSettingsServiceProvider));
        this.providePremiumOverridesSharedPreferencesProvider = ApplicationModule_ProvidePremiumOverridesSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesPremiumFeatureOverridesProvider = DoubleCheck.provider(ApplicationModule_ProvidesPremiumFeatureOverridesFactory.create(builder.applicationModule, this.providePremiumOverridesSharedPreferencesProvider));
        DelegateFactory delegateFactory2 = (DelegateFactory) this.providesPremiumServiceProvider;
        this.providesPremiumServiceProvider = DoubleCheck.provider(ServiceModule_ProvidesPremiumServiceFactory.create(builder.serviceModule, this.providesConfigServiceProvider, this.providesSubscriptionServiceProvider, this.providesProductServiceProvider, this.providesPremiumFeatureOverridesProvider, this.provideGlobalSettingsServiceProvider, this.provideOttoBusProvider));
        delegateFactory2.setDelegatedProvider(this.providesPremiumServiceProvider);
        this.providesLocalizedStringsUtilProvider = ApplicationModule_ProvidesLocalizedStringsUtilFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesResourceUtilsProvider);
        this.providesMfpFoodMapperProvider = ApplicationModule_ProvidesMfpFoodMapperFactory.create(builder.applicationModule);
        this.providesFoodPortionMapperProvider = ApplicationModule_ProvidesFoodPortionMapperFactory.create(builder.applicationModule);
        this.providesFoodMapperProvider = ApplicationModule_ProvidesFoodMapperFactory.create(builder.applicationModule, this.providesFoodPortionMapperProvider);
        this.providesMealIngedientMapperProvider = ApplicationModule_ProvidesMealIngedientMapperFactory.create(builder.applicationModule);
        this.providesMealHelperUtilProvider = ApplicationModule_ProvidesMealHelperUtilFactory.create(builder.applicationModule, this.providesSessionProvider, this.providesMfpFoodMapperProvider, this.providesFoodMapperProvider, this.providesMealIngedientMapperProvider, this.provideDbConnectionManagerProvider);
        this.userEnergyServiceProvider = UserEnergyService_Factory.create(this.provideAppContextProvider, this.providesSessionProvider, this.providesLocalizedStringsUtilProvider, this.providesMealHelperUtilProvider);
        this.providesNutrientGoalServiceProvider = new DelegateFactory();
        this.providesNutritionalGoalsUtilServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesNutritionalGoalsUtilServiceFactory.create(builder.applicationModule, this.providesSessionProvider, this.userEnergyServiceProvider, this.providesNutrientGoalServiceProvider));
        DelegateFactory delegateFactory3 = (DelegateFactory) this.providesNutrientGoalServiceProvider;
        this.providesNutrientGoalServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesNutrientGoalServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesPremiumServiceProvider, this.providesNutritionalGoalsUtilServiceProvider));
        delegateFactory3.setDelegatedProvider(this.providesNutrientGoalServiceProvider);
        this.remindersTableProvider = RemindersTable_Factory.create(this.provideDatabaseProvider);
        this.provideRemindersServiceProvider = ApplicationModule_ProvideRemindersServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.remindersTableProvider, this.providesConfigServiceProvider, this.providesSessionProvider, this.providesLocalizedStringsUtilProvider, this.provideDbConnectionManagerProvider);
        this.providesAmplitudeServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesAmplitudeServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.appSettingsProvider, this.provideAppSessionIdProvider, this.provideCarrierNameProvider, this.provideDeviceUUIDProvider, this.providesSessionProvider, this.providesFriendServiceProvider, this.providesAppGalleryServiceProvider, this.providesConfigServiceProvider, this.providesSubscriptionServiceProvider, this.provideAppSettingsStoreProvider, this.insightSettingsProvider, this.provideSettingsServiceProvider, this.diarySharingSettingsManagerProvider, this.provideDbConnectionManagerProvider, this.providesLoginModelProvider, this.providesNutrientGoalServiceProvider, this.providesNutritionalGoalsUtilServiceProvider, this.provideRemindersServiceProvider, this.providesUserApplicationSettingsServiceProvider));
        this.providesMfpAnalyticsServiceProvider = new DelegateFactory();
        this.providesGoogleAnalyticsServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesGoogleAnalyticsServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesConfigServiceProvider));
        this.providesAnalyticsServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesAnalyticsServiceFactory.create(builder.applicationModule, this.providesAppIndexerBotProvider, this.providesAmplitudeServiceProvider, this.providesMfpAnalyticsServiceProvider, this.providesGoogleAnalyticsServiceProvider));
        DelegateFactory delegateFactory4 = (DelegateFactory) this.providesSubscriptionServiceProvider;
        this.providesSubscriptionServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesSubscriptionServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.provideOttoBusProvider, this.providesSubscriptionServiceDbAdapterProvider, this.providesMfpJsonV2ApiProvider, this.providesAnalyticsServiceProvider));
        delegateFactory4.setDelegatedProvider(this.providesSubscriptionServiceProvider);
        DelegateFactory delegateFactory5 = (DelegateFactory) this.providesMfpAnalyticsServiceProvider;
        this.providesMfpAnalyticsServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesMfpAnalyticsServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.appSettingsProvider, this.provideAppSessionIdProvider, this.provideCarrierNameProvider, this.providesAnalyticsTaskQueueProvider, this.provideDeviceUUIDProvider, this.provideClientIdProvider, this.provideAuthTokenProvider, this.providesSessionProvider, this.providesSubscriptionServiceProvider));
        delegateFactory5.setDelegatedProvider(this.providesMfpAnalyticsServiceProvider);
        this.provideOAuthTokenStoreProvider = SessionModule_ProvideOAuthTokenStoreFactory.create(builder.sessionModule, this.provideAppSettingsStoreProvider);
        DelegateFactory delegateFactory6 = (DelegateFactory) this.provideAuthTokenProvider;
        this.provideAuthTokenProvider = SessionModule_ProvideAuthTokenProviderFactory.create(builder.sessionModule, this.provideAppContextProvider, this.providesMfpAnalyticsServiceProvider, this.providesSessionProvider, this.providesAppIndexerBotProvider, this.providesMfpJsonV2ApiProvider, this.provideOAuthTokenStoreProvider, this.provideClientIdProvider, this.provideDeviceUUIDProvider);
        delegateFactory6.setDelegatedProvider(this.provideAuthTokenProvider);
        this.provideGuestAccessTokenProvider = ApplicationModule_ProvideGuestAccessTokenFactory.create(builder.applicationModule, this.provideApiSettingsProvider, this.providesAppIndexerBotProvider);
        DelegateFactory delegateFactory7 = (DelegateFactory) this.provideApiUrlProvider;
        this.provideApiUrlProvider = ApplicationModule_ProvideApiUrlProviderFactory.create(builder.applicationModule, this.provideApiSettingsProvider, this.providesCountryServiceProvider, this.provideAuthTokenProvider, this.provideClientIdProvider, this.provideGuestAccessTokenProvider);
        delegateFactory7.setDelegatedProvider(this.provideApiUrlProvider);
        this.providesMfpConfigJsonApiProvider = ApplicationModule_ProvidesMfpConfigJsonApiFactory.create(builder.applicationModule, this.provideApiUrlProvider, this.provideUserAgentProvider, this.provideDeviceUUIDProvider, this.provideAppVersionCodeProvider, this.providesInterceptorProvider, ApiJsonMapper_Factory.create(), this.provideOttoBusProvider, this.provideAuthTokenProvider, this.providesCountryServiceProvider, this.providesDeviceInfoProvider);
        this.providesConfigurationCacheProvider = ApplicationModule_ProvidesConfigurationCacheFactory.create(builder.applicationModule, this.provideSharedPreferencesCacheStoreProvider);
        this.provideABTestSettingsStoreProvider = ApplicationModule_ProvideABTestSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.aBTestSettingsProvider = ABTestSettings_Factory.create(this.provideAppContextProvider, this.provideABTestSettingsStoreProvider);
        this.provideAppVersionStringProvider = ApplicationModule_ProvideAppVersionStringFactory.create(builder.applicationModule, this.provideAppContextProvider);
        DelegateFactory delegateFactory8 = (DelegateFactory) this.providesConfigServiceProvider;
        this.providesConfigServiceProvider = DoubleCheck.provider(ServiceModule_ProvidesConfigServiceFactory.create(builder.serviceModule, this.providesMfpConfigJsonApiProvider, this.providesConfigurationCacheProvider, this.providesSessionProvider, this.aBTestSettingsProvider, this.provideDeviceUUIDProvider, this.provideAppVersionStringProvider, this.provideAppVersionCodeProvider, this.providesAnalyticsServiceProvider, this.providesCountryServiceProvider));
        delegateFactory8.setDelegatedProvider(this.providesConfigServiceProvider);
        this.provideSyncV2SharedPreferencesProvider = ApplicationModule_ProvideSyncV2SharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.provideStockDatabaseProvider = ApplicationModule_ProvideStockDatabaseFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideDbConnectionManagerProvider, this.appSettingsProvider);
        this.providesExerciseMapperProvider = ApplicationModule_ProvidesExerciseMapperFactory.create(builder.applicationModule);
        this.providesExerciseEntryMapperProvider = ApplicationModule_ProvidesExerciseEntryMapperFactory.create(builder.applicationModule, this.providesExerciseMapperProvider);
        this.providesSyncUtilProvider = DoubleCheck.provider(SyncModule_ProvidesSyncUtilFactory.create(builder.syncModule, this.provideAppContextProvider, this.providesConfigServiceProvider, this.provideSyncV2SharedPreferencesProvider, this.provideDatabaseProvider, this.provideStockDatabaseProvider, this.providesExerciseEntryMapperProvider, this.provideSettingsServiceProvider, this.providesSessionProvider));
        this.provideExerciseServiceProvider = ApplicationModule_ProvideExerciseServiceFactory.create(builder.applicationModule, this.providesSyncUtilProvider, this.providesSessionProvider, this.providesMfpJsonV2ApiProvider, this.providesExerciseMapperProvider, this.provideDatabaseProvider, this.provideStockDatabaseProvider);
        DelegateFactory delegateFactory9 = (DelegateFactory) this.provideDbConnectionManagerProvider;
        this.provideDbConnectionManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideDbConnectionManagerFactory.create(builder.applicationModule, this.provideAppContextProvider, this.appSettingsProvider, this.provideExerciseServiceProvider));
        delegateFactory9.setDelegatedProvider(this.provideDbConnectionManagerProvider);
        this.providesUserServiceProvider = DoubleCheck.provider(SessionModule_ProvidesUserServiceFactory.create(builder.sessionModule, this.provideAppContextProvider, this.provideUserImplProvider, this.provideDbConnectionManagerProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider));
        DelegateFactory delegateFactory10 = (DelegateFactory) this.provideUserImplProvider;
        this.provideUserImplProvider = DoubleCheck.provider(SessionModule_ProvideUserImplFactory.create(builder.sessionModule, this.providesAppIndexerBotProvider, this.providesUserServiceProvider, this.providesLoginModelProvider, this.providesPremiumServiceProvider, this.provideDbConnectionManagerProvider));
        delegateFactory10.setDelegatedProvider(this.provideUserImplProvider);
        this.providesInfoApiProvider = ApplicationModule_ProvidesInfoApiFactory.create(builder.applicationModule, this.provideBinaryCtorArgsProvider);
    }

    private void initialize2(Builder builder) {
        this.provideDebugSharedPreferencesProvider = ApplicationModule_ProvideDebugSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesDebugSettingsServiceProvider = ApplicationModule_ProvidesDebugSettingsServiceFactory.create(builder.applicationModule, this.provideDebugSharedPreferencesProvider);
        this.providesUserSummaryServiceProvider = ApplicationModule_ProvidesUserSummaryServiceFactory.create(builder.applicationModule, this.providesInfoApiProvider, this.providesDebugSettingsServiceProvider);
        this.providesDiaryDayCacheProvider = DoubleCheck.provider(ApplicationModule_ProvidesDiaryDayCacheFactory.create(builder.applicationModule));
        this.provideGoogleFitPreferencesProvider = ExternalSyncModule_ProvideGoogleFitPreferencesFactory.create(builder.externalSyncModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.providesFitClientPreferencesProvider = ExternalSyncModule_ProvidesFitClientPreferencesFactory.create(builder.externalSyncModule, this.provideAppContextProvider);
        this.providesGoogleFitSubscriptionServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitSubscriptionServiceFactory.create(builder.externalSyncModule));
        this.stepsTableProvider = StepsTable_Factory.create(this.provideDatabaseProvider);
        this.exerciseEntriesTableProvider = ExerciseEntriesTable_Factory.create(this.provideDatabaseProvider);
        this.provideStepsServiceProvider = DoubleCheck.provider(ApplicationModule_ProvideStepsServiceFactory.create(builder.applicationModule, this.stepsTableProvider, this.exerciseEntriesTableProvider, this.providesAnalyticsServiceProvider, this.providesAppGalleryServiceProvider, this.providesSessionProvider, this.provideDeviceUUIDProvider));
        this.providesGoogleFitClientProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitClientFactory.create(builder.externalSyncModule, this.providesSessionProvider, this.providesFitClientPreferencesProvider, this.provideGoogleFitPreferencesProvider, this.providesGoogleFitSubscriptionServiceProvider, this.provideStepsServiceProvider, this.provideOttoBusProvider));
        this.providesDiaryServiceProvider = new DelegateFactory();
        this.providesGoogleFitActivityServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitActivityServiceFactory.create(builder.externalSyncModule, this.provideGoogleFitPreferencesProvider, this.providesGoogleFitClientProvider, this.providesConfigServiceProvider, this.providesAnalyticsServiceProvider, this.providesDiaryServiceProvider, this.providesAppGalleryServiceProvider));
        this.providesSHealthPreferencesProvider = ExternalSyncModule_ProvidesSHealthPreferencesFactory.create(builder.externalSyncModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.providesSHealthConnectionProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesSHealthConnectionFactory.create(builder.externalSyncModule, this.providesSessionProvider, this.providesAnalyticsServiceProvider, this.providesSHealthPreferencesProvider, this.provideStepsServiceProvider, this.providesConfigServiceProvider, this.provideOttoBusProvider));
        this.userDistanceServiceProvider = UserDistanceService_Factory.create(this.provideAppContextProvider, this.providesSessionProvider);
        this.userWeightServiceProvider = new DelegateFactory();
        this.providesGoogleFitUserServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitUserServiceFactory.create(builder.externalSyncModule, this.provideAppContextProvider, this.providesFitClientPreferencesProvider, this.providesGoogleFitClientProvider, this.providesSessionProvider, this.providesConfigServiceProvider, this.userWeightServiceProvider, this.providesAppGalleryServiceProvider, this.providesAnalyticsServiceProvider, this.provideGoogleFitPreferencesProvider));
        this.providesMeasurementsServiceProvider = new DelegateFactory();
        this.providesSHealthUserServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesSHealthUserServiceFactory.create(builder.externalSyncModule, this.providesSHealthConnectionProvider, this.providesSessionProvider, this.providesSHealthPreferencesProvider, this.providesConfigServiceProvider, this.providesMeasurementsServiceProvider, this.providesAppGalleryServiceProvider));
        this.providesAggregateExternalUserServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesAggregateExternalUserServiceFactory.create(builder.externalSyncModule, this.providesGoogleFitUserServiceProvider, this.providesSHealthUserServiceProvider));
        this.providesImageServiceProvider = ApplicationModule_ProvidesImageServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.provideApiUrlProvider, this.providesMfpJsonV2ApiProvider);
        this.providesImageAssociationServiceProvider = ApplicationModule_ProvidesImageAssociationServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.providesImageServiceProvider, this.providesMfpJsonV2ApiProvider);
        this.measurementsTableProvider = MeasurementsTable_Factory.create(this.provideDatabaseProvider);
        this.measurementTypesTableProvider = MeasurementTypesTable_Factory.create(this.provideDatabaseProvider);
        this.deletedItemsTableProvider = DeletedItemsTable_Factory.create(this.provideDatabaseProvider);
        DelegateFactory delegateFactory = (DelegateFactory) this.providesMeasurementsServiceProvider;
        this.providesMeasurementsServiceProvider = ApplicationModule_ProvidesMeasurementsServiceFactory.create(builder.applicationModule, this.providesSessionProvider, this.providesAggregateExternalUserServiceProvider, this.providesImageAssociationServiceProvider, this.provideDatabaseProvider, this.measurementsTableProvider, this.measurementTypesTableProvider, this.deletedItemsTableProvider);
        delegateFactory.setDelegatedProvider(this.providesMeasurementsServiceProvider);
        this.provideWeightValidatorProvider = ApplicationModule_ProvideWeightValidatorFactory.create(builder.applicationModule);
        DelegateFactory delegateFactory2 = (DelegateFactory) this.userWeightServiceProvider;
        this.userWeightServiceProvider = UserWeightService_Factory.create(this.provideAppContextProvider, this.providesSessionProvider, this.providesMeasurementsServiceProvider, this.providesConfigServiceProvider, this.providesUserServiceProvider, this.provideWeightValidatorProvider);
        delegateFactory2.setDelegatedProvider(this.userWeightServiceProvider);
        this.exerciseStringServiceProvider = ExerciseStringService_Factory.create(this.provideAppContextProvider, this.userDistanceServiceProvider, this.userWeightServiceProvider, this.providesExerciseMapperProvider, this.providesExerciseEntryMapperProvider);
        this.providesSHealthExerciseServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesSHealthExerciseServiceFactory.create(builder.externalSyncModule, this.providesSHealthConnectionProvider, this.providesConfigServiceProvider, this.providesDiaryServiceProvider, this.providesAppGalleryServiceProvider, this.exerciseStringServiceProvider));
        this.providesAggregateExternalExerciseServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesAggregateExternalExerciseServiceFactory.create(builder.externalSyncModule, this.providesGoogleFitActivityServiceProvider, this.providesSHealthExerciseServiceProvider));
        this.providesActionTrackingServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesActionTrackingServiceFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        DelegateFactory delegateFactory3 = (DelegateFactory) this.providesDiaryServiceProvider;
        this.providesDiaryServiceProvider = ApplicationModule_ProvidesDiaryServiceFactory.create(builder.applicationModule, this.providesActionApiProvider, this.providesMfpJsonV2ApiProvider, this.providesDiaryDayCacheProvider, this.providesSessionProvider, this.providesAggregateExternalExerciseServiceProvider, this.providesActionTrackingServiceProvider, this.providesAnalyticsServiceProvider, this.provideDatabaseProvider, this.providesExerciseEntryMapperProvider, this.provideExerciseServiceProvider, this.providesDiaryServiceProvider, this.userEnergyServiceProvider, this.providesNutrientGoalServiceProvider);
        delegateFactory3.setDelegatedProvider(this.providesDiaryServiceProvider);
        this.mfpNotificationHandlerProvider = DoubleCheck.provider(MfpNotificationHandler_Factory.create(this.providesAnalyticsServiceProvider, this.providesBackgroundServiceHelperProvider, ApiJsonMapper_Factory.create(), this.provideAppContextProvider));
        this.providesNavigationHelperProvider = ApplicationModule_ProvidesNavigationHelperFactory.create(builder.applicationModule);
        this.passwordResetHelperProvider = PasswordResetHelper_Factory.create(this.provideAppContextProvider, this.providesNavigationHelperProvider);
        this.syncPointersTableProvider = SyncPointersTable_Factory.create(this.provideDatabaseProvider);
        this.provideSyncPointerServiceProvider = ApplicationModule_ProvideSyncPointerServiceFactory.create(builder.applicationModule, this.syncPointersTableProvider, this.providesSessionProvider, this.providesSyncUtilProvider);
        this.providesSyncApiProvider = ApplicationModule_ProvidesSyncApiFactory.create(builder.applicationModule, this.provideBinaryCtorArgsProvider);
        this.profileImagesTableProvider = ProfileImagesTable_Factory.create(this.provideDatabaseProvider);
        this.provideUserImageServiceProvider = ApplicationModule_ProvideUserImageServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.profileImagesTableProvider);
        this.provideSignUpSharedPreferencesProvider = ApplicationModule_ProvideSignUpSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesSignUpModelProvider = DoubleCheck.provider(ApplicationModule_ProvidesSignUpModelFactory.create(builder.applicationModule, this.provideSignUpSharedPreferencesProvider, this.providesCountryServiceProvider, this.providesSessionProvider));
        this.foodPermissionsTableProvider = FoodPermissionsTable_Factory.create(this.provideDatabaseProvider);
        this.providesFoodPermissionsServiceProvider = ApplicationModule_ProvidesFoodPermissionsServiceFactory.create(builder.applicationModule, this.providesSessionProvider, this.foodPermissionsTableProvider);
        this.providesLegacySyncManagerProvider = DoubleCheck.provider(SyncModule_ProvidesLegacySyncManagerFactory.create(builder.syncModule, this.provideAppContextProvider, this.provideApiUrlProvider, this.providesAnalyticsServiceProvider, this.passwordResetHelperProvider, this.provideSyncPointerServiceProvider, this.providesSyncApiProvider, this.providesSessionProvider, this.providesSyncUtilProvider, this.providesDiaryServiceProvider, this.provideRemindersServiceProvider, this.provideUserImageServiceProvider, this.provideExerciseServiceProvider, this.provideDatabaseProvider, this.exerciseStringServiceProvider, this.providesMeasurementsServiceProvider, this.providesExerciseMapperProvider, this.provideSettingsServiceProvider, this.providesLoginModelProvider, this.providesSignUpModelProvider, this.providesFoodPermissionsServiceProvider, this.provideDbConnectionManagerProvider));
        this.providesSyncV1OpProvider = SyncModule_ProvidesSyncV1OpFactory.create(builder.syncModule, this.providesSessionProvider, this.providesSyncUtilProvider, this.providesLegacySyncManagerProvider);
        this.providesSyncV2OpDelegateProvider = SyncModule_ProvidesSyncV2OpDelegateFactory.create(builder.syncModule);
        this.providesSyncV2OpProvider = SyncModule_ProvidesSyncV2OpFactory.create(builder.syncModule, this.providesSyncV2OpDelegateProvider);
        this.providesUserV2SyncOpProvider = SyncModule_ProvidesUserV2SyncOpFactory.create(builder.syncModule, this.providesUserServiceProvider, this.provideSyncV2SharedPreferencesProvider);
        this.providesAuthTokenOpProvider = SyncModule_ProvidesAuthTokenOpFactory.create(builder.syncModule, this.provideAuthTokenProvider, this.providesSignUpModelProvider, this.providesLoginModelProvider, this.providesSessionProvider);
        this.providesConfigOpProvider = SyncModule_ProvidesConfigOpFactory.create(builder.syncModule, this.providesConfigServiceProvider);
        this.providesConfigurationOpProvider = SyncModule_ProvidesConfigurationOpFactory.create(builder.syncModule);
        this.providesRolloutsOpProvider = SyncModule_ProvidesRolloutsOpFactory.create(builder.syncModule);
        this.provideUacfIdentitySdkProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfIdentitySdkFactory.create(builder.applicationModule));
        this.providesUacfUserOpProvider = SyncModule_ProvidesUacfUserOpFactory.create(builder.syncModule, this.provideUacfIdentitySdkProvider);
        this.providesGeoLocationOpProvider = SyncModule_ProvidesGeoLocationOpFactory.create(builder.syncModule, this.providesGeoLocationServiceProvider);
        this.providesReceiptsOpProvider = SyncModule_ProvidesReceiptsOpFactory.create(builder.syncModule, this.providesSubscriptionServiceProvider);
        this.providesSyncEngineProvider = new DelegateFactory();
        this.providesGoogleFitNutrientServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitNutrientServiceFactory.create(builder.externalSyncModule, this.provideAppContextProvider, this.providesGoogleFitClientProvider, this.providesSessionProvider, this.providesConfigServiceProvider, this.providesAnalyticsServiceProvider, this.providesSyncEngineProvider));
        this.providesSHealthNutritionServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesSHealthNutritionServiceFactory.create(builder.externalSyncModule, this.providesSHealthConnectionProvider, this.providesConfigServiceProvider, this.providesLocalizedStringsUtilProvider, this.userEnergyServiceProvider, this.providesAppGalleryServiceProvider, this.provideDbConnectionManagerProvider));
        this.providesAggregateExternalNutritionServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesAggregateExternalNutritionServiceFactory.create(builder.externalSyncModule, this.providesGoogleFitNutrientServiceProvider, this.providesSHealthNutritionServiceProvider));
        this.providesGoogleFitStepsServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesGoogleFitStepsServiceFactory.create(builder.externalSyncModule, this.providesFitClientPreferencesProvider, this.provideGoogleFitPreferencesProvider, this.providesSessionProvider, this.providesGoogleFitClientProvider, this.providesConfigServiceProvider, this.providesDiaryServiceProvider, this.provideStepsServiceProvider));
        this.providesSHealthStepsServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesSHealthStepsServiceFactory.create(builder.externalSyncModule, this.providesSHealthConnectionProvider, this.providesSessionProvider, this.providesSyncEngineProvider, this.providesDiaryServiceProvider, this.provideStepsServiceProvider, this.providesConfigServiceProvider, this.providesAppGalleryServiceProvider));
        this.providesAggregateExternalStepsServiceProvider = DoubleCheck.provider(ExternalSyncModule_ProvidesAggregateExternalStepsServiceFactory.create(builder.externalSyncModule, this.providesGoogleFitStepsServiceProvider, this.providesSHealthStepsServiceProvider));
        this.providesExternalSyncOpProvider = ExternalSyncModule_ProvidesExternalSyncOpFactory.create(builder.externalSyncModule, this.providesAggregateExternalExerciseServiceProvider, this.providesAggregateExternalNutritionServiceProvider, this.providesAggregateExternalStepsServiceProvider, this.providesAggregateExternalUserServiceProvider);
        this.providesMigrateTokenOpProvider = SyncModule_ProvidesMigrateTokenOpFactory.create(builder.syncModule, this.provideAuthTokenProvider);
        this.providesProductServiceOpProvider = SyncModule_ProvidesProductServiceOpFactory.create(builder.syncModule, this.providesProductServiceProvider);
        this.providesFoodMigrationAndCorrectionHelperProvider = ApplicationModule_ProvidesFoodMigrationAndCorrectionHelperFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.provideDbConnectionManagerProvider);
        this.providesFindAndCorrectFoodsWithMissingInfoOpProvider = SyncModule_ProvidesFindAndCorrectFoodsWithMissingInfoOpFactory.create(builder.syncModule, this.providesMfpJsonV2ApiProvider, this.providesFoodMapperProvider, this.providesSessionProvider, this.providesFoodMigrationAndCorrectionHelperProvider, this.providesAnalyticsServiceProvider, this.provideDbConnectionManagerProvider);
        this.providesImageUploadServiceProvider = ApplicationModule_ProvidesImageUploadServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.providesImageServiceProvider, this.providesAnalyticsServiceProvider);
        this.providesImageSyncServiceDelegateProvider = DoubleCheck.provider(SyncModule_ProvidesImageSyncServiceDelegateFactory.create(builder.syncModule, this.providesImageServiceProvider, this.providesImageAssociationServiceProvider, this.providesImageUploadServiceProvider, this.providesConfigServiceProvider));
        this.providesImageSyncServiceProvider = DoubleCheck.provider(SyncModule_ProvidesImageSyncServiceFactory.create(builder.syncModule, this.provideAppContextProvider, this.providesImageSyncServiceDelegateProvider));
        this.providesAnalyticsSyncOpProvider = SyncModule_ProvidesAnalyticsSyncOpFactory.create(builder.syncModule, this.providesAnalyticsTaskQueueProvider, this.providesMfpJsonV2ApiProvider, this.provideDeviceUUIDProvider, this.provideClientIdProvider, this.provideAuthTokenProvider);
        this.providesAnalyticsSyncServiceProvider = DoubleCheck.provider(SyncModule_ProvidesAnalyticsSyncServiceFactory.create(builder.syncModule, this.provideAppContextProvider, this.providesAnalyticsSyncOpProvider));
        this.providesAnalyticsSyncSchedulerProvider = DoubleCheck.provider(SyncModule_ProvidesAnalyticsSyncSchedulerFactory.create(builder.syncModule, this.providesAnalyticsSyncServiceProvider));
        this.provideUacfVariantSdkProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfVariantSdkFactory.create(builder.applicationModule));
        this.provideUacfVariantUtilProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfVariantUtilFactory.create(builder.applicationModule, this.provideUacfVariantSdkProvider));
        this.providesSyncServiceDelegateProvider = DoubleCheck.provider(SyncModule_ProvidesSyncServiceDelegateFactory.create(builder.syncModule, this.provideOttoBusProvider, this.providesSessionProvider, this.providesAppIndexerBotProvider, this.providesSyncV1OpProvider, this.providesSyncV2OpProvider, this.providesUserV2SyncOpProvider, this.providesAuthTokenOpProvider, this.providesConfigOpProvider, this.providesConfigurationOpProvider, this.providesRolloutsOpProvider, this.providesUacfUserOpProvider, this.providesGeoLocationOpProvider, this.providesReceiptsOpProvider, this.providesExternalSyncOpProvider, this.providesMigrateTokenOpProvider, this.providesProductServiceOpProvider, this.providesFindAndCorrectFoodsWithMissingInfoOpProvider, this.providesSyncEngineProvider, this.providesImageSyncServiceProvider, this.providesAnalyticsSyncSchedulerProvider, this.provideUacfConfigurationUtilProvider, this.provideUacfVariantUtilProvider));
        DelegateFactory delegateFactory4 = (DelegateFactory) this.providesSyncEngineProvider;
        this.providesSyncEngineProvider = DoubleCheck.provider(SyncModule_ProvidesSyncEngineFactory.create(builder.syncModule, this.provideAppContextProvider, this.providesSyncServiceDelegateProvider, this.provideOttoBusProvider));
        delegateFactory4.setDelegatedProvider(this.providesSyncEngineProvider);
        this.providesPushNotificationManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidesPushNotificationManagerFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideApiUrlProvider, this.mfpNotificationHandlerProvider, this.providesSyncEngineProvider, this.providesAnalyticsServiceProvider, this.provideGlobalSettingsServiceProvider, this.providesSessionProvider));
        this.providesInAppNotificationManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidesInAppNotificationManagerFactory.create(builder.applicationModule, this.appSettingsProvider));
        this.provideAchievementsStoreSharedPreferencesProvider = ApplicationModule_ProvideAchievementsStoreSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideStoredAchievementEventsProvider = ApplicationModule_ProvideStoredAchievementEventsFactory.create(builder.applicationModule, this.provideAchievementsStoreSharedPreferencesProvider);
        this.provideAchievementAdAnalyticsEventsProvider = DoubleCheck.provider(ApplicationModule_ProvideAchievementAdAnalyticsEventsFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideAchievementInterstitialAdProvider = DoubleCheck.provider(ApplicationModule_ProvideAchievementInterstitialAdFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideAchievementAdAnalyticsEventsProvider));
        DelegateFactory delegateFactory5 = (DelegateFactory) this.providesSessionProvider;
        this.providesSessionProvider = DoubleCheck.provider(SessionModule_ProvidesSessionFactory.create(builder.sessionModule, this.provideAppContextProvider, this.provideUserImplProvider, this.providesLoginModelProvider, this.provideAuthTokenProvider, this.providesAnalyticsServiceProvider, this.providesGeoLocationServiceProvider, this.providesUserSummaryServiceProvider, this.providesDiaryServiceProvider, this.provideSettingsServiceProvider, this.providesPushNotificationManagerProvider, this.mfpNotificationHandlerProvider, this.providesInAppNotificationManagerProvider, this.providesUserServiceProvider, this.provideUacfConfigurationSdkProvider, this.providesNavigationHelperProvider, this.provideStoredAchievementEventsProvider, this.provideAchievementInterstitialAdProvider));
        delegateFactory5.setDelegatedProvider(this.providesSessionProvider);
        this.adsSettingsProvider = AdsSettings_Factory.create(this.provideAdsSettingsStoreProvider, this.getFacebookAppIdProvider, this.provideUacfConfigurationUtilProvider, this.providesSessionProvider);
        this.provideInputMethodManagerProvider = ApplicationModule_ProvideInputMethodManagerFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesInstallManagerProvider = ApplicationModule_ProvidesInstallManagerFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesAnalyticsServiceProvider, this.appSettingsProvider);
        this.providesSyncSchedulerDelegateProvider = DoubleCheck.provider(SyncModule_ProvidesSyncSchedulerDelegateFactory.create(builder.syncModule, this.providesSessionProvider, this.providesSyncEngineProvider));
        this.providesSyncSchedulerProvider = DoubleCheck.provider(SyncModule_ProvidesSyncSchedulerFactory.create(builder.syncModule, this.providesSyncSchedulerDelegateProvider));
        this.provideLocationServiceProvider = DoubleCheck.provider(ApplicationModule_ProvideLocationServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideSettingsServiceProvider));
        this.provideGlobalAppPreferenceMigrationUtilProvider = ApplicationModule_ProvideGlobalAppPreferenceMigrationUtilFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideSettingsServiceProvider, this.provideGlobalSettingsServiceProvider, this.providesSessionProvider);
        this.appRatingServiceProvider = AppRatingService_Factory.create(this.provideAppContextProvider, this.providesSessionProvider, this.provideSettingsServiceProvider, this.provideGlobalSettingsServiceProvider);
        this.providesConsentServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesConsentServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesCountryServiceProvider, this.providesSessionProvider, this.provideSettingsServiceProvider, this.providesPremiumServiceProvider, this.providesConfigServiceProvider));
        this.provideClientEmailVerificationStatusProvider = SyncModule_ProvideClientEmailVerificationStatusFactory.create(builder.syncModule, this.providesSessionProvider, this.providesLegacySyncManagerProvider);
        this.provideUacfEmailVerificationManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideUacfEmailVerificationManagerFactory.create(builder.applicationModule, this.providesSessionProvider, this.provideUacfIdentitySdkProvider, this.provideUacfVariantUtilProvider, this.provideUacfConfigurationUtilProvider, this.provideAppSettingsStoreProvider, this.provideClientEmailVerificationStatusProvider, this.providesCountryServiceProvider, this.providesNavigationHelperProvider));
        this.provideStartupManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideStartupManagerFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesConfigServiceProvider, this.providesAnalyticsServiceProvider, this.providesMfpAnalyticsServiceProvider, this.providesInstallManagerProvider, this.providesSessionProvider, this.provideSettingsServiceProvider, this.providesSyncUtilProvider, this.providesSyncSchedulerProvider, this.provideStepsServiceProvider, this.provideLocationServiceProvider, this.providesPushNotificationManagerProvider, this.provideGlobalAppPreferenceMigrationUtilProvider, this.appSettingsProvider, this.appRatingServiceProvider, this.provideDbConnectionManagerProvider, this.providesCountryServiceProvider, this.providesConsentServiceProvider, this.provideUacfEmailVerificationManagerProvider));
    }

    private void initialize3(Builder builder) {
        this.providesIdServiceProvider = ApplicationModule_ProvidesIdServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider);
        this.provideRecipeCacheStoreSharedPreferencesProvider = ApplicationModule_ProvideRecipeCacheStoreSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideRecipeCacheProvider = DoubleCheck.provider(ApplicationModule_ProvideRecipeCacheFactory.create(builder.applicationModule, this.provideRecipeCacheStoreSharedPreferencesProvider));
        this.recipesTableProvider = RecipesTable_Factory.create(this.provideDatabaseProvider);
        this.provideRecipeServiceProvider = ApplicationModule_ProvideRecipeServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesIdServiceProvider, this.provideDbConnectionManagerProvider, this.providesCountryServiceProvider, this.provideRecipeCacheProvider, this.recipesTableProvider, this.providesSyncEngineProvider, this.providesSessionProvider);
        this.providesAdsAnalyticHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidesAdsAnalyticHelperFactory.create(builder.applicationModule, this.providesMfpAnalyticsServiceProvider, this.providesConfigServiceProvider));
        this.providesDeepLinkManagerProvider = ApplicationModule_ProvidesDeepLinkManagerFactory.create(builder.applicationModule, this.provideAppContextProvider, this.appSettingsProvider, this.providesNavigationHelperProvider);
        this.provideAdUnitServiceProvider = ApplicationModule_ProvideAdUnitServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.adsSettingsProvider, this.provideUacfConfigurationUtilProvider);
        this.providesGlideProvider = DoubleCheck.provider(ApplicationModule_ProvidesGlideFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideApiUrlProvider));
        this.provideRecipesAnalyticsHelperProvider = ApplicationModule_ProvideRecipesAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesAdvancedDebuggingUtilProvider = ApplicationModule_ProvidesAdvancedDebuggingUtilFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesNavigationHelperProvider);
        this.providePermissionAnalyticsHelperProvider = ApplicationModule_ProvidePermissionAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.applicationModule = builder.applicationModule;
        this.provideXPromoSettingsStoreProvider = ApplicationModule_ProvideXPromoSettingsStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.xPromoSettingsProvider = XPromoSettings_Factory.create(this.provideXPromoSettingsStoreProvider, this.providesSessionProvider);
        this.deletedMostUsedFoodsTableProvider = DeletedMostUsedFoodsTable_Factory.create(this.provideDatabaseProvider);
        this.foodsTableProvider = FoodsTable_Factory.create(this.provideDatabaseProvider);
        this.foodNotesTableProvider = FoodNotesTable_Factory.create(this.provideDatabaseProvider);
        this.deletedItemsDBAdapterProvider = DeletedItemsDBAdapter_Factory.create(this.provideAppContextProvider);
        this.provideFoodServiceProvider = ApplicationModule_ProvideFoodServiceFactory.create(builder.applicationModule, this.deletedMostUsedFoodsTableProvider, this.providesSessionProvider, this.foodsTableProvider, this.deletedItemsTableProvider, this.provideAuthTokenProvider, this.providesMfpJsonV2ApiProvider, this.providesActionTrackingServiceProvider, this.providesActionApiProvider, this.providesFoodMapperProvider, this.foodNotesTableProvider, this.deletedItemsDBAdapterProvider, this.provideDbConnectionManagerProvider);
        this.providesMultiAddFoodHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidesMultiAddFoodHelperFactory.create(builder.applicationModule, this.provideSettingsServiceProvider));
        this.providesSearchApiProvider = ApplicationModule_ProvidesSearchApiFactory.create(builder.applicationModule, this.provideBinaryCtorArgsProvider);
        this.provideExerciseSortingPrefsProvider = ApplicationModule_ProvideExerciseSortingPrefsFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideFoodSortingPrefsProvider = ApplicationModule_ProvideFoodSortingPrefsFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.sortOrderHelperProvider = SortOrderHelper_Factory.create(this.provideExerciseSortingPrefsProvider, this.provideFoodSortingPrefsProvider, this.provideSettingsServiceProvider);
        this.providesSearchServiceProvider = ApplicationModule_ProvidesSearchServiceFactory.create(builder.applicationModule, this.providesSearchApiProvider, this.providesMfpJsonV2ApiProvider, this.providesActionTrackingServiceProvider, this.sortOrderHelperProvider, this.providesMealHelperUtilProvider, this.providesSessionProvider, this.provideSettingsServiceProvider, this.providesCountryServiceProvider, this.provideDbConnectionManagerProvider);
        this.provideFoodFoodbackAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideFoodFoodbackAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideFriendInviteStoreProvider = ApplicationModule_ProvideFriendInviteStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.provideMainHandlerProvider = ApplicationModule_ProvideMainHandlerFactory.create(builder.applicationModule);
        this.providesFriendCheckCacheProvider = ApplicationModule_ProvidesFriendCheckCacheFactory.create(builder.applicationModule, this.provideSharedPreferencesCacheStoreProvider);
        this.friendOnMfpConstructorArgsProvider = FriendOnMfpConstructorArgs_Factory.create(this.provideAppContextProvider, this.provideFriendInviteStoreProvider, this.providesFriendServiceProvider, this.provideMainHandlerProvider, this.providesNavigationHelperProvider, this.providesInfoApiProvider, this.providesFriendCheckCacheProvider);
        this.contactsOnMfpServiceProvider = ContactsOnMfpService_Factory.create(this.friendOnMfpConstructorArgsProvider);
        this.thirdPartyServiceProvider = ThirdPartyService_Factory.create(this.providesInfoApiProvider);
        this.providesFacebookServiceProvider = ApplicationModule_ProvidesFacebookServiceFactory.create(builder.applicationModule, this.thirdPartyServiceProvider, this.providesLoginModelProvider, this.providesSessionProvider);
        this.facebookFriendOnMfpConstructorArgsProvider = FacebookFriendOnMfpConstructorArgs_Factory.create(this.provideAppContextProvider, this.provideFriendInviteStoreProvider, this.providesFriendServiceProvider, this.provideMainHandlerProvider, this.providesNavigationHelperProvider, this.providesFacebookServiceProvider, this.providesInfoApiProvider, this.providesFriendCheckCacheProvider);
        this.facebookFriendOnMfpServiceProvider = FacebookFriendOnMfpService_Factory.create(this.facebookFriendOnMfpConstructorArgsProvider);
        this.inputMethodManagerHelperProvider = InputMethodManagerHelper_Factory.create(this.provideAppContextProvider);
        this.providesFoodSearchAnalyticsHelperProvider = ApplicationModule_ProvidesFoodSearchAnalyticsHelperFactory.create(builder.applicationModule, this.providesActionTrackingServiceProvider, this.providesAnalyticsServiceProvider, this.providesMultiAddFoodHelperProvider, this.providesCountryServiceProvider, this.providesDiaryServiceProvider);
        this.userHeightServiceProvider = UserHeightService_Factory.create(this.provideAppContextProvider, this.providesSessionProvider);
        this.provideProgressCongratsSharedPreferencesProvider = ApplicationModule_ProvideProgressCongratsSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.provideProgressCongratsServiceProvider = ApplicationModule_ProvideProgressCongratsServiceFactory.create(builder.applicationModule, this.userWeightServiceProvider, this.userHeightServiceProvider, this.provideProgressCongratsSharedPreferencesProvider);
        this.providesProgressAnalyticsProvider = ApplicationModule_ProvidesProgressAnalyticsFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesBarcodeServiceProvider = ApplicationModule_ProvidesBarcodeServiceFactory.create(builder.applicationModule, this.providesInfoApiProvider);
        this.providesChallengesAnalyticsHelperProvider = ApplicationModule_ProvidesChallengesAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesChallengesServiceProvider = ApplicationModule_ProvidesChallengesServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesCountryServiceProvider);
        this.provideSharedPreferences_NewsFeedCacheStoreProvider = ApplicationModule_ProvideSharedPreferences_NewsFeedCacheStoreFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesNewsFeedCacheProvider = ApplicationModule_ProvidesNewsFeedCacheFactory.create(builder.applicationModule, this.provideSharedPreferences_NewsFeedCacheStoreProvider);
        this.providesNewsFeedServiceProvider = ApplicationModule_ProvidesNewsFeedServiceFactory.create(builder.applicationModule, this.providesInfoApiProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesNewsFeedCacheProvider);
        this.providesNewsFeedAnalyticsHelperProvider = ApplicationModule_ProvidesNewsFeedAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider, this.providesConfigServiceProvider, this.providesUserApplicationSettingsServiceProvider);
        this.providesMessageServiceProvider = ApplicationModule_ProvidesMessageServiceFactory.create(builder.applicationModule, this.providesActionApiProvider, this.providesBackgroundServiceHelperProvider);
        this.provideConsentsAnalyticsHelperProvider = ApplicationModule_ProvideConsentsAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.consentsViewModelProvider = ConsentsViewModel_Factory.create(this.provideApplicationProvider, this.providesSessionProvider, this.providesConsentServiceProvider, this.providesCountryServiceProvider, this.provideConsentsAnalyticsHelperProvider);
        this.providesFoodEditorAnalyticsProvider = ApplicationModule_ProvidesFoodEditorAnalyticsFactory.create(builder.applicationModule, this.providesDiaryServiceProvider, this.providesAnalyticsServiceProvider, this.providesActionTrackingServiceProvider, this.providesCountryServiceProvider);
        this.foodSearchViewModelProvider = FoodSearchViewModel_Factory.create(this.provideApplicationProvider, this.providesCountryServiceProvider, this.providesMultiAddFoodHelperProvider, this.providesLocalizedStringsUtilProvider, this.userEnergyServiceProvider, this.providesDiaryServiceProvider, this.providesSessionProvider, this.providesMealIngedientMapperProvider, this.providesPremiumServiceProvider, this.provideSettingsServiceProvider, this.provideRecipeServiceProvider, this.provideDbConnectionManagerProvider, this.providesSyncSchedulerProvider, this.providesFoodSearchAnalyticsHelperProvider, this.provideRecipesAnalyticsHelperProvider, this.providesFoodEditorAnalyticsProvider, this.providesActionTrackingServiceProvider, this.providesConfigServiceProvider);
        this.provideLocalFoodSearchRepositoryProvider = DoubleCheck.provider(ApplicationModule_ProvideLocalFoodSearchRepositoryFactory.create(builder.applicationModule, this.provideDbConnectionManagerProvider, this.provideSettingsServiceProvider, this.providesCountryServiceProvider, this.providesSessionProvider, this.providesMealHelperUtilProvider));
        this.localFoodSearchViewModelProvider = LocalFoodSearchViewModel_Factory.create(this.provideApplicationProvider, this.provideLocalFoodSearchRepositoryProvider, this.sortOrderHelperProvider, this.providesMultiAddFoodHelperProvider, this.providesFoodSearchAnalyticsHelperProvider, this.userEnergyServiceProvider, this.provideSettingsServiceProvider);
        this.provideOnlineFoodSearchRepositoryProvider = DoubleCheck.provider(ApplicationModule_ProvideOnlineFoodSearchRepositoryFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSearchServiceProvider));
        this.onlineFoodSearchViewModelProvider = OnlineFoodSearchViewModel_Factory.create(this.provideApplicationProvider, this.providesCountryServiceProvider, this.provideOnlineFoodSearchRepositoryProvider, this.providesActionTrackingServiceProvider, this.providesConfigServiceProvider, this.providesAnalyticsServiceProvider, this.providesPremiumServiceProvider, this.providesFoodSearchAnalyticsHelperProvider);
        this.provideFoodFeedbackRepositoryProvider = DoubleCheck.provider(ApplicationModule_ProvideFoodFeedbackRepositoryFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.provideDbConnectionManagerProvider, this.appSettingsProvider));
        this.foodFeedbackViewModelProvider = FoodFeedbackViewModel_Factory.create(this.provideFoodFeedbackRepositoryProvider);
        this.changePasswordViewModelProvider = ChangePasswordViewModel_Factory.create(this.providesCountryServiceProvider, this.providesInfoApiProvider, this.provideAuthTokenProvider, this.providesSessionProvider, this.provideSettingsServiceProvider);
        this.provideGsonProvider = DoubleCheck.provider(ApplicationModule_ProvideGsonFactory.create(builder.applicationModule));
        this.provideOkHttpClientProvider = SingleCheck.provider(ApplicationModule_ProvideOkHttpClientFactory.create(builder.applicationModule));
        this.provideRetrofitInterfaceProvider = SingleCheck.provider(ApplicationModule_ProvideRetrofitInterfaceFactory.create(builder.applicationModule, this.provideGsonProvider, this.provideOkHttpClientProvider));
        this.provideTroubleshootingApiProvider = SingleCheck.provider(ApplicationModule_ProvideTroubleshootingApiFactory.create(builder.applicationModule, this.provideRetrofitInterfaceProvider));
        this.provideTroubleshootingRepositoryProvider = ApplicationModule_ProvideTroubleshootingRepositoryFactory.create(builder.applicationModule, this.provideTroubleshootingApiProvider);
        this.providesConnectivityManagerProvider = ApplicationModule_ProvidesConnectivityManagerFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesTroubleshootingServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesTroubleshootingServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesConnectivityManagerProvider));
        this.troubleshootingViewModelProvider = TroubleshootingViewModel_Factory.create(this.provideApplicationProvider, this.provideTroubleshootingRepositoryProvider, this.providesTroubleshootingServiceProvider);
        this.provideAdConsentsAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideAdConsentsAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.adConsentsViewModelProvider = AdConsentsViewModel_Factory.create(this.provideApplicationProvider, this.providesConsentServiceProvider, this.provideSettingsServiceProvider, this.provideAdConsentsAnalyticsHelperProvider);
        this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.builder(8).put(ConsentsViewModel.class, this.consentsViewModelProvider).put(FoodSearchViewModel.class, this.foodSearchViewModelProvider).put(LocalFoodSearchViewModel.class, this.localFoodSearchViewModelProvider).put(OnlineFoodSearchViewModel.class, this.onlineFoodSearchViewModelProvider).put(FoodFeedbackViewModel.class, this.foodFeedbackViewModelProvider).put(ChangePasswordViewModel.class, this.changePasswordViewModelProvider).put(TroubleshootingViewModel.class, this.troubleshootingViewModelProvider).put(AdConsentsViewModel.class, this.adConsentsViewModelProvider).build();
        this.vMFactoryProvider = DoubleCheck.provider(VMFactory_Factory.create(this.mapOfClassOfAndProviderOfViewModelProvider));
        this.providesSignUpServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesSignUpServiceFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.providesMeasurementsServiceProvider, this.providesAnalyticsServiceProvider, this.provideAuthTokenProvider, this.thirdPartyServiceProvider, this.providesSyncEngineProvider, this.providesInfoApiProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesPushNotificationManagerProvider, this.provideDbConnectionManagerProvider));
        this.provideDeleteAccountAnalyticsHelperProvider = ApplicationModule_ProvideDeleteAccountAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideGDPRHelpAnalyticsHelperProvider = ApplicationModule_ProvideGDPRHelpAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesUpdatedTermsAnalyticsHelperProvider = ApplicationModule_ProvidesUpdatedTermsAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideJobServiceFactoryProvider = ApplicationModule_ProvideJobServiceFactoryFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesSignInServiceProvider = ApplicationModule_ProvidesSignInServiceFactory.create(builder.applicationModule, this.providesSessionProvider, this.providesLoginModelProvider, this.providesSyncEngineProvider, this.provideApiSettingsProvider, this.provideSettingsServiceProvider, this.providesAnalyticsServiceProvider, this.provideAuthTokenProvider, this.thirdPartyServiceProvider, this.providesPushNotificationManagerProvider, this.provideDbConnectionManagerProvider, this.provideJobServiceFactoryProvider);
        this.provideDeleteAccountServiceProvider = ApplicationModule_ProvideDeleteAccountServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider);
        this.providesDispatcherProvider = ApplicationModule_ProvidesDispatcherFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesDeepLinkRouterProvider = ApplicationModule_ProvidesDeepLinkRouterFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesDispatcherProvider, this.providesDeepLinkManagerProvider, this.providesNavigationHelperProvider, this.appSettingsProvider, this.providesSessionProvider, this.providesAnalyticsServiceProvider);
        this.foodSearchActivityFactoryProvider = FoodSearchActivityFactory_Factory.create(this.providesConfigServiceProvider);
        this.providesUserPropertiesServiceProvider = ApplicationModule_ProvidesUserPropertiesServiceFactory.create(builder.applicationModule, this.providesInfoApiProvider, this.providesMfpJsonV2ApiProvider);
        this.providesWaterLoggingAnalyticsHelperProvider = ApplicationModule_ProvidesWaterLoggingAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider, this.providesConfigServiceProvider);
        this.providesPremiumApiErrorUtilProvider = ApplicationModule_ProvidesPremiumApiErrorUtilFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideOttoBusProvider);
        this.providesExerciseSearchAnalyticsHelperProvider = ApplicationModule_ProvidesExerciseSearchAnalyticsHelperFactory.create(builder.applicationModule, this.providesActionTrackingServiceProvider);
        this.provideExerciseAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideExerciseAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.providesMealServiceProvider = ApplicationModule_ProvidesMealServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesMfpJsonV2ApiProvider, this.providesSessionProvider, this.providesDiaryServiceProvider, this.providesImageAssociationServiceProvider, this.providesSyncEngineProvider, this.foodPermissionsTableProvider, this.provideDbConnectionManagerProvider, this.providesCountryServiceProvider);
        this.providesVenueServiceProvider = ApplicationModule_ProvidesVenueServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.provideLocationServiceProvider);
        this.providesExploreServiceProvider = ApplicationModule_ProvidesExploreServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesChallengesServiceProvider, this.providesMealServiceProvider, this.providesVenueServiceProvider);
        this.providesVanillaServiceProvider = ApplicationModule_ProvidesVanillaServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider, this.providesConfigServiceProvider, this.providesCountryServiceProvider);
        this.providesFileExportServiceProvider = ApplicationModule_ProvidesFileExportServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider);
        this.providesFileExportAnalyticsHelperProvider = ApplicationModule_ProvidesFileExportAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideRestaurantSharedPreferencesProvider = ApplicationModule_ProvideRestaurantSharedPreferencesFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.providesRestaurantLoggingSettingsServiceProvider = ApplicationModule_ProvidesRestaurantLoggingSettingsServiceFactory.create(builder.applicationModule, this.provideRestaurantSharedPreferencesProvider);
        this.providesRestaurantLoggingAnalyticsHelperProvider = ApplicationModule_ProvidesRestaurantLoggingAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider, this.providesMfpAnalyticsServiceProvider);
        this.providesMiniUserInfoMapperProvider = ApplicationModule_ProvidesMiniUserInfoMapperFactory.create(builder.applicationModule);
        this.providesPaymentServiceProvider = DoubleCheck.provider(ServiceModule_ProvidesPaymentServiceFactory.create(builder.serviceModule, this.provideAppContextProvider));
        this.providePaymentAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidePaymentAnalyticsHelperFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesConfigServiceProvider, this.appSettingsProvider, this.providesAnalyticsServiceProvider, this.providesGeoLocationServiceProvider, this.providesCountryServiceProvider, this.providesPaymentServiceProvider, this.providesProductServiceProvider, this.provideSettingsServiceProvider));
    }

    private void initialize4(Builder builder) {
        this.providesImageReportingServiceProvider = ApplicationModule_ProvidesImageReportingServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider);
        this.providesMenuServiceProvider = ApplicationModule_ProvidesMenuServiceFactory.create(builder.applicationModule, this.providesMfpJsonV2ApiProvider);
        this.providesMultiAddMenuItemHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidesMultiAddMenuItemHelperFactory.create(builder.applicationModule));
        this.providesStatusAnalyticsProvider = ApplicationModule_ProvidesStatusAnalyticsFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideNutritionGraphPreferenceProvider = ApplicationModule_ProvideNutritionGraphPreferenceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider);
        this.providesNutritionGraphPreferenceServiceProvider = ApplicationModule_ProvidesNutritionGraphPreferenceServiceFactory.create(builder.applicationModule, this.provideNutritionGraphPreferenceProvider);
        this.providesUpsellServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidesUpsellServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesConfigServiceProvider, this.providesCountryServiceProvider));
        this.providePremiumUpsellNavigatorProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumUpsellNavigatorFactory.create(builder.applicationModule));
        this.providePremiumUpsellCoordinatorProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumUpsellCoordinatorFactory.create(builder.applicationModule, this.providePremiumUpsellNavigatorProvider, this.providesConfigServiceProvider, this.providesPremiumServiceProvider));
        this.providePremiumUpsellViewModelFactoryProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumUpsellViewModelFactoryFactory.create(builder.applicationModule, this.providePremiumUpsellCoordinatorProvider));
        this.providesPrefetchServiceProvider = ApplicationModule_ProvidesPrefetchServiceFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.providesNewsFeedServiceProvider, this.providesFriendServiceProvider, this.providesProductServiceProvider, this.providesGeoLocationServiceProvider, this.providesSyncUtilProvider, this.providesSyncEngineProvider, this.providesSubscriptionServiceProvider, this.providesAppGalleryServiceProvider, this.providesUserApplicationSettingsServiceProvider);
        this.providesStepsBarChartRendererProvider = ApplicationModule_ProvidesStepsBarChartRendererFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesMeasurementLineChartRendererProvider = ApplicationModule_ProvidesMeasurementLineChartRendererFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesProgressServiceProvider = ApplicationModule_ProvidesProgressServiceFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesSessionProvider, this.providesUserSummaryServiceProvider, this.userWeightServiceProvider, this.providesMeasurementsServiceProvider, this.providesConfigServiceProvider);
        this.providesMealAnalyticsHelperProvider = ApplicationModule_ProvidesMealAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesSettingsAnalyticsHelperProvider = ApplicationModule_ProvidesSettingsAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideMealBrowseAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideMealBrowseAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideVideoAnalyticsHelperProvider = ApplicationModule_ProvideVideoAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.provideAudioManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideAudioManagerFactory.create(builder.applicationModule, this.provideAppContextProvider));
        this.providesWalkThroughUtilProvider = ApplicationModule_ProvidesWalkThroughUtilFactory.create(builder.applicationModule, this.provideOttoBusProvider, this.providesSessionProvider, this.providesLocalizedStringsUtilProvider, this.userEnergyServiceProvider);
        this.providesLnConfigProvider = ServiceModule_ProvidesLnConfigFactory.create(builder.serviceModule, this.provideAppContextProvider);
        this.providesPrivateLogFileProvider = ApplicationModule_ProvidesPrivateLogFileFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesPrivateFilePrinterProvider = DoubleCheck.provider(ApplicationModule_ProvidesPrivateFilePrinterFactory.create(builder.applicationModule, this.providesPrivateLogFileProvider, this.appSettingsProvider));
        this.providesPrinterProvider = ServiceModule_ProvidesPrinterFactory.create(builder.serviceModule, this.providesPrivateFilePrinterProvider);
        this.provideNavigatorProvider = DoubleCheck.provider(ApplicationModule_ProvideNavigatorFactory.create(builder.applicationModule));
        this.providePremiumOnboardingFlowCoordinatorProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumOnboardingFlowCoordinatorFactory.create(builder.applicationModule, this.provideNavigatorProvider, this.userEnergyServiceProvider, this.providesNutrientGoalServiceProvider));
        this.providePremiumOnboardingAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumOnboardingAnalyticsHelperFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.providesAnalyticsServiceProvider));
        this.providePremiumOnboardingViewFactoryProvider = DoubleCheck.provider(ApplicationModule_ProvidePremiumOnboardingViewFactoryFactory.create(builder.applicationModule, this.providePremiumOnboardingFlowCoordinatorProvider, this.providePremiumOnboardingAnalyticsHelperProvider));
        this.providesNutrientDashboardAnalyticsHelperProvider = ApplicationModule_ProvidesNutrientDashboardAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesTextNutrientDashboardProvider = ApplicationModule_ProvidesTextNutrientDashboardFactory.create(builder.applicationModule, this.provideAppContextProvider, this.userEnergyServiceProvider, this.providesSessionProvider, this.providesLocalizedStringsUtilProvider, this.provideStepsServiceProvider, this.providesActionTrackingServiceProvider, this.providesNutrientGoalServiceProvider, this.providesNutritionalGoalsUtilServiceProvider, this.providesPremiumServiceProvider, this.providesFitClientPreferencesProvider, this.providesDiaryServiceProvider, this.providesAppGalleryServiceProvider, this.providesGoogleFitClientProvider, this.providesNutrientDashboardAnalyticsHelperProvider);
        this.providesRadialGraphNutrientDashboardProvider = ApplicationModule_ProvidesRadialGraphNutrientDashboardFactory.create(builder.applicationModule, this.provideAppContextProvider, this.userEnergyServiceProvider, this.providesSessionProvider, this.providesLocalizedStringsUtilProvider, this.provideStepsServiceProvider, this.providesActionTrackingServiceProvider, this.providesNutrientGoalServiceProvider, this.providesNutritionalGoalsUtilServiceProvider, this.providesPremiumServiceProvider, this.providesFitClientPreferencesProvider, this.providesDiaryServiceProvider, this.providesAppGalleryServiceProvider, this.providesGoogleFitClientProvider, this.providesNutrientDashboardAnalyticsHelperProvider);
        this.providesNutrientDashboardRendererProvider = ApplicationModule_ProvidesNutrientDashboardRendererFactory.create(builder.applicationModule, this.providesTextNutrientDashboardProvider, this.providesRadialGraphNutrientDashboardProvider, this.providesSessionProvider, this.providesPremiumServiceProvider);
        this.providesDiaryAnalyticsHelperProvider = ApplicationModule_ProvidesDiaryAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesPremiumAnalyticsHelperProvider = ApplicationModule_ProvidesPremiumAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.timestampAnalyticsHelperProvider = TimestampAnalyticsHelper_Factory.create(this.providesAnalyticsServiceProvider);
        this.providesNutritionGraphServiceProvider = ApplicationModule_ProvidesNutritionGraphServiceFactory.create(builder.applicationModule, this.providesNutrientGoalServiceProvider, this.userEnergyServiceProvider, this.providesSessionProvider, this.providesNutritionalGoalsUtilServiceProvider);
        this.providesCoreChartRendererBaseConstructorArgsProvider = ApplicationModule_ProvidesCoreChartRendererBaseConstructorArgsFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.providesSessionProvider, this.userEnergyServiceProvider, this.providesNutrientGoalServiceProvider, this.providesNutritionalGoalsUtilServiceProvider, this.providesNutritionGraphServiceProvider);
        this.providesChartRendererFactoryProvider = DoubleCheck.provider(ApplicationModule_ProvidesChartRendererFactoryFactory.create(builder.applicationModule, this.provideAppContextProvider, this.providesCoreChartRendererBaseConstructorArgsProvider));
        this.providesNutritionGraphAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidesNutritionGraphAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideUserSummaryRepositoryProvider = DoubleCheck.provider(ApplicationModule_ProvideUserSummaryRepositoryFactory.create(builder.applicationModule, this.providesSessionProvider, this.providesUserSummaryServiceProvider));
        this.provideAchievementAdManagerProvider = ApplicationModule_ProvideAchievementAdManagerFactory.create(builder.applicationModule, this.provideUserSummaryRepositoryProvider, this.providesPremiumServiceProvider, this.adsSettingsProvider, this.provideSettingsServiceProvider, this.provideStoredAchievementEventsProvider, this.provideAchievementInterstitialAdProvider, this.provideAchievementAdAnalyticsEventsProvider, this.provideClientIdProvider);
        this.providesNotificationInboxAnalyticsServiceProvider = ApplicationModule_ProvidesNotificationInboxAnalyticsServiceFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider);
        this.providesLocalizedStringServiceProvider = ApplicationModule_ProvidesLocalizedStringServiceFactory.create(builder.applicationModule, this.providesCountryServiceProvider);
        this.providesCoreChartLegendFactoryProvider = DoubleCheck.provider(ApplicationModule_ProvidesCoreChartLegendFactoryFactory.create(builder.applicationModule));
        this.providesBlogServiceProvider = ApplicationModule_ProvidesBlogServiceFactory.create(builder.applicationModule, this.providesCountryServiceProvider);
        this.provideNutritionAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideNutritionAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideHomeAnalyticsHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideHomeAnalyticsHelperFactory.create(builder.applicationModule, this.providesAnalyticsServiceProvider));
        this.provideProfileAggregatorServiceProvider = DoubleCheck.provider(ApplicationModule_ProvideProfileAggregatorServiceFactory.create(builder.applicationModule, this.providesSessionProvider, this.providesMfpJsonV2ApiProvider, this.providesSHealthConnectionProvider, this.providesGoogleFitClientProvider, this.providesCountryServiceProvider, this.providesNutrientGoalServiceProvider, this.userWeightServiceProvider));
        this.provideAndroidAdvertisementIdentifierProvider = DoubleCheck.provider(ApplicationModule_ProvideAndroidAdvertisementIdentifierFactory.create(builder.applicationModule));
        this.provideAdIdConsentCompliantProvider = DoubleCheck.provider(ApplicationModule_ProvideAdIdConsentCompliantFactory.create(builder.applicationModule, this.provideSettingsServiceProvider, this.providesAdsAnalyticHelperProvider, this.provideAndroidAdvertisementIdentifierProvider));
        this.provideAppLifecycleObserverProvider = DoubleCheck.provider(ApplicationModule_ProvideAppLifecycleObserverFactory.create(builder.applicationModule, this.provideAppContextProvider, this.provideAdIdConsentCompliantProvider));
        this.provideUserGoalsPrefsProvider = ApplicationModule_ProvideUserGoalsPrefsFactory.create(builder.applicationModule, this.provideAppContextProvider);
        this.providesUserV1GoalPreferencesProvider = ApplicationModule_ProvidesUserV1GoalPreferencesFactory.create(builder.applicationModule, this.provideUserGoalsPrefsProvider);
        this.deviceUuidFactoryProvider = DeviceUuidFactory_Factory.create(this.provideAppContextProvider);
        this.provideDeviceUUIDBytesProvider = DoubleCheck.provider(ApplicationModule_ProvideDeviceUUIDBytesFactory.create(builder.applicationModule, this.provideDeviceUUIDProvider));
        this.providesBusyManagerProvider = ApplicationModule_ProvidesBusyManagerFactory.create(builder.applicationModule);
        this.providesViewModelCacheProvider = DoubleCheck.provider(ApplicationModule_ProvidesViewModelCacheFactory.create(builder.applicationModule));
        this.syncModule = builder.syncModule;
        this.providesFoodEntryFromServerMapperProvider = ApplicationModule_ProvidesFoodEntryFromServerMapperFactory.create(builder.applicationModule, this.providesFoodMapperProvider);
        this.providesExerciseFromServerMapperProvider = ApplicationModule_ProvidesExerciseFromServerMapperFactory.create(builder.applicationModule);
        this.providesExerciseEntryFromServerMapperProvider = ApplicationModule_ProvidesExerciseEntryFromServerMapperFactory.create(builder.applicationModule, this.providesExerciseFromServerMapperProvider);
        this.providesWaterEntryMapperProvider = ApplicationModule_ProvidesWaterEntryMapperFactory.create(builder.applicationModule);
        this.providesDiaryNoteMapperProvider = ApplicationModule_ProvidesDiaryNoteMapperFactory.create(builder.applicationModule);
        this.providesDeviceActivationApiProvider = ApplicationModule_ProvidesDeviceActivationApiFactory.create(builder.applicationModule, this.provideApiUrlProvider, this.provideApiSettingsProvider, this.provideUserAgentProvider, this.provideDeviceUUIDProvider, this.provideAppVersionCodeProvider, this.providesInterceptorProvider, ApiJsonMapper_Factory.create(), this.provideOttoBusProvider, this.provideAuthTokenProvider, this.providesCountryServiceProvider, this.providesDeviceInfoProvider);
        this.provideBaseRequestInterceptorProvider = DoubleCheck.provider(ApiModule_ProvideBaseRequestInterceptorFactory.create(builder.apiModule, this.providesCountryServiceProvider, this.providesDeviceInfoProvider, this.provideDeviceUUIDProvider, this.provideUserAgentProvider, this.provideAuthTokenProvider, this.provideApiUrlProvider));
        this.provideHttpClientProvider = DoubleCheck.provider(ApiModule_ProvideHttpClientFactory.create(builder.apiModule, this.provideBaseRequestInterceptorProvider));
        this.sessionModule = builder.sessionModule;
    }

    public void inject(AboutUs aboutUs) {
        injectAboutUs(aboutUs);
    }

    public void inject(AccountRestrictedActivity accountRestrictedActivity) {
        injectAccountRestrictedActivity(accountRestrictedActivity);
    }

    public void inject(AddExerciseEntry addExerciseEntry) {
        injectAddExerciseEntry(addExerciseEntry);
    }

    public void inject(AddFoodSummaryView addFoodSummaryView) {
        injectAddFoodSummaryView(addFoodSummaryView);
    }

    public void inject(AddFoodSummaryViewV2 addFoodSummaryViewV2) {
        injectAddFoodSummaryViewV2(addFoodSummaryViewV2);
    }

    public void inject(AddFriendsContacts addFriendsContacts) {
        injectAddFriendsContacts(addFriendsContacts);
    }

    public void inject(AddFriendsFacebook addFriendsFacebook) {
        injectAddFriendsFacebook(addFriendsFacebook);
    }

    public void inject(AddFriendsParent addFriendsParent) {
        injectAddFriendsParent(addFriendsParent);
    }

    public void inject(AddFriendsSplash addFriendsSplash) {
        injectAddFriendsSplash(addFriendsSplash);
    }

    public void inject(AddFood addFood) {
        injectAddFood(addFood);
    }

    public void inject(AnalyticsEventsActivity analyticsEventsActivity) {
        injectAnalyticsEventsActivity(analyticsEventsActivity);
    }

    public void inject(AppGalleryActivity appGalleryActivity) {
        injectAppGalleryActivity(appGalleryActivity);
    }

    public void inject(AddWeightActivity addWeightActivity) {
        injectAddWeightActivity(addWeightActivity);
    }

    public void inject(BarcodeMatchActivity barcodeMatchActivity) {
        injectBarcodeMatchActivity(barcodeMatchActivity);
    }

    public void inject(BarcodeScannerActivity barcodeScannerActivity) {
        injectBarcodeScannerActivity(barcodeScannerActivity);
    }

    public void inject(BlogActivity blogActivity) {
        injectBlogActivity(blogActivity);
    }

    public void inject(CalorieAdjustmentExplanationView calorieAdjustmentExplanationView) {
        injectCalorieAdjustmentExplanationView(calorieAdjustmentExplanationView);
    }

    public void inject(CalorieAdjustmentIntro calorieAdjustmentIntro) {
        injectCalorieAdjustmentIntro(calorieAdjustmentIntro);
    }

    public void inject(ChallengeAchievementActivity challengeAchievementActivity) {
        injectChallengeAchievementActivity(challengeAchievementActivity);
    }

    public void inject(ChallengeDetailActivity challengeDetailActivity) {
        injectChallengeDetailActivity(challengeDetailActivity);
    }

    public void inject(ChallengeFriendListActivity challengeFriendListActivity) {
        injectChallengeFriendListActivity(challengeFriendListActivity);
    }

    public void inject(ChallengeShareActivity challengeShareActivity) {
        injectChallengeShareActivity(challengeShareActivity);
    }

    public void inject(ChallengesActivity challengesActivity) {
        injectChallengesActivity(challengesActivity);
    }

    public void inject(CommentsActivity commentsActivity) {
        injectCommentsActivity(commentsActivity);
    }

    public void inject(CommunityActivity communityActivity) {
        injectCommunityActivity(communityActivity);
    }

    public void inject(CompleteDiaryActivity completeDiaryActivity) {
        injectCompleteDiaryActivity(completeDiaryActivity);
    }

    public void inject(ComposeMessageActivity composeMessageActivity) {
        injectComposeMessageActivity(composeMessageActivity);
    }

    public void inject(ChangePasswordActivity changePasswordActivity) {
        injectChangePasswordActivity(changePasswordActivity);
    }

    public void inject(ConsentsActivity consentsActivity) {
        injectConsentsActivity(consentsActivity);
    }

    public void inject(CreateRecipeManuallyActivity createRecipeManuallyActivity) {
        injectCreateRecipeManuallyActivity(createRecipeManuallyActivity);
    }

    public void inject(CustomExerciseCaloriesActivity customExerciseCaloriesActivity) {
        injectCustomExerciseCaloriesActivity(customExerciseCaloriesActivity);
    }

    public void inject(CustomMealNames customMealNames) {
        injectCustomMealNames(customMealNames);
    }

    public void inject(DeleteAccountActivity deleteAccountActivity) {
        injectDeleteAccountActivity(deleteAccountActivity);
    }

    public void inject(Diary diary) {
        injectDiary(diary);
    }

    public void inject(DiarySettingsActivity diarySettingsActivity) {
        injectDiarySettingsActivity(diarySettingsActivity);
    }

    public void inject(DisconnectFacebook disconnectFacebook) {
        injectDisconnectFacebook(disconnectFacebook);
    }

    public void inject(DeepLinkRouterActivity deepLinkRouterActivity) {
        injectDeepLinkRouterActivity(deepLinkRouterActivity);
    }

    public void inject(DetailedMessageActivity detailedMessageActivity) {
        injectDetailedMessageActivity(detailedMessageActivity);
    }

    public void inject(EditCardio editCardio) {
        injectEditCardio(editCardio);
    }

    public void inject(EditCardioExercise editCardioExercise) {
        injectEditCardioExercise(editCardioExercise);
    }

    public void inject(EditCustomMacroGoalsActivity editCustomMacroGoalsActivity) {
        injectEditCustomMacroGoalsActivity(editCustomMacroGoalsActivity);
    }

    public void inject(EditDiaryNoteView editDiaryNoteView) {
        injectEditDiaryNoteView(editDiaryNoteView);
    }

    public void inject(EditFood editFood) {
        injectEditFood(editFood);
    }

    public void inject(EditProfile editProfile) {
        injectEditProfile(editProfile);
    }

    public void inject(EditReminder editReminder) {
        injectEditReminder(editReminder);
    }

    public void inject(EditStrength editStrength) {
        injectEditStrength(editStrength);
    }

    public void inject(EndpointActivity endpointActivity) {
        injectEndpointActivity(endpointActivity);
    }

    public void inject(ExerciseCaloriesActivity exerciseCaloriesActivity) {
        injectExerciseCaloriesActivity(exerciseCaloriesActivity);
    }

    public void inject(ExerciseSearchActivity exerciseSearchActivity) {
        injectExerciseSearchActivity(exerciseSearchActivity);
    }

    public void inject(ExploreActivity exploreActivity) {
        injectExploreActivity(exploreActivity);
    }

    public void inject(FacebookLoginActivity facebookLoginActivity) {
        injectFacebookLoginActivity(facebookLoginActivity);
    }

    public void inject(FacebookSettings facebookSettings) {
        injectFacebookSettings(facebookSettings);
    }

    public void inject(Faq faq) {
        injectFaq(faq);
    }

    public void inject(FaqFeedbackBaseActivity faqFeedbackBaseActivity) {
        injectFaqFeedbackBaseActivity(faqFeedbackBaseActivity);
    }

    public void inject(FinishOnboardingActivity finishOnboardingActivity) {
        injectFinishOnboardingActivity(finishOnboardingActivity);
    }

    public void inject(FileExport fileExport) {
        injectFileExport(fileExport);
    }

    public void inject(FileExportPreview fileExportPreview) {
        injectFileExportPreview(fileExportPreview);
    }

    public void inject(FoodEditorActivity foodEditorActivity) {
        injectFoodEditorActivity(foodEditorActivity);
    }

    public void inject(FoodListsActivity foodListsActivity) {
        injectFoodListsActivity(foodListsActivity);
    }

    public void inject(FoodNotesActivity foodNotesActivity) {
        injectFoodNotesActivity(foodNotesActivity);
    }

    public void inject(FoodSearchActivity foodSearchActivity) {
        injectFoodSearchActivity(foodSearchActivity);
    }

    public void inject(FoodSearchActivityV2 foodSearchActivityV2) {
        injectFoodSearchActivityV2(foodSearchActivityV2);
    }

    public void inject(ForgotPasswordActivity forgotPasswordActivity) {
        injectForgotPasswordActivity(forgotPasswordActivity);
    }

    public void inject(FriendDiary friendDiary) {
        injectFriendDiary(friendDiary);
    }

    public void inject(FriendsActivity friendsActivity) {
        injectFriendsActivity(friendsActivity);
    }

    public void inject(FullScreenWebView fullScreenWebView) {
        injectFullScreenWebView(fullScreenWebView);
    }

    public void inject(GDPRHelpActivity gDPRHelpActivity) {
        injectGDPRHelpActivity(gDPRHelpActivity);
    }

    public void inject(GenericExercise genericExercise) {
        injectGenericExercise(genericExercise);
    }

    public void inject(GooglePlayPaymentActivity googlePlayPaymentActivity) {
        injectGooglePlayPaymentActivity(googlePlayPaymentActivity);
    }

    public void inject(FlagResetActivity flagResetActivity) {
        injectFlagResetActivity(flagResetActivity);
    }

    public void inject(HomeActivity homeActivity) {
        injectHomeActivity(homeActivity);
    }

    public void inject(HomeMessagesActivity homeMessagesActivity) {
        injectHomeMessagesActivity(homeMessagesActivity);
    }

    public void inject(ImageReportingActivity imageReportingActivity) {
        injectImageReportingActivity(imageReportingActivity);
    }

    public void inject(ImageReportingDetailsActivity imageReportingDetailsActivity) {
        injectImageReportingDetailsActivity(imageReportingDetailsActivity);
    }

    public void inject(ImportPhotoActivity importPhotoActivity) {
        injectImportPhotoActivity(importPhotoActivity);
    }

    public void inject(IngredientMatchingActivity ingredientMatchingActivity) {
        injectIngredientMatchingActivity(ingredientMatchingActivity);
    }

    public void inject(InviteContactsToChallengeActivity inviteContactsToChallengeActivity) {
        injectInviteContactsToChallengeActivity(inviteContactsToChallengeActivity);
    }

    public void inject(InviteFriendActivity inviteFriendActivity) {
        injectInviteFriendActivity(inviteFriendActivity);
    }

    public void inject(InviteSourceListActivity inviteSourceListActivity) {
        injectInviteSourceListActivity(inviteSourceListActivity);
    }

    public void inject(JoinChallengeActivity joinChallengeActivity) {
        injectJoinChallengeActivity(joinChallengeActivity);
    }

    public void inject(LearnMoreActivity learnMoreActivity) {
        injectLearnMoreActivity(learnMoreActivity);
    }

    public void inject(LocaleOverrideActivity localeOverrideActivity) {
        injectLocaleOverrideActivity(localeOverrideActivity);
    }

    public void inject(LoginActivity loginActivity) {
        injectLoginActivity(loginActivity);
    }

    public void inject(LogoutActivity logoutActivity) {
        injectLogoutActivity(logoutActivity);
    }

    public void inject(MacroGoalEditorActivity macroGoalEditorActivity) {
        injectMacroGoalEditorActivity(macroGoalEditorActivity);
    }

    public void inject(MeActivity meActivity) {
        injectMeActivity(meActivity);
    }

    public void inject(MealGoalsActivity mealGoalsActivity) {
        injectMealGoalsActivity(mealGoalsActivity);
    }

    public void inject(MenusActivity menusActivity) {
        injectMenusActivity(menusActivity);
    }

    public void inject(MfpActivity mfpActivity) {
        injectMfpActivity(mfpActivity);
    }

    public void inject(RemindersActivity remindersActivity) {
        injectRemindersActivity(remindersActivity);
    }

    public void inject(AutoPlaySettings autoPlaySettings) {
        injectAutoPlaySettings(autoPlaySettings);
    }

    public void inject(NewCardio newCardio) {
        injectNewCardio(newCardio);
    }

    public void inject(NewsFeedSettings newsFeedSettings) {
        injectNewsFeedSettings(newsFeedSettings);
    }

    public void inject(NewStatusOrCommentActivity newStatusOrCommentActivity) {
        injectNewStatusOrCommentActivity(newStatusOrCommentActivity);
    }

    public void inject(NewStrength newStrength) {
        injectNewStrength(newStrength);
    }

    public void inject(NotificationInboxActivity notificationInboxActivity) {
        injectNotificationInboxActivity(notificationInboxActivity);
    }

    public void inject(Nutrition nutrition) {
        injectNutrition(nutrition);
    }

    public void inject(NutrientDashboardSettingsActivity nutrientDashboardSettingsActivity) {
        injectNutrientDashboardSettingsActivity(nutrientDashboardSettingsActivity);
    }

    public void inject(OAuthActivity oAuthActivity) {
        injectOAuthActivity(oAuthActivity);
    }

    public void inject(PasscodeView passcodeView) {
        injectPasscodeView(passcodeView);
    }

    public void inject(PaymentActivityBase paymentActivityBase) {
        injectPaymentActivityBase(paymentActivityBase);
    }

    public void inject(PaymentConfirmation paymentConfirmation) {
        injectPaymentConfirmation(paymentConfirmation);
    }

    public void inject(PaymentsDebugActivity paymentsDebugActivity) {
        injectPaymentsDebugActivity(paymentsDebugActivity);
    }

    public void inject(AdConsentsActivity adConsentsActivity) {
        injectAdConsentsActivity(adConsentsActivity);
    }

    public void inject(PremiumDebugActivity premiumDebugActivity) {
        injectPremiumDebugActivity(premiumDebugActivity);
    }

    public void inject(PremiumUpsellActivity premiumUpsellActivity) {
        injectPremiumUpsellActivity(premiumUpsellActivity);
    }

    public void inject(PrefetchActivity prefetchActivity) {
        injectPrefetchActivity(prefetchActivity);
    }

    public void inject(PremiumInterstitialActivity premiumInterstitialActivity) {
        injectPremiumInterstitialActivity(premiumInterstitialActivity);
    }

    public void inject(RestaurantLoggingInterstitial restaurantLoggingInterstitial) {
        injectRestaurantLoggingInterstitial(restaurantLoggingInterstitial);
    }

    public void inject(PrivacyCenterActivity privacyCenterActivity) {
        injectPrivacyCenterActivity(privacyCenterActivity);
    }

    public void inject(ProgressActivity progressActivity) {
        injectProgressActivity(progressActivity);
    }

    public void inject(ProgressCongratsActivity progressCongratsActivity) {
        injectProgressCongratsActivity(progressCongratsActivity);
    }

    public void inject(ProgressPhotosDebugActivity progressPhotosDebugActivity) {
        injectProgressPhotosDebugActivity(progressPhotosDebugActivity);
    }

    public void inject(ProgressPhotosGalleryActivity progressPhotosGalleryActivity) {
        injectProgressPhotosGalleryActivity(progressPhotosGalleryActivity);
    }

    public void inject(ProgressPhotosInterstitialActivity progressPhotosInterstitialActivity) {
        injectProgressPhotosInterstitialActivity(progressPhotosInterstitialActivity);
    }

    public void inject(PrototypeHomeActivity prototypeHomeActivity) {
        injectPrototypeHomeActivity(prototypeHomeActivity);
    }

    public void inject(QuickAddActivity quickAddActivity) {
        injectQuickAddActivity(quickAddActivity);
    }

    public void inject(RecipesAndFoods recipesAndFoods) {
        injectRecipesAndFoods(recipesAndFoods);
    }

    public void inject(RecipeDetailsActivity recipeDetailsActivity) {
        injectRecipeDetailsActivity(recipeDetailsActivity);
    }

    public void inject(RecipeImportBrowserActivity recipeImportBrowserActivity) {
        injectRecipeImportBrowserActivity(recipeImportBrowserActivity);
    }

    public void inject(RecipeImportReviewActivity recipeImportReviewActivity) {
        injectRecipeImportReviewActivity(recipeImportReviewActivity);
    }

    public void inject(RecommendGoal recommendGoal) {
        injectRecommendGoal(recommendGoal);
    }

    public void inject(RetrieveMealFoodDebugActivity retrieveMealFoodDebugActivity) {
        injectRetrieveMealFoodDebugActivity(retrieveMealFoodDebugActivity);
    }

    public void inject(RolloutDebugActivity rolloutDebugActivity) {
        injectRolloutDebugActivity(rolloutDebugActivity);
    }

    public void inject(SearchMatchActivity searchMatchActivity) {
        injectSearchMatchActivity(searchMatchActivity);
    }

    public void inject(SelectReminder selectReminder) {
        injectSelectReminder(selectReminder);
    }

    public void inject(SettingsActivity settingsActivity) {
        injectSettingsActivity(settingsActivity);
    }

    public void inject(ShareProgressActivity shareProgressActivity) {
        injectShareProgressActivity(shareProgressActivity);
    }

    public void inject(StatusUpdateActivity statusUpdateActivity) {
        injectStatusUpdateActivity(statusUpdateActivity);
    }

    public void inject(SignUpActivity signUpActivity) {
        injectSignUpActivity(signUpActivity);
    }

    public void inject(SubscriptionStatus subscriptionStatus) {
        injectSubscriptionStatus(subscriptionStatus);
    }

    public void inject(TermsOfUseActivity termsOfUseActivity) {
        injectTermsOfUseActivity(termsOfUseActivity);
    }

    public void inject(TroubleshootingActivity troubleshootingActivity) {
        injectTroubleshootingActivity(troubleshootingActivity);
    }

    public void inject(UpdateGoals updateGoals) {
        injectUpdateGoals(updateGoals);
    }

    public void inject(UpdatedTermsActivity updatedTermsActivity) {
        injectUpdatedTermsActivity(updatedTermsActivity);
    }

    public void inject(UserAchievementsActivity userAchievementsActivity) {
        injectUserAchievementsActivity(userAchievementsActivity);
    }

    public void inject(VenuesActivity venuesActivity) {
        injectVenuesActivity(venuesActivity);
    }

    public void inject(VideoActivity videoActivity) {
        injectVideoActivity(videoActivity);
    }

    public void inject(WalkthroughLoggingActivity walkthroughLoggingActivity) {
        injectWalkthroughLoggingActivity(walkthroughLoggingActivity);
    }

    public void inject(WaterEntryActivity waterEntryActivity) {
        injectWaterEntryActivity(waterEntryActivity);
    }

    public void inject(WeeklyNutritionSettings weeklyNutritionSettings) {
        injectWeeklyNutritionSettings(weeklyNutritionSettings);
    }

    public void inject(Welcome welcome) {
        injectWelcome(welcome);
    }

    public void inject(XPromoInterstitialActivity xPromoInterstitialActivity) {
        injectXPromoInterstitialActivity(xPromoInterstitialActivity);
    }

    public void inject(ViewFoodActivity viewFoodActivity) {
        injectViewFoodActivity(viewFoodActivity);
    }

    public void inject(FoodFeedbackActivity foodFeedbackActivity) {
        injectFoodFeedbackActivity(foodFeedbackActivity);
    }

    public void inject(OnboardingActivity onboardingActivity) {
        injectOnboardingActivity(onboardingActivity);
    }

    public void inject(AlexaInterstitialActivity alexaInterstitialActivity) {
        injectAlexaInterstitialActivity(alexaInterstitialActivity);
    }

    public void inject(AccountRestrictedDialogFragment accountRestrictedDialogFragment) {
        injectAccountRestrictedDialogFragment(accountRestrictedDialogFragment);
    }

    public void inject(ActivityLevelDialogFragment activityLevelDialogFragment) {
        injectActivityLevelDialogFragment(activityLevelDialogFragment);
    }

    public void inject(AdditionalNutrientGoalsFragment additionalNutrientGoalsFragment) {
        injectAdditionalNutrientGoalsFragment(additionalNutrientGoalsFragment);
    }

    public void inject(AddCustomFoodImprovementDialogFragment addCustomFoodImprovementDialogFragment) {
        injectAddCustomFoodImprovementDialogFragment(addCustomFoodImprovementDialogFragment);
    }

    public void inject(AdvancedDebuggingFragment advancedDebuggingFragment) {
        injectAdvancedDebuggingFragment(advancedDebuggingFragment);
    }

    public void inject(AnalyticsEventsFragment analyticsEventsFragment) {
        injectAnalyticsEventsFragment(analyticsEventsFragment);
    }

    public void inject(AppDetailFragment appDetailFragment) {
        injectAppDetailFragment(appDetailFragment);
    }

    public void inject(AppsHomeFragment appsHomeFragment) {
        injectAppsHomeFragment(appsHomeFragment);
    }

    public void inject(AppRatingDialogFragment appRatingDialogFragment) {
        injectAppRatingDialogFragment(appRatingDialogFragment);
    }

    public void inject(BarcodeScanDialogFragment barcodeScanDialogFragment) {
        injectBarcodeScanDialogFragment(barcodeScanDialogFragment);
    }

    public void inject(BlogFragment blogFragment) {
        injectBlogFragment(blogFragment);
    }

    public void inject(CalorieAddErrorDialogFragment calorieAddErrorDialogFragment) {
        injectCalorieAddErrorDialogFragment(calorieAddErrorDialogFragment);
    }

    public void inject(GenderDialogFragment genderDialogFragment) {
        injectGenderDialogFragment(genderDialogFragment);
    }

    public void inject(GraphPeriodDialogFragment graphPeriodDialogFragment) {
        injectGraphPeriodDialogFragment(graphPeriodDialogFragment);
    }

    public void inject(ChallengesFragment challengesFragment) {
        injectChallengesFragment(challengesFragment);
    }

    public void inject(ChallengeDetailsFragment challengeDetailsFragment) {
        injectChallengeDetailsFragment(challengeDetailsFragment);
    }

    public void inject(ChallengePrizesFragment challengePrizesFragment) {
        injectChallengePrizesFragment(challengePrizesFragment);
    }

    public void inject(ChallengeFriendsFragment challengeFriendsFragment) {
        injectChallengeFriendsFragment(challengeFriendsFragment);
    }

    public void inject(ChallengeWebViewFragment challengeWebViewFragment) {
        injectChallengeWebViewFragment(challengeWebViewFragment);
    }

    public void inject(CommunityFragment communityFragment) {
        injectCommunityFragment(communityFragment);
    }

    public void inject(CountryDialogFragment countryDialogFragment) {
        injectCountryDialogFragment(countryDialogFragment);
    }

    public void inject(CreateOrEditRecipeFragment createOrEditRecipeFragment) {
        injectCreateOrEditRecipeFragment(createOrEditRecipeFragment);
    }

    public void inject(CreateRecipeDialogFragment createRecipeDialogFragment) {
        injectCreateRecipeDialogFragment(createRecipeDialogFragment);
    }

    public void inject(CustomGoalByDayFragment customGoalByDayFragment) {
        injectCustomGoalByDayFragment(customGoalByDayFragment);
    }

    public void inject(CustomNutrientDashboardSelectionFragment customNutrientDashboardSelectionFragment) {
        injectCustomNutrientDashboardSelectionFragment(customNutrientDashboardSelectionFragment);
    }

    public void inject(CustomLayoutBaseDialogFragment customLayoutBaseDialogFragment) {
        injectCustomLayoutBaseDialogFragment(customLayoutBaseDialogFragment);
    }

    public void inject(DebugLogsFragment debugLogsFragment) {
        injectDebugLogsFragment(debugLogsFragment);
    }

    public void inject(DeleteMealConfirmationDialogFragment deleteMealConfirmationDialogFragment) {
        injectDeleteMealConfirmationDialogFragment(deleteMealConfirmationDialogFragment);
    }

    public void inject(DiaryFragmentBase diaryFragmentBase) {
        injectDiaryFragmentBase(diaryFragmentBase);
    }

    public void inject(DiaryMoreActionsDialog diaryMoreActionsDialog) {
        injectDiaryMoreActionsDialog(diaryMoreActionsDialog);
    }

    public void inject(DiaryLongPressDialogFragment diaryLongPressDialogFragment) {
        injectDiaryLongPressDialogFragment(diaryLongPressDialogFragment);
    }

    public void inject(DiaryQuickToolsDialogFragment diaryQuickToolsDialogFragment) {
        injectDiaryQuickToolsDialogFragment(diaryQuickToolsDialogFragment);
    }

    public void inject(DiarySettingsFragment diarySettingsFragment) {
        injectDiarySettingsFragment(diarySettingsFragment);
    }

    public void inject(EatingDisorderUpdateGoalCompleteFragment eatingDisorderUpdateGoalCompleteFragment) {
        injectEatingDisorderUpdateGoalCompleteFragment(eatingDisorderUpdateGoalCompleteFragment);
    }

    public void inject(EditCustomMacroGoalsFragment editCustomMacroGoalsFragment) {
        injectEditCustomMacroGoalsFragment(editCustomMacroGoalsFragment);
    }

    public void inject(EditMacroGoalsByGramsFragment editMacroGoalsByGramsFragment) {
        injectEditMacroGoalsByGramsFragment(editMacroGoalsByGramsFragment);
    }

    public void inject(EditMacroGoalsByPercentFragment editMacroGoalsByPercentFragment) {
        injectEditMacroGoalsByPercentFragment(editMacroGoalsByPercentFragment);
    }

    public void inject(EditMealNameDialogFragment editMealNameDialogFragment) {
        injectEditMealNameDialogFragment(editMealNameDialogFragment);
    }

    public void inject(EditServingsDialogFragment editServingsDialogFragment) {
        injectEditServingsDialogFragment(editServingsDialogFragment);
    }

    public void inject(EditServingsDialogFragmentV2 editServingsDialogFragmentV2) {
        injectEditServingsDialogFragmentV2(editServingsDialogFragmentV2);
    }

    public void inject(EditServingsDialogFragmentBase editServingsDialogFragmentBase) {
        injectEditServingsDialogFragmentBase(editServingsDialogFragmentBase);
    }

    public void inject(EditV2SearchServingsDialogFragment editV2SearchServingsDialogFragment) {
        injectEditV2SearchServingsDialogFragment(editV2SearchServingsDialogFragment);
    }

    public void inject(WalkthroughServingSizeV2Fragment walkthroughServingSizeV2Fragment) {
        injectWalkthroughServingSizeV2Fragment(walkthroughServingSizeV2Fragment);
    }

    public void inject(EmailSettingsListFragment emailSettingsListFragment) {
        injectEmailSettingsListFragment(emailSettingsListFragment);
    }

    public void inject(ExerciseCaloriesFragment exerciseCaloriesFragment) {
        injectExerciseCaloriesFragment(exerciseCaloriesFragment);
    }

    public void inject(ExerciseGoalsDialogFragment exerciseGoalsDialogFragment) {
        injectExerciseGoalsDialogFragment(exerciseGoalsDialogFragment);
    }

    public void inject(ExerciseSearchFragment exerciseSearchFragment) {
        injectExerciseSearchFragment(exerciseSearchFragment);
    }

    public void inject(ExerciseSortOrderDialogFragment exerciseSortOrderDialogFragment) {
        injectExerciseSortOrderDialogFragment(exerciseSortOrderDialogFragment);
    }

    public void inject(ExerciseTypeDialogFragment exerciseTypeDialogFragment) {
        injectExerciseTypeDialogFragment(exerciseTypeDialogFragment);
    }

    public void inject(PrototypeExploreFragment prototypeExploreFragment) {
        injectPrototypeExploreFragment(prototypeExploreFragment);
    }

    public void inject(ExternalWebViewFragment externalWebViewFragment) {
        injectExternalWebViewFragment(externalWebViewFragment);
    }

    public void inject(FriendDiaryFragment friendDiaryFragment) {
        injectFriendDiaryFragment(friendDiaryFragment);
    }

    public void inject(FriendDiaryPasswordDialogFragment friendDiaryPasswordDialogFragment) {
        injectFriendDiaryPasswordDialogFragment(friendDiaryPasswordDialogFragment);
    }

    public void inject(GraphViewFragment graphViewFragment) {
        injectGraphViewFragment(graphViewFragment);
    }

    public void inject(GoalsFragment goalsFragment) {
        injectGoalsFragment(goalsFragment);
    }

    public void inject(GoogleFitPermissionsFragment googleFitPermissionsFragment) {
        injectGoogleFitPermissionsFragment(googleFitPermissionsFragment);
    }

    public void inject(HeightDialogFragment heightDialogFragment) {
        injectHeightDialogFragment(heightDialogFragment);
    }

    public void inject(HelpListFragment helpListFragment) {
        injectHelpListFragment(helpListFragment);
    }

    public void inject(HomeFragment homeFragment) {
        injectHomeFragment(homeFragment);
    }

    public void inject(ImageChooserDialogFragment imageChooserDialogFragment) {
        injectImageChooserDialogFragment(imageChooserDialogFragment);
    }

    public void inject(ImportPhotoFragment importPhotoFragment) {
        injectImportPhotoFragment(importPhotoFragment);
    }

    public void inject(JoinedChallengeSummaryFragment joinedChallengeSummaryFragment) {
        injectJoinedChallengeSummaryFragment(joinedChallengeSummaryFragment);
    }

    public void inject(JoinedFriendsFragment joinedFriendsFragment) {
        injectJoinedFriendsFragment(joinedFriendsFragment);
    }

    public void inject(JoinedPrizesFragment joinedPrizesFragment) {
        injectJoinedPrizesFragment(joinedPrizesFragment);
    }

    public void inject(MacroNutrientEditorDialog macroNutrientEditorDialog) {
        injectMacroNutrientEditorDialog(macroNutrientEditorDialog);
    }

    public void inject(MealFilterDialog mealFilterDialog) {
        injectMealFilterDialog(mealFilterDialog);
    }

    public void inject(MealFoodPermissionSelectionDialogFragment mealFoodPermissionSelectionDialogFragment) {
        injectMealFoodPermissionSelectionDialogFragment(mealFoodPermissionSelectionDialogFragment);
    }

    public void inject(MealGoalsFragment mealGoalsFragment) {
        injectMealGoalsFragment(mealGoalsFragment);
    }

    public void inject(MealNamesDialogFragment mealNamesDialogFragment) {
        injectMealNamesDialogFragment(mealNamesDialogFragment);
    }

    public void inject(MeasurementTypeDialogFragment measurementTypeDialogFragment) {
        injectMeasurementTypeDialogFragment(measurementTypeDialogFragment);
    }

    public void inject(MeasurementValueDialogFragment measurementValueDialogFragment) {
        injectMeasurementValueDialogFragment(measurementValueDialogFragment);
    }

    public void inject(MessagesFragment messagesFragment) {
        injectMessagesFragment(messagesFragment);
    }

    public void inject(MfpFragment mfpFragment) {
        injectMfpFragment(mfpFragment);
    }

    public void inject(MyExercisesFragment myExercisesFragment) {
        injectMyExercisesFragment(myExercisesFragment);
    }

    public void inject(MyFoodsFragment myFoodsFragment) {
        injectMyFoodsFragment(myFoodsFragment);
    }

    public void inject(MyInfoFragment myInfoFragment) {
        injectMyInfoFragment(myInfoFragment);
    }

    public void inject(MyItemsFragment myItemsFragment) {
        injectMyItemsFragment(myItemsFragment);
    }

    public void inject(MyMealsFragment myMealsFragment) {
        injectMyMealsFragment(myMealsFragment);
    }

    public void inject(MyRecipesFragment myRecipesFragment) {
        injectMyRecipesFragment(myRecipesFragment);
    }

    public void inject(NetEnergyGoalDialogFragment netEnergyGoalDialogFragment) {
        injectNetEnergyGoalDialogFragment(netEnergyGoalDialogFragment);
    }

    public void inject(NotifyRequestMenuDialogFragment notifyRequestMenuDialogFragment) {
        injectNotifyRequestMenuDialogFragment(notifyRequestMenuDialogFragment);
    }

    public void inject(NutrientDashboardPresetSelectionFragment nutrientDashboardPresetSelectionFragment) {
        injectNutrientDashboardPresetSelectionFragment(nutrientDashboardPresetSelectionFragment);
    }

    public void inject(NutritionFactsFragmentBase nutritionFactsFragmentBase) {
        injectNutritionFactsFragmentBase(nutritionFactsFragmentBase);
    }

    public void inject(NewNutritionFactsFragment newNutritionFactsFragment) {
        injectNewNutritionFactsFragment(newNutritionFactsFragment);
    }

    public void inject(NotificationInboxFragment notificationInboxFragment) {
        injectNotificationInboxFragment(notificationInboxFragment);
    }

    public void inject(LegacyWeightPickerFragment legacyWeightPickerFragment) {
        injectLegacyWeightPickerFragment(legacyWeightPickerFragment);
    }

    public void inject(LikesListFragment likesListFragment) {
        injectLikesListFragment(likesListFragment);
    }

    public void inject(LocalFoodSearchFragment localFoodSearchFragment) {
        injectLocalFoodSearchFragment(localFoodSearchFragment);
    }

    public void inject(LocalFoodSearchFragmentV2 localFoodSearchFragmentV2) {
        injectLocalFoodSearchFragmentV2(localFoodSearchFragmentV2);
    }

    public void inject(LoginPleaseWaitFragment loginPleaseWaitFragment) {
        injectLoginPleaseWaitFragment(loginPleaseWaitFragment);
    }

    public void inject(LoginSignInUpButtonsFragment loginSignInUpButtonsFragment) {
        injectLoginSignInUpButtonsFragment(loginSignInUpButtonsFragment);
    }

    public void inject(LoginUserPassFragment loginUserPassFragment) {
        injectLoginUserPassFragment(loginUserPassFragment);
    }

    public void inject(OnlineFoodSearchFragment onlineFoodSearchFragment) {
        injectOnlineFoodSearchFragment(onlineFoodSearchFragment);
    }

    public void inject(OurOtherAppsFragment ourOtherAppsFragment) {
        injectOurOtherAppsFragment(ourOtherAppsFragment);
    }

    public void inject(PinCodeDialogFragment pinCodeDialogFragment) {
        injectPinCodeDialogFragment(pinCodeDialogFragment);
    }

    public void inject(PremiumUpsellFragment premiumUpsellFragment) {
        injectPremiumUpsellFragment(premiumUpsellFragment);
    }

    public void inject(PremiumUpsellWebFragment premiumUpsellWebFragment) {
        injectPremiumUpsellWebFragment(premiumUpsellWebFragment);
    }

    public void inject(ProfileFragment profileFragment) {
        injectProfileFragment(profileFragment);
    }

    public void inject(ProgressEntryLongPressDialogFragment progressEntryLongPressDialogFragment) {
        injectProgressEntryLongPressDialogFragment(progressEntryLongPressDialogFragment);
    }

    public void inject(QuickAddCaloriesDialogFragment quickAddCaloriesDialogFragment) {
        injectQuickAddCaloriesDialogFragment(quickAddCaloriesDialogFragment);
    }

    public void inject(RecipeDetailsFragment recipeDetailsFragment) {
        injectRecipeDetailsFragment(recipeDetailsFragment);
    }

    public void inject(RemindersFragment remindersFragment) {
        injectRemindersFragment(remindersFragment);
    }

    public void inject(SearchCategoryDialog searchCategoryDialog) {
        injectSearchCategoryDialog(searchCategoryDialog);
    }

    public void inject(SearchViewItemContextualDialog searchViewItemContextualDialog) {
        injectSearchViewItemContextualDialog(searchViewItemContextualDialog);
    }

    public void inject(SettingsListFragment settingsListFragment) {
        injectSettingsListFragment(settingsListFragment);
    }

    public void inject(SignUpActivityLevelFragment signUpActivityLevelFragment) {
        injectSignUpActivityLevelFragment(signUpActivityLevelFragment);
    }

    public void inject(SignUpCongratsFragment signUpCongratsFragment) {
        injectSignUpCongratsFragment(signUpCongratsFragment);
    }

    public void inject(SignUpFragmentBase signUpFragmentBase) {
        injectSignUpFragmentBase(signUpFragmentBase);
    }

    public void inject(SignUpGenderAgeFragment signUpGenderAgeFragment) {
        injectSignUpGenderAgeFragment(signUpGenderAgeFragment);
    }

    public void inject(SignUpGoalTypeFragment signUpGoalTypeFragment) {
        injectSignUpGoalTypeFragment(signUpGoalTypeFragment);
    }

    public void inject(SignUpHeightDialogFragment signUpHeightDialogFragment) {
        injectSignUpHeightDialogFragment(signUpHeightDialogFragment);
    }

    public void inject(SignUpMarketingOptInFragment signUpMarketingOptInFragment) {
        injectSignUpMarketingOptInFragment(signUpMarketingOptInFragment);
    }

    public void inject(SignUpUsernamePasswordEmailFragment signUpUsernamePasswordEmailFragment) {
        injectSignUpUsernamePasswordEmailFragment(signUpUsernamePasswordEmailFragment);
    }

    public void inject(SignUpWeightHeightFragment signUpWeightHeightFragment) {
        injectSignUpWeightHeightFragment(signUpWeightHeightFragment);
    }

    public void inject(SharingAndPrivacySettingsListFragment sharingAndPrivacySettingsListFragment) {
        injectSharingAndPrivacySettingsListFragment(sharingAndPrivacySettingsListFragment);
    }

    public void inject(SortOrderDialog sortOrderDialog) {
        injectSortOrderDialog(sortOrderDialog);
    }

    public void inject(StepsSettingsListFragment stepsSettingsListFragment) {
        injectStepsSettingsListFragment(stepsSettingsListFragment);
    }

    public void inject(SubscriptionStatusFragment subscriptionStatusFragment) {
        injectSubscriptionStatusFragment(subscriptionStatusFragment);
    }

    public void inject(SignUpWeeklyWeightGoalFragment signUpWeeklyWeightGoalFragment) {
        injectSignUpWeeklyWeightGoalFragment(signUpWeeklyWeightGoalFragment);
    }

    public void inject(SignUpWeightDialogFragment signUpWeightDialogFragment) {
        injectSignUpWeightDialogFragment(signUpWeightDialogFragment);
    }

    public void inject(UnitsDialogFragment unitsDialogFragment) {
        injectUnitsDialogFragment(unitsDialogFragment);
    }

    public void inject(UpdateGoalsCompleteFragment updateGoalsCompleteFragment) {
        injectUpdateGoalsCompleteFragment(updateGoalsCompleteFragment);
    }

    public void inject(UpdateGoalsFragment updateGoalsFragment) {
        injectUpdateGoalsFragment(updateGoalsFragment);
    }

    public void inject(UserDiaryFragment userDiaryFragment) {
        injectUserDiaryFragment(userDiaryFragment);
    }

    public void inject(WalkthroughFoodSearchFragment walkthroughFoodSearchFragment) {
        injectWalkthroughFoodSearchFragment(walkthroughFoodSearchFragment);
    }

    public void inject(WeeklyNutritionSettingsListFragment weeklyNutritionSettingsListFragment) {
        injectWeeklyNutritionSettingsListFragment(weeklyNutritionSettingsListFragment);
    }

    public void inject(WeightDialogFragment weightDialogFragment) {
        injectWeightDialogFragment(weightDialogFragment);
    }

    public void inject(WeightGoalDialogFragment weightGoalDialogFragment) {
        injectWeightGoalDialogFragment(weightGoalDialogFragment);
    }

    public void inject(XPromoInterstitialFragment xPromoInterstitialFragment) {
        injectXPromoInterstitialFragment(xPromoInterstitialFragment);
    }

    public void inject(FriendsListFragment friendsListFragment) {
        injectFriendsListFragment(friendsListFragment);
    }

    public void inject(FriendRequestsFragment friendRequestsFragment) {
        injectFriendRequestsFragment(friendRequestsFragment);
    }

    public void inject(PermissionsFragment permissionsFragment) {
        injectPermissionsFragment(permissionsFragment);
    }

    public void inject(AnimatedOnboardingFragment animatedOnboardingFragment) {
        injectAnimatedOnboardingFragment(animatedOnboardingFragment);
    }

    public void inject(WelcomeScreenFragment welcomeScreenFragment) {
        injectWelcomeScreenFragment(welcomeScreenFragment);
    }

    public void inject(CaloriePieLegend caloriePieLegend) {
        injectCaloriePieLegend(caloriePieLegend);
    }

    public void inject(CustomBarChart customBarChart) {
        injectCustomBarChart(customBarChart);
    }

    public void inject(CustomPieChart customPieChart) {
        injectCustomPieChart(customPieChart);
    }

    public void inject(IngredientsContainer ingredientsContainer) {
        injectIngredientsContainer(ingredientsContainer);
    }

    public void inject(LeftDrawerLayout leftDrawerLayout) {
        injectLeftDrawerLayout(leftDrawerLayout);
    }

    public void inject(LeftDrawerMenu leftDrawerMenu) {
        injectLeftDrawerMenu(leftDrawerMenu);
    }

    public void inject(MenusListView menusListView) {
        injectMenusListView(menusListView);
    }

    public void inject(MiniFoodList miniFoodList) {
        injectMiniFoodList(miniFoodList);
    }

    public void inject(VenuesListView venuesListView) {
        injectVenuesListView(venuesListView);
    }

    public void inject(AddExerciseDeepLinkMixin addExerciseDeepLinkMixin) {
        injectAddExerciseDeepLinkMixin(addExerciseDeepLinkMixin);
    }

    public void inject(AddFoodDeepLinkMixin addFoodDeepLinkMixin) {
        injectAddFoodDeepLinkMixin(addFoodDeepLinkMixin);
    }

    public void inject(AppIndexerMixinBase appIndexerMixinBase) {
        injectAppIndexerMixinBase(appIndexerMixinBase);
    }

    public void inject(BarcodeMultiAddMixin barcodeMultiAddMixin) {
        injectBarcodeMultiAddMixin(barcodeMultiAddMixin);
    }

    public void inject(BottomBarMixin bottomBarMixin) {
        injectBottomBarMixin(bottomBarMixin);
    }

    public void inject(ChallengesMixin challengesMixin) {
        injectChallengesMixin(challengesMixin);
    }

    public void inject(DeepLinkMixinBase deepLinkMixinBase) {
        injectDeepLinkMixinBase(deepLinkMixinBase);
    }

    public void inject(FoodEditorMixin foodEditorMixin) {
        injectFoodEditorMixin(foodEditorMixin);
    }

    public void inject(GetRecipeV2Mixin getRecipeV2Mixin) {
        injectGetRecipeV2Mixin(getRecipeV2Mixin);
    }

    public void inject(MealEditorMixin mealEditorMixin) {
        injectMealEditorMixin(mealEditorMixin);
    }

    public void inject(MealFoodLoaderMixin mealFoodLoaderMixin) {
        injectMealFoodLoaderMixin(mealFoodLoaderMixin);
    }

    public void inject(MealIngredientMixin mealIngredientMixin) {
        injectMealIngredientMixin(mealIngredientMixin);
    }

    public void inject(MenuItemEditorMixin menuItemEditorMixin) {
        injectMenuItemEditorMixin(menuItemEditorMixin);
    }

    public void inject(MultiAddFoodEditorMixin multiAddFoodEditorMixin) {
        injectMultiAddFoodEditorMixin(multiAddFoodEditorMixin);
    }

    public void inject(SharedMealViewerMixin sharedMealViewerMixin) {
        injectSharedMealViewerMixin(sharedMealViewerMixin);
    }

    public void inject(SendVerificationEmailMixin sendVerificationEmailMixin) {
        injectSendVerificationEmailMixin(sendVerificationEmailMixin);
    }

    public void inject(VenueDeepLinkMixin venueDeepLinkMixin) {
        injectVenueDeepLinkMixin(venueDeepLinkMixin);
    }

    public void inject(FoodFeedbackOptionsMixin foodFeedbackOptionsMixin) {
        injectFoodFeedbackOptionsMixin(foodFeedbackOptionsMixin);
    }

    public void inject(FloatingButtonMixin floatingButtonMixin) {
        injectFloatingButtonMixin(floatingButtonMixin);
    }

    public void inject(MfpWebView mfpWebView) {
        injectMfpWebView(mfpWebView);
    }

    public void inject(MyItemsTask myItemsTask) {
        injectMyItemsTask(myItemsTask);
    }

    public void inject(OnlineDataTask onlineDataTask) {
        injectOnlineDataTask(onlineDataTask);
    }

    public void inject(OfflineDataTask offlineDataTask) {
        injectOfflineDataTask(offlineDataTask);
    }

    public void inject(ExploreDataTask exploreDataTask) {
        injectExploreDataTask(exploreDataTask);
    }

    public void inject(MyFitnessPalApp myFitnessPalApp) {
        injectMyFitnessPalApp(myFitnessPalApp);
    }

    public void inject(UserV1 userV1) {
        injectUserV1(userV1);
    }

    public void inject(UserV1NutrientGoals userV1NutrientGoals) {
        injectUserV1NutrientGoals(userV1NutrientGoals);
    }

    public void inject(SessionDBAdapter sessionDBAdapter) {
        injectSessionDBAdapter(sessionDBAdapter);
    }

    public void inject(SynchronizationRequest synchronizationRequest) {
        injectSynchronizationRequest(synchronizationRequest);
    }

    public void inject(SynchronizationResponse synchronizationResponse) {
        injectSynchronizationResponse(synchronizationResponse);
    }

    public void inject(BinaryResponse binaryResponse) {
        injectBinaryResponse(binaryResponse);
    }

    public void inject(ApiRequestPacketImpl apiRequestPacketImpl) {
        injectApiRequestPacketImpl(apiRequestPacketImpl);
    }

    public void inject(EmailUniquenessCheckRequestPacket emailUniquenessCheckRequestPacket) {
        injectEmailUniquenessCheckRequestPacket(emailUniquenessCheckRequestPacket);
    }

    public void inject(MfpUiComponentDelegate mfpUiComponentDelegate) {
        injectMfpUiComponentDelegate(mfpUiComponentDelegate);
    }

    public void inject(NutritionDetailsDelegate nutritionDetailsDelegate) {
        injectNutritionDetailsDelegate(nutritionDetailsDelegate);
    }

    public void inject(MfpSyncV2OpDelegate mfpSyncV2OpDelegate) {
        injectMfpSyncV2OpDelegate(mfpSyncV2OpDelegate);
    }

    public void inject(DiaryAdapter diaryAdapter) {
        injectDiaryAdapter(diaryAdapter);
    }

    public void inject(DiaryLandscapeAdapter diaryLandscapeAdapter) {
        injectDiaryLandscapeAdapter(diaryLandscapeAdapter);
    }

    public void inject(SearchCategoryItemAdapter searchCategoryItemAdapter) {
        injectSearchCategoryItemAdapter(searchCategoryItemAdapter);
    }

    public void inject(DiaryDay diaryDay) {
        injectDiaryDay(diaryDay);
    }

    public void inject(InAppNotificationService inAppNotificationService) {
        injectInAppNotificationService(inAppNotificationService);
    }

    public void inject(MFPFirebaseMessagingService mFPFirebaseMessagingService) {
        injectMFPFirebaseMessagingService(mFPFirebaseMessagingService);
    }

    public void inject(MfpGearMessageBridge mfpGearMessageBridge) {
        injectMfpGearMessageBridge(mfpGearMessageBridge);
    }

    public void inject(MfpNotificationActionService mfpNotificationActionService) {
        injectMfpNotificationActionService(mfpNotificationActionService);
    }

    public void inject(MPFAppWidgetProvider mPFAppWidgetProvider) {
        injectMPFAppWidgetProvider(mPFAppWidgetProvider);
    }

    public void inject(ProgressViewModel progressViewModel) {
        injectProgressViewModel(progressViewModel);
    }

    public void inject(StatusUpdateObject statusUpdateObject) {
        injectStatusUpdateObject(statusUpdateObject);
    }

    public void inject(UpdateWeightProxy updateWeightProxy) {
        injectUpdateWeightProxy(updateWeightProxy);
    }

    public void inject(NotificationInvokerService notificationInvokerService) {
        injectNotificationInvokerService(notificationInvokerService);
    }

    public void inject(MeAnalytics meAnalytics) {
        injectMeAnalytics(meAnalytics);
    }

    public void inject(ExploreAnalytics exploreAnalytics) {
        injectExploreAnalytics(exploreAnalytics);
    }

    public OkHttpClient httpClient() {
        return (OkHttpClient) this.provideHttpClientProvider.get();
    }

    public Lazy<UserEnergyService> userEnergyService() {
        return DoubleCheck.lazy(this.userEnergyServiceProvider);
    }

    public Lazy<LocalizedStringsUtil> localizedStringsUtil() {
        return DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider);
    }

    public Lazy<LocalSettingsService> localSettingsService() {
        return DoubleCheck.lazy(this.provideSettingsServiceProvider);
    }

    public Lazy<DiaryService> diaryService() {
        return DoubleCheck.lazy(this.providesDiaryServiceProvider);
    }

    public Lazy<Session> session() {
        return DoubleCheck.lazy(this.providesSessionProvider);
    }

    public Lazy<SearchService> searchService() {
        return DoubleCheck.lazy(this.providesSearchServiceProvider);
    }

    public Lazy<BarcodeService> barcodeService() {
        return DoubleCheck.lazy(this.providesBarcodeServiceProvider);
    }

    public Lazy<FoodEditorAnalytics> foodEditorAnalytics() {
        return DoubleCheck.lazy(this.providesFoodEditorAnalyticsProvider);
    }

    public ExerciseService exerciseService() {
        return ApplicationModule_ProvideExerciseServiceFactory.proxyProvideExerciseService(this.applicationModule, (SyncUtil) this.providesSyncUtilProvider.get(), DoubleCheck.lazy(this.providesSessionProvider), this.providesMfpJsonV2ApiProvider, DoubleCheck.lazy(this.providesExerciseMapperProvider), DoubleCheck.lazy(this.provideDatabaseProvider), DoubleCheck.lazy(this.provideStockDatabaseProvider));
    }

    public MfpApiSettings mfpApiSettings() {
        return ApplicationModule_ProvideApiSettingsFactory.proxyProvideApiSettings(this.applicationModule, getNamedSharedPreferences());
    }

    public AuthTokenProvider authTokenProvider() {
        return SessionModule_ProvideAuthTokenProviderFactory.proxyProvideAuthTokenProvider(this.sessionModule, (Context) this.provideAppContextProvider.get(), DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider), DoubleCheck.lazy(this.providesSessionProvider), (AppIndexerBot) this.providesAppIndexerBotProvider.get(), this.providesMfpJsonV2ApiProvider, getLegacyAuthTokenStore(), getNamedString2(), (UUID) this.provideDeviceUUIDProvider.get());
    }

    public AnalyticsService analyticsService() {
        return (AnalyticsService) this.providesAnalyticsServiceProvider.get();
    }

    public PremiumService premiumService() {
        return (PremiumService) this.providesPremiumServiceProvider.get();
    }

    public ConfigService configService() {
        return (ConfigService) this.providesConfigServiceProvider.get();
    }

    public Lazy<FoodFeedbackAnalyticsHelper> foodFeedbackAnalyticsHelper() {
        return DoubleCheck.lazy(this.provideFoodFoodbackAnalyticsHelperProvider);
    }

    public FoodSearchActivityFactory foodSearchRouter() {
        return new FoodSearchActivityFactory((ConfigService) this.providesConfigServiceProvider.get());
    }

    public void inject(BackgroundJobHelperImpl backgroundJobHelperImpl) {
        injectBackgroundJobHelperImpl(backgroundJobHelperImpl);
    }

    public void inject(MfpNotificationActionReceiver mfpNotificationActionReceiver) {
        injectMfpNotificationActionReceiver(mfpNotificationActionReceiver);
    }

    public void inject(NotificationBroadcastReceiver notificationBroadcastReceiver) {
        injectNotificationBroadcastReceiver(notificationBroadcastReceiver);
    }

    public void inject(TimestampPickerMixin timestampPickerMixin) {
        injectTimestampPickerMixin(timestampPickerMixin);
    }

    public void inject(UacfThumbprintAnalyticsCallback uacfThumbprintAnalyticsCallback) {
        injectUacfThumbprintAnalyticsCallback(uacfThumbprintAnalyticsCallback);
    }

    private AboutUs injectAboutUs(AboutUs aboutUs) {
        MfpActivity_MembersInjector.injectAdsSettings(aboutUs, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(aboutUs, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(aboutUs, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(aboutUs, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(aboutUs, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(aboutUs, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(aboutUs, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(aboutUs, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(aboutUs, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(aboutUs, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(aboutUs, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(aboutUs, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(aboutUs, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(aboutUs, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(aboutUs, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(aboutUs, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(aboutUs, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(aboutUs, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(aboutUs, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(aboutUs, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(aboutUs, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(aboutUs, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(aboutUs, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(aboutUs, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(aboutUs, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(aboutUs, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(aboutUs, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(aboutUs, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AboutUs_MembersInjector.injectAdvancedDebuggingUtil(aboutUs, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        return aboutUs;
    }

    private AccountRestrictedActivity injectAccountRestrictedActivity(AccountRestrictedActivity accountRestrictedActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(accountRestrictedActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(accountRestrictedActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(accountRestrictedActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(accountRestrictedActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(accountRestrictedActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(accountRestrictedActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(accountRestrictedActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(accountRestrictedActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(accountRestrictedActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(accountRestrictedActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(accountRestrictedActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(accountRestrictedActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(accountRestrictedActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(accountRestrictedActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(accountRestrictedActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(accountRestrictedActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(accountRestrictedActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(accountRestrictedActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(accountRestrictedActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(accountRestrictedActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(accountRestrictedActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(accountRestrictedActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(accountRestrictedActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(accountRestrictedActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(accountRestrictedActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(accountRestrictedActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(accountRestrictedActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(accountRestrictedActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(accountRestrictedActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(accountRestrictedActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AccountRestrictedActivity_MembersInjector.injectNavigationHelper(accountRestrictedActivity, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        return accountRestrictedActivity;
    }

    private AddExerciseEntry injectAddExerciseEntry(AddExerciseEntry addExerciseEntry) {
        MfpActivity_MembersInjector.injectAdsSettings(addExerciseEntry, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addExerciseEntry, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addExerciseEntry, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addExerciseEntry, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addExerciseEntry, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addExerciseEntry, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addExerciseEntry, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addExerciseEntry, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addExerciseEntry, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addExerciseEntry, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addExerciseEntry, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addExerciseEntry, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addExerciseEntry, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addExerciseEntry, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addExerciseEntry, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addExerciseEntry, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addExerciseEntry, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addExerciseEntry, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addExerciseEntry, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addExerciseEntry, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addExerciseEntry, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addExerciseEntry, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addExerciseEntry, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addExerciseEntry, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addExerciseEntry, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addExerciseEntry, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addExerciseEntry, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addExerciseEntry, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddExerciseEntry_MembersInjector.injectConfigService(addExerciseEntry, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AddExerciseEntry_MembersInjector.injectUserEnergyService(addExerciseEntry, DoubleCheck.lazy(this.userEnergyServiceProvider));
        AddExerciseEntry_MembersInjector.injectUserWeightService(addExerciseEntry, DoubleCheck.lazy(this.userWeightServiceProvider));
        AddExerciseEntry_MembersInjector.injectExerciseStringService(addExerciseEntry, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        AddExerciseEntry_MembersInjector.injectLocalizedStringsUtil(addExerciseEntry, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        AddExerciseEntry_MembersInjector.injectActionTrackingService(addExerciseEntry, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AddExerciseEntry_MembersInjector.injectDiaryService(addExerciseEntry, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        AddExerciseEntry_MembersInjector.injectAppGalleryService(addExerciseEntry, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        AddExerciseEntry_MembersInjector.injectIdService(addExerciseEntry, DoubleCheck.lazy(this.providesIdServiceProvider));
        AddExerciseEntry_MembersInjector.injectXpromoSettings(addExerciseEntry, DoubleCheck.lazy(this.xPromoSettingsProvider));
        AddExerciseEntry_MembersInjector.injectDbConnectionManager(addExerciseEntry, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return addExerciseEntry;
    }

    private AddFoodSummaryView injectAddFoodSummaryView(AddFoodSummaryView addFoodSummaryView) {
        MfpActivity_MembersInjector.injectAdsSettings(addFoodSummaryView, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFoodSummaryView, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFoodSummaryView, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFoodSummaryView, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFoodSummaryView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFoodSummaryView, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFoodSummaryView, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFoodSummaryView, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFoodSummaryView, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFoodSummaryView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFoodSummaryView, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFoodSummaryView, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFoodSummaryView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFoodSummaryView, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFoodSummaryView, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFoodSummaryView, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFoodSummaryView, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFoodSummaryView, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFoodSummaryView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFoodSummaryView, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFoodSummaryView, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFoodSummaryView, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFoodSummaryView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFoodSummaryView, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFoodSummaryView, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFoodSummaryView, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFoodSummaryView, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFoodSummaryView, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFoodSummaryView_MembersInjector.injectUserEnergyService(addFoodSummaryView, DoubleCheck.lazy(this.userEnergyServiceProvider));
        AddFoodSummaryView_MembersInjector.injectMealHelperUtil(addFoodSummaryView, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        AddFoodSummaryView_MembersInjector.injectFoodService(addFoodSummaryView, DoubleCheck.lazy(this.provideFoodServiceProvider));
        AddFoodSummaryView_MembersInjector.injectImageService(addFoodSummaryView, DoubleCheck.lazy(this.providesImageServiceProvider));
        AddFoodSummaryView_MembersInjector.injectDiaryService(addFoodSummaryView, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        AddFoodSummaryView_MembersInjector.injectActionTrackingService(addFoodSummaryView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AddFoodSummaryView_MembersInjector.injectLocalizedStringsUtil(addFoodSummaryView, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        AddFoodSummaryView_MembersInjector.injectConfigService(addFoodSummaryView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AddFoodSummaryView_MembersInjector.injectMultiAddFoodHelperLazy(addFoodSummaryView, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        AddFoodSummaryView_MembersInjector.injectSearchService(addFoodSummaryView, DoubleCheck.lazy(this.providesSearchServiceProvider));
        AddFoodSummaryView_MembersInjector.injectAnalyticsServiceLazy(addFoodSummaryView, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AddFoodSummaryView_MembersInjector.injectLocalSettingsService(addFoodSummaryView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AddFoodSummaryView_MembersInjector.injectCountryService(addFoodSummaryView, DoubleCheck.lazy(this.providesCountryServiceProvider));
        AddFoodSummaryView_MembersInjector.injectFoodFeedbackAnalyticsHelper(addFoodSummaryView, DoubleCheck.lazy(this.provideFoodFoodbackAnalyticsHelperProvider));
        return addFoodSummaryView;
    }

    private AddFoodSummaryViewV2 injectAddFoodSummaryViewV2(AddFoodSummaryViewV2 addFoodSummaryViewV2) {
        MfpActivity_MembersInjector.injectAdsSettings(addFoodSummaryViewV2, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFoodSummaryViewV2, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFoodSummaryViewV2, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFoodSummaryViewV2, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectFoodMapper(addFoodSummaryViewV2, getFoodMapper());
        AddFoodSummaryViewV2_MembersInjector.injectUserEnergyService(addFoodSummaryViewV2, DoubleCheck.lazy(this.userEnergyServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectFoodService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideFoodServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectDiaryService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectActionTrackingService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectLocalizedStringsUtil(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        AddFoodSummaryViewV2_MembersInjector.injectConfigService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectCountryService(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesCountryServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectMultiAddFoodHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        AddFoodSummaryViewV2_MembersInjector.injectAppIndexerBot(addFoodSummaryViewV2, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        AddFoodSummaryViewV2_MembersInjector.injectLocalSettingsService(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AddFoodSummaryViewV2_MembersInjector.injectFoodFeedbackAnalyticsHelper(addFoodSummaryViewV2, DoubleCheck.lazy(this.provideFoodFoodbackAnalyticsHelperProvider));
        return addFoodSummaryViewV2;
    }

    private AddFriendsContacts injectAddFriendsContacts(AddFriendsContacts addFriendsContacts) {
        MfpActivity_MembersInjector.injectAdsSettings(addFriendsContacts, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFriendsContacts, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFriendsContacts, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFriendsContacts, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFriendsContacts, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFriendsContacts, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFriendsContacts, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFriendsContacts, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFriendsContacts, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFriendsContacts, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFriendsContacts, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFriendsContacts, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFriendsContacts, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFriendsContacts, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFriendsContacts, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFriendsContacts, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFriendsContacts, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFriendsContacts, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFriendsContacts, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFriendsContacts, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFriendsContacts, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFriendsContacts, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFriendsContacts, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFriendsContacts, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFriendsContacts, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFriendsContacts, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFriendsContacts, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFriendsContacts, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFriendsContacts_MembersInjector.injectContactsService(addFriendsContacts, DoubleCheck.lazy(this.contactsOnMfpServiceProvider));
        AddFriendsContacts_MembersInjector.injectActionTrackingService(addFriendsContacts, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        return addFriendsContacts;
    }

    private AddFriendsFacebook injectAddFriendsFacebook(AddFriendsFacebook addFriendsFacebook) {
        MfpActivity_MembersInjector.injectAdsSettings(addFriendsFacebook, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFriendsFacebook, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFriendsFacebook, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFriendsFacebook, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFriendsFacebook, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFriendsFacebook, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFriendsFacebook, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFriendsFacebook, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFriendsFacebook, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFriendsFacebook, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFriendsFacebook, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFriendsFacebook, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFriendsFacebook, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFriendsFacebook, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFriendsFacebook, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFriendsFacebook, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFriendsFacebook, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFriendsFacebook, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFriendsFacebook, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFriendsFacebook, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFriendsFacebook, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFriendsFacebook, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFriendsFacebook, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFriendsFacebook, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFriendsFacebook, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFriendsFacebook, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFriendsFacebook, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFriendsFacebook, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFriendsFacebook_MembersInjector.injectFacebookFriendService(addFriendsFacebook, DoubleCheck.lazy(this.facebookFriendOnMfpServiceProvider));
        return addFriendsFacebook;
    }

    private AddFriendsParent injectAddFriendsParent(AddFriendsParent addFriendsParent) {
        MfpActivity_MembersInjector.injectAdsSettings(addFriendsParent, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFriendsParent, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFriendsParent, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFriendsParent, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFriendsParent, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFriendsParent, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFriendsParent, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFriendsParent, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFriendsParent, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFriendsParent, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFriendsParent, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFriendsParent, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFriendsParent, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFriendsParent, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFriendsParent, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFriendsParent, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFriendsParent, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFriendsParent, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFriendsParent, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFriendsParent, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFriendsParent, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFriendsParent, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFriendsParent, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFriendsParent, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFriendsParent, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFriendsParent, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFriendsParent, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFriendsParent, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFriendsParent_MembersInjector.injectFacebookService(addFriendsParent, DoubleCheck.lazy(this.providesFacebookServiceProvider));
        return addFriendsParent;
    }

    private AddFriendsSplash injectAddFriendsSplash(AddFriendsSplash addFriendsSplash) {
        MfpActivity_MembersInjector.injectAdsSettings(addFriendsSplash, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFriendsSplash, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFriendsSplash, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFriendsSplash, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFriendsSplash, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFriendsSplash, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFriendsSplash, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFriendsSplash, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFriendsSplash, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFriendsSplash, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFriendsSplash, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFriendsSplash, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFriendsSplash, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFriendsSplash, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFriendsSplash, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFriendsSplash, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFriendsSplash, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFriendsSplash, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFriendsSplash, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFriendsSplash, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFriendsSplash, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFriendsSplash, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFriendsSplash, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFriendsSplash, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFriendsSplash, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFriendsSplash, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFriendsSplash, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFriendsSplash, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFriendsSplash_MembersInjector.injectLocalSettingsService(addFriendsSplash, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AddFriendsSplash_MembersInjector.injectGlobalSettingsService(addFriendsSplash, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        return addFriendsSplash;
    }

    private AddFood injectAddFood(AddFood addFood) {
        MfpActivity_MembersInjector.injectAdsSettings(addFood, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addFood, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addFood, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addFood, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addFood, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addFood, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addFood, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addFood, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addFood, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addFood, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addFood, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addFood, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addFood, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addFood, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addFood, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addFood, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addFood, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addFood, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addFood, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addFood, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addFood, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addFood, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addFood, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addFood, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addFood, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addFood, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addFood, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addFood, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddFood_MembersInjector.injectUserEnergyService(addFood, DoubleCheck.lazy(this.userEnergyServiceProvider));
        AddFood_MembersInjector.injectActionTrackingService(addFood, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AddFood_MembersInjector.injectCountryService(addFood, DoubleCheck.lazy(this.providesCountryServiceProvider));
        AddFood_MembersInjector.injectSyncScheduler(addFood, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        AddFood_MembersInjector.injectInputMethodManagerHelper(addFood, DoubleCheck.lazy(this.inputMethodManagerHelperProvider));
        AddFood_MembersInjector.injectFoodToFoodObject(addFood, getFoodMapper());
        AddFood_MembersInjector.injectFoodObjectToFoodV2(addFood, ApplicationModule_ProvidesMfpFoodMapperFactory.proxyProvidesMfpFoodMapper(this.applicationModule));
        AddFood_MembersInjector.injectDiaryService(addFood, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        AddFood_MembersInjector.injectAppSettings(addFood, DoubleCheck.lazy(this.appSettingsProvider));
        AddFood_MembersInjector.injectDbConnectionManager(addFood, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        AddFood_MembersInjector.injectFoodSearchAnalyticsHelper(addFood, DoubleCheck.lazy(this.providesFoodSearchAnalyticsHelperProvider));
        return addFood;
    }

    private AnalyticsEventsActivity injectAnalyticsEventsActivity(AnalyticsEventsActivity analyticsEventsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(analyticsEventsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(analyticsEventsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(analyticsEventsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(analyticsEventsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(analyticsEventsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(analyticsEventsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(analyticsEventsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(analyticsEventsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(analyticsEventsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(analyticsEventsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(analyticsEventsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(analyticsEventsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(analyticsEventsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(analyticsEventsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(analyticsEventsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(analyticsEventsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(analyticsEventsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(analyticsEventsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(analyticsEventsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(analyticsEventsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(analyticsEventsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(analyticsEventsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(analyticsEventsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(analyticsEventsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(analyticsEventsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(analyticsEventsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(analyticsEventsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(analyticsEventsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AnalyticsEventsActivity_MembersInjector.injectAnalyticsService(analyticsEventsActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return analyticsEventsActivity;
    }

    private AppGalleryActivity injectAppGalleryActivity(AppGalleryActivity appGalleryActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(appGalleryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(appGalleryActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(appGalleryActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(appGalleryActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(appGalleryActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(appGalleryActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(appGalleryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(appGalleryActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(appGalleryActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(appGalleryActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(appGalleryActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(appGalleryActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(appGalleryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(appGalleryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(appGalleryActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(appGalleryActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(appGalleryActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(appGalleryActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(appGalleryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(appGalleryActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(appGalleryActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(appGalleryActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(appGalleryActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(appGalleryActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(appGalleryActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(appGalleryActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(appGalleryActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(appGalleryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AppGalleryActivity_MembersInjector.injectAppGalleryService(appGalleryActivity, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        return appGalleryActivity;
    }

    private AddWeightActivity injectAddWeightActivity(AddWeightActivity addWeightActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(addWeightActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(addWeightActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(addWeightActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(addWeightActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(addWeightActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(addWeightActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(addWeightActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(addWeightActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(addWeightActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(addWeightActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(addWeightActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(addWeightActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(addWeightActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(addWeightActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(addWeightActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(addWeightActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(addWeightActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(addWeightActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(addWeightActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(addWeightActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(addWeightActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(addWeightActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(addWeightActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(addWeightActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(addWeightActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(addWeightActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(addWeightActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(addWeightActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AddWeightActivity_MembersInjector.injectConfigService(addWeightActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AddWeightActivity_MembersInjector.injectLocalSettingsService(addWeightActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AddWeightActivity_MembersInjector.injectProgressCongrats(addWeightActivity, DoubleCheck.lazy(this.provideProgressCongratsServiceProvider));
        AddWeightActivity_MembersInjector.injectUserWeightService(addWeightActivity, DoubleCheck.lazy(this.userWeightServiceProvider));
        AddWeightActivity_MembersInjector.injectProgressAnalytics(addWeightActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        AddWeightActivity_MembersInjector.injectPremiumService(addWeightActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        AddWeightActivity_MembersInjector.injectUserApplicationSettingsService(addWeightActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        return addWeightActivity;
    }

    private BarcodeMatchActivity injectBarcodeMatchActivity(BarcodeMatchActivity barcodeMatchActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(barcodeMatchActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(barcodeMatchActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(barcodeMatchActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(barcodeMatchActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(barcodeMatchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(barcodeMatchActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(barcodeMatchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(barcodeMatchActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(barcodeMatchActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(barcodeMatchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(barcodeMatchActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(barcodeMatchActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(barcodeMatchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(barcodeMatchActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(barcodeMatchActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(barcodeMatchActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(barcodeMatchActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(barcodeMatchActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(barcodeMatchActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(barcodeMatchActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(barcodeMatchActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(barcodeMatchActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(barcodeMatchActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(barcodeMatchActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(barcodeMatchActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(barcodeMatchActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(barcodeMatchActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(barcodeMatchActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        BarcodeMatchActivity_MembersInjector.injectSearchService(barcodeMatchActivity, DoubleCheck.lazy(this.providesSearchServiceProvider));
        BarcodeMatchActivity_MembersInjector.injectUserEnergyService(barcodeMatchActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        BarcodeMatchActivity_MembersInjector.injectMealHelperUtil(barcodeMatchActivity, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        return barcodeMatchActivity;
    }

    private BarcodeScannerActivity injectBarcodeScannerActivity(BarcodeScannerActivity barcodeScannerActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(barcodeScannerActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(barcodeScannerActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(barcodeScannerActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(barcodeScannerActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(barcodeScannerActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(barcodeScannerActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(barcodeScannerActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(barcodeScannerActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(barcodeScannerActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(barcodeScannerActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(barcodeScannerActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(barcodeScannerActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(barcodeScannerActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(barcodeScannerActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(barcodeScannerActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(barcodeScannerActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(barcodeScannerActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(barcodeScannerActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(barcodeScannerActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(barcodeScannerActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(barcodeScannerActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(barcodeScannerActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(barcodeScannerActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(barcodeScannerActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(barcodeScannerActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(barcodeScannerActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(barcodeScannerActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(barcodeScannerActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        BarcodeScannerActivity_MembersInjector.injectAnalyticsService(barcodeScannerActivity, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        BarcodeScannerActivity_MembersInjector.injectBarcodeService(barcodeScannerActivity, DoubleCheck.lazy(this.providesBarcodeServiceProvider));
        BarcodeScannerActivity_MembersInjector.injectMfpFoodMapper(barcodeScannerActivity, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        return barcodeScannerActivity;
    }

    private BlogActivity injectBlogActivity(BlogActivity blogActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(blogActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(blogActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(blogActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(blogActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(blogActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(blogActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(blogActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(blogActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(blogActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(blogActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(blogActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(blogActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(blogActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(blogActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(blogActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(blogActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(blogActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(blogActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(blogActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(blogActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(blogActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(blogActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(blogActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(blogActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(blogActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(blogActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(blogActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(blogActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return blogActivity;
    }

    private CalorieAdjustmentExplanationView injectCalorieAdjustmentExplanationView(CalorieAdjustmentExplanationView calorieAdjustmentExplanationView) {
        MfpActivity_MembersInjector.injectAdsSettings(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(calorieAdjustmentExplanationView, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(calorieAdjustmentExplanationView, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(calorieAdjustmentExplanationView, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CalorieAdjustmentExplanationView_MembersInjector.injectUserEnergyService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.userEnergyServiceProvider));
        CalorieAdjustmentExplanationView_MembersInjector.injectNutrientGoalService(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        CalorieAdjustmentExplanationView_MembersInjector.injectLocalizedStringsUtil(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        CalorieAdjustmentExplanationView_MembersInjector.injectSession(calorieAdjustmentExplanationView, DoubleCheck.lazy(this.providesSessionProvider));
        return calorieAdjustmentExplanationView;
    }

    private CalorieAdjustmentIntro injectCalorieAdjustmentIntro(CalorieAdjustmentIntro calorieAdjustmentIntro) {
        MfpActivity_MembersInjector.injectAdsSettings(calorieAdjustmentIntro, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(calorieAdjustmentIntro, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(calorieAdjustmentIntro, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(calorieAdjustmentIntro, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(calorieAdjustmentIntro, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(calorieAdjustmentIntro, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CalorieAdjustmentIntro_MembersInjector.injectExerciseStringService(calorieAdjustmentIntro, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        CalorieAdjustmentIntro_MembersInjector.injectUserEnergyService(calorieAdjustmentIntro, DoubleCheck.lazy(this.userEnergyServiceProvider));
        CalorieAdjustmentIntro_MembersInjector.injectLocalizedStringsUtil(calorieAdjustmentIntro, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return calorieAdjustmentIntro;
    }

    private ChallengeAchievementActivity injectChallengeAchievementActivity(ChallengeAchievementActivity challengeAchievementActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(challengeAchievementActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(challengeAchievementActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(challengeAchievementActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(challengeAchievementActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(challengeAchievementActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(challengeAchievementActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(challengeAchievementActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(challengeAchievementActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(challengeAchievementActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(challengeAchievementActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(challengeAchievementActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(challengeAchievementActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(challengeAchievementActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(challengeAchievementActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(challengeAchievementActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(challengeAchievementActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(challengeAchievementActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(challengeAchievementActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(challengeAchievementActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(challengeAchievementActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(challengeAchievementActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(challengeAchievementActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(challengeAchievementActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(challengeAchievementActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(challengeAchievementActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(challengeAchievementActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(challengeAchievementActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(challengeAchievementActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ChallengeAchievementActivity_MembersInjector.injectImageService(challengeAchievementActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        ChallengeAchievementActivity_MembersInjector.injectChallengesAnalyticsHelper(challengeAchievementActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return challengeAchievementActivity;
    }

    private ChallengeDetailActivity injectChallengeDetailActivity(ChallengeDetailActivity challengeDetailActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(challengeDetailActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(challengeDetailActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(challengeDetailActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(challengeDetailActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(challengeDetailActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(challengeDetailActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(challengeDetailActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(challengeDetailActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(challengeDetailActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(challengeDetailActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(challengeDetailActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(challengeDetailActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(challengeDetailActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(challengeDetailActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(challengeDetailActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(challengeDetailActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(challengeDetailActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(challengeDetailActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(challengeDetailActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(challengeDetailActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(challengeDetailActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(challengeDetailActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(challengeDetailActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(challengeDetailActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(challengeDetailActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(challengeDetailActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(challengeDetailActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(challengeDetailActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ChallengeDetailActivity_MembersInjector.injectChallengesService(challengeDetailActivity, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        ChallengeDetailActivity_MembersInjector.injectChallengesAnalyticsHelper(challengeDetailActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ChallengeDetailActivity_MembersInjector.injectLocalSettingsService(challengeDetailActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return challengeDetailActivity;
    }

    private ChallengeFriendListActivity injectChallengeFriendListActivity(ChallengeFriendListActivity challengeFriendListActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(challengeFriendListActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(challengeFriendListActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(challengeFriendListActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(challengeFriendListActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(challengeFriendListActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(challengeFriendListActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(challengeFriendListActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(challengeFriendListActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(challengeFriendListActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(challengeFriendListActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(challengeFriendListActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(challengeFriendListActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(challengeFriendListActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(challengeFriendListActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(challengeFriendListActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(challengeFriendListActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(challengeFriendListActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(challengeFriendListActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(challengeFriendListActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(challengeFriendListActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(challengeFriendListActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(challengeFriendListActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(challengeFriendListActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(challengeFriendListActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(challengeFriendListActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(challengeFriendListActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(challengeFriendListActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(challengeFriendListActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ChallengeFriendListActivity_MembersInjector.injectChallengeService(challengeFriendListActivity, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        ChallengeFriendListActivity_MembersInjector.injectImageService(challengeFriendListActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        ChallengeFriendListActivity_MembersInjector.injectChallengesAnalyticsHelper(challengeFriendListActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ChallengeFriendListActivity_MembersInjector.injectDeviceInfo(challengeFriendListActivity, DoubleCheck.lazy(this.providesDeviceInfoProvider));
        return challengeFriendListActivity;
    }

    private ChallengeShareActivity injectChallengeShareActivity(ChallengeShareActivity challengeShareActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(challengeShareActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(challengeShareActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(challengeShareActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(challengeShareActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(challengeShareActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(challengeShareActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(challengeShareActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(challengeShareActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(challengeShareActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(challengeShareActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(challengeShareActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(challengeShareActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(challengeShareActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(challengeShareActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(challengeShareActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(challengeShareActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(challengeShareActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(challengeShareActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(challengeShareActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(challengeShareActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(challengeShareActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(challengeShareActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(challengeShareActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(challengeShareActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(challengeShareActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(challengeShareActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(challengeShareActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(challengeShareActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ChallengeShareActivity_MembersInjector.injectChallengesAnalyticsHelper(challengeShareActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return challengeShareActivity;
    }

    private ChallengesActivity injectChallengesActivity(ChallengesActivity challengesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(challengesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(challengesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(challengesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(challengesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(challengesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(challengesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(challengesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(challengesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(challengesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(challengesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(challengesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(challengesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(challengesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(challengesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(challengesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(challengesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(challengesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(challengesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(challengesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(challengesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(challengesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(challengesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(challengesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(challengesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(challengesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(challengesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(challengesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(challengesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return challengesActivity;
    }

    private CommentsActivity injectCommentsActivity(CommentsActivity commentsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(commentsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(commentsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(commentsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(commentsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(commentsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(commentsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(commentsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(commentsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(commentsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(commentsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(commentsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(commentsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(commentsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(commentsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(commentsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(commentsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(commentsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(commentsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(commentsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(commentsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(commentsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(commentsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(commentsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(commentsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(commentsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(commentsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(commentsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(commentsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CommentsActivity_MembersInjector.injectNewsFeedService(commentsActivity, DoubleCheck.lazy(this.providesNewsFeedServiceProvider));
        CommentsActivity_MembersInjector.injectIdService(commentsActivity, DoubleCheck.lazy(this.providesIdServiceProvider));
        CommentsActivity_MembersInjector.injectNewsFeedAnalyticsHelper(commentsActivity, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        CommentsActivity_MembersInjector.injectImageService(commentsActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        CommentsActivity_MembersInjector.injectConfigService(commentsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        CommentsActivity_MembersInjector.injectPremiumService(commentsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        CommentsActivity_MembersInjector.injectUserApplicationSettingsService(commentsActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        return commentsActivity;
    }

    private CommunityActivity injectCommunityActivity(CommunityActivity communityActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(communityActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(communityActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(communityActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(communityActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(communityActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(communityActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(communityActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(communityActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(communityActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(communityActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(communityActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(communityActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(communityActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(communityActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(communityActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(communityActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(communityActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(communityActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(communityActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(communityActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(communityActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(communityActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(communityActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(communityActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(communityActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(communityActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(communityActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(communityActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return communityActivity;
    }

    private CompleteDiaryActivity injectCompleteDiaryActivity(CompleteDiaryActivity completeDiaryActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(completeDiaryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(completeDiaryActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(completeDiaryActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(completeDiaryActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(completeDiaryActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(completeDiaryActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(completeDiaryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(completeDiaryActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(completeDiaryActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(completeDiaryActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(completeDiaryActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(completeDiaryActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(completeDiaryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(completeDiaryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(completeDiaryActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(completeDiaryActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(completeDiaryActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(completeDiaryActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(completeDiaryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(completeDiaryActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(completeDiaryActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(completeDiaryActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(completeDiaryActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(completeDiaryActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(completeDiaryActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(completeDiaryActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(completeDiaryActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(completeDiaryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectSession(completeDiaryActivity, DoubleCheck.lazy(this.providesSessionProvider));
        CompleteDiaryActivity_MembersInjector.injectUserWeightService(completeDiaryActivity, DoubleCheck.lazy(this.userWeightServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectUserEnergyService(completeDiaryActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectNutrientGoalService(completeDiaryActivity, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectLocalizedStringsUtil(completeDiaryActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        CompleteDiaryActivity_MembersInjector.injectPremiumService(completeDiaryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectAdsSettings(completeDiaryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        CompleteDiaryActivity_MembersInjector.injectAdsAnalyticsHelper(completeDiaryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        CompleteDiaryActivity_MembersInjector.injectLocalSettingsService(completeDiaryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectAnalyticsService(completeDiaryActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectConfigService(completeDiaryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectUserApplicationSettingsService(completeDiaryActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        CompleteDiaryActivity_MembersInjector.injectLocationService(completeDiaryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return completeDiaryActivity;
    }

    private ComposeMessageActivity injectComposeMessageActivity(ComposeMessageActivity composeMessageActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(composeMessageActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(composeMessageActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(composeMessageActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(composeMessageActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(composeMessageActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(composeMessageActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(composeMessageActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(composeMessageActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(composeMessageActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(composeMessageActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(composeMessageActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(composeMessageActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(composeMessageActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(composeMessageActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(composeMessageActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(composeMessageActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(composeMessageActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(composeMessageActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(composeMessageActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(composeMessageActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(composeMessageActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(composeMessageActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(composeMessageActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(composeMessageActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(composeMessageActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(composeMessageActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(composeMessageActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(composeMessageActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ComposeMessageActivity_MembersInjector.injectMessageService(composeMessageActivity, DoubleCheck.lazy(this.providesMessageServiceProvider));
        return composeMessageActivity;
    }

    private ChangePasswordActivity injectChangePasswordActivity(ChangePasswordActivity changePasswordActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(changePasswordActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(changePasswordActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(changePasswordActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(changePasswordActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(changePasswordActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(changePasswordActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(changePasswordActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(changePasswordActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(changePasswordActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(changePasswordActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(changePasswordActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(changePasswordActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(changePasswordActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(changePasswordActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(changePasswordActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(changePasswordActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(changePasswordActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(changePasswordActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(changePasswordActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(changePasswordActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(changePasswordActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(changePasswordActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(changePasswordActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(changePasswordActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(changePasswordActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(changePasswordActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(changePasswordActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(changePasswordActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ChangePasswordActivity_MembersInjector.injectVmFactory(changePasswordActivity, (Factory) this.vMFactoryProvider.get());
        return changePasswordActivity;
    }

    private ConsentsActivity injectConsentsActivity(ConsentsActivity consentsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(consentsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(consentsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(consentsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(consentsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(consentsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(consentsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(consentsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(consentsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(consentsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(consentsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(consentsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(consentsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(consentsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(consentsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(consentsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(consentsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(consentsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(consentsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(consentsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(consentsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(consentsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(consentsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(consentsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(consentsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(consentsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ConsentsActivity_MembersInjector.injectVmFactory(consentsActivity, (Factory) this.vMFactoryProvider.get());
        ConsentsActivity_MembersInjector.injectSignUpModel(consentsActivity, (SignUpModel) this.providesSignUpModelProvider.get());
        ConsentsActivity_MembersInjector.injectLoginModel(consentsActivity, (LoginModel) this.providesLoginModelProvider.get());
        ConsentsActivity_MembersInjector.injectSignUpService(consentsActivity, (SignUpService) this.providesSignUpServiceProvider.get());
        ConsentsActivity_MembersInjector.injectDeleteAccountAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.provideDeleteAccountAnalyticsHelperProvider));
        ConsentsActivity_MembersInjector.injectGdprHelpAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.provideGDPRHelpAnalyticsHelperProvider));
        ConsentsActivity_MembersInjector.injectConsentsAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.provideConsentsAnalyticsHelperProvider));
        ConsentsActivity_MembersInjector.injectUpdatedTermsAnalyticsHelper(consentsActivity, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        return consentsActivity;
    }

    private CreateRecipeManuallyActivity injectCreateRecipeManuallyActivity(CreateRecipeManuallyActivity createRecipeManuallyActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(createRecipeManuallyActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(createRecipeManuallyActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(createRecipeManuallyActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(createRecipeManuallyActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(createRecipeManuallyActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(createRecipeManuallyActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CreateRecipeManuallyActivity_MembersInjector.injectRecipesAnalyticsHelper(createRecipeManuallyActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return createRecipeManuallyActivity;
    }

    private CustomExerciseCaloriesActivity injectCustomExerciseCaloriesActivity(CustomExerciseCaloriesActivity customExerciseCaloriesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(customExerciseCaloriesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(customExerciseCaloriesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(customExerciseCaloriesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(customExerciseCaloriesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CustomExerciseCaloriesActivity_MembersInjector.injectNutrientGoalService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        CustomExerciseCaloriesActivity_MembersInjector.injectUserEnergyService(customExerciseCaloriesActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return customExerciseCaloriesActivity;
    }

    private CustomMealNames injectCustomMealNames(CustomMealNames customMealNames) {
        MfpActivity_MembersInjector.injectAdsSettings(customMealNames, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(customMealNames, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(customMealNames, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(customMealNames, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(customMealNames, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(customMealNames, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(customMealNames, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(customMealNames, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(customMealNames, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(customMealNames, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(customMealNames, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(customMealNames, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(customMealNames, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(customMealNames, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(customMealNames, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(customMealNames, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(customMealNames, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(customMealNames, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(customMealNames, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(customMealNames, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(customMealNames, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(customMealNames, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(customMealNames, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(customMealNames, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(customMealNames, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(customMealNames, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(customMealNames, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(customMealNames, DoubleCheck.lazy(this.provideLocationServiceProvider));
        CustomMealNames_MembersInjector.injectPremiumService(customMealNames, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        return customMealNames;
    }

    private DeleteAccountActivity injectDeleteAccountActivity(DeleteAccountActivity deleteAccountActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(deleteAccountActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(deleteAccountActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(deleteAccountActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(deleteAccountActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(deleteAccountActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(deleteAccountActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(deleteAccountActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(deleteAccountActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(deleteAccountActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(deleteAccountActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(deleteAccountActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(deleteAccountActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(deleteAccountActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(deleteAccountActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(deleteAccountActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(deleteAccountActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(deleteAccountActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(deleteAccountActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(deleteAccountActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(deleteAccountActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(deleteAccountActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(deleteAccountActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(deleteAccountActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(deleteAccountActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(deleteAccountActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(deleteAccountActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(deleteAccountActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(deleteAccountActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        DeleteAccountActivity_MembersInjector.injectLoginModel(deleteAccountActivity, DoubleCheck.lazy(this.providesLoginModelProvider));
        DeleteAccountActivity_MembersInjector.injectSignInService(deleteAccountActivity, DoubleCheck.lazy(this.providesSignInServiceProvider));
        DeleteAccountActivity_MembersInjector.injectDeleteAccountService(deleteAccountActivity, DoubleCheck.lazy(this.provideDeleteAccountServiceProvider));
        DeleteAccountActivity_MembersInjector.injectDeleteAccountAnalyticsHelper(deleteAccountActivity, DoubleCheck.lazy(this.provideDeleteAccountAnalyticsHelperProvider));
        return deleteAccountActivity;
    }

    private Diary injectDiary(Diary diary) {
        MfpActivity_MembersInjector.injectAdsSettings(diary, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(diary, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(diary, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(diary, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(diary, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(diary, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(diary, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(diary, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(diary, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(diary, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(diary, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(diary, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(diary, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(diary, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(diary, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(diary, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(diary, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(diary, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(diary, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(diary, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(diary, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(diary, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(diary, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(diary, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(diary, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(diary, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(diary, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(diary, DoubleCheck.lazy(this.provideLocationServiceProvider));
        Diary_MembersInjector.injectDiaryService(diary, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return diary;
    }

    private DiarySettingsActivity injectDiarySettingsActivity(DiarySettingsActivity diarySettingsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(diarySettingsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(diarySettingsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(diarySettingsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(diarySettingsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(diarySettingsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(diarySettingsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(diarySettingsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(diarySettingsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(diarySettingsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(diarySettingsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(diarySettingsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(diarySettingsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(diarySettingsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(diarySettingsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(diarySettingsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(diarySettingsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(diarySettingsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(diarySettingsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(diarySettingsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(diarySettingsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(diarySettingsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(diarySettingsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(diarySettingsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(diarySettingsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(diarySettingsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(diarySettingsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(diarySettingsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(diarySettingsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return diarySettingsActivity;
    }

    private DisconnectFacebook injectDisconnectFacebook(DisconnectFacebook disconnectFacebook) {
        MfpActivity_MembersInjector.injectAdsSettings(disconnectFacebook, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(disconnectFacebook, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(disconnectFacebook, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(disconnectFacebook, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(disconnectFacebook, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(disconnectFacebook, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(disconnectFacebook, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(disconnectFacebook, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(disconnectFacebook, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(disconnectFacebook, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(disconnectFacebook, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(disconnectFacebook, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(disconnectFacebook, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(disconnectFacebook, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(disconnectFacebook, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(disconnectFacebook, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(disconnectFacebook, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(disconnectFacebook, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(disconnectFacebook, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(disconnectFacebook, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(disconnectFacebook, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(disconnectFacebook, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(disconnectFacebook, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(disconnectFacebook, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(disconnectFacebook, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(disconnectFacebook, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(disconnectFacebook, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(disconnectFacebook, DoubleCheck.lazy(this.provideLocationServiceProvider));
        DisconnectFacebook_MembersInjector.injectFacebookService(disconnectFacebook, DoubleCheck.lazy(this.providesFacebookServiceProvider));
        return disconnectFacebook;
    }

    private DeepLinkRouterActivity injectDeepLinkRouterActivity(DeepLinkRouterActivity deepLinkRouterActivity) {
        DeepLinkRouterActivity_MembersInjector.injectRouter(deepLinkRouterActivity, DoubleCheck.lazy(this.providesDeepLinkRouterProvider));
        DeepLinkRouterActivity_MembersInjector.injectAnalyticsService(deepLinkRouterActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DeepLinkRouterActivity_MembersInjector.injectAppIndexerBot(deepLinkRouterActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        DeepLinkRouterActivity_MembersInjector.injectSession(deepLinkRouterActivity, DoubleCheck.lazy(this.providesSessionProvider));
        DeepLinkRouterActivity_MembersInjector.injectFoodSearchRouter(deepLinkRouterActivity, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return deepLinkRouterActivity;
    }

    private DetailedMessageActivity injectDetailedMessageActivity(DetailedMessageActivity detailedMessageActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(detailedMessageActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(detailedMessageActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(detailedMessageActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(detailedMessageActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(detailedMessageActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(detailedMessageActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(detailedMessageActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(detailedMessageActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(detailedMessageActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(detailedMessageActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(detailedMessageActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(detailedMessageActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(detailedMessageActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(detailedMessageActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(detailedMessageActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(detailedMessageActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(detailedMessageActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(detailedMessageActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(detailedMessageActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(detailedMessageActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(detailedMessageActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(detailedMessageActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(detailedMessageActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(detailedMessageActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(detailedMessageActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(detailedMessageActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(detailedMessageActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(detailedMessageActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        DetailedMessageActivity_MembersInjector.injectMessageService(detailedMessageActivity, DoubleCheck.lazy(this.providesMessageServiceProvider));
        return detailedMessageActivity;
    }

    private EditCardio injectEditCardio(EditCardio editCardio) {
        MfpActivity_MembersInjector.injectAdsSettings(editCardio, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editCardio, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editCardio, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editCardio, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editCardio, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editCardio, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editCardio, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editCardio, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editCardio, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editCardio, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editCardio, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editCardio, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editCardio, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editCardio, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editCardio, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editCardio, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editCardio, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editCardio, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editCardio, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editCardio, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editCardio, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editCardio, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editCardio, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editCardio, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editCardio, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editCardio, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editCardio, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editCardio, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditCardio_MembersInjector.injectUserEnergyService(editCardio, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditCardio_MembersInjector.injectExerciseStringService(editCardio, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        EditCardio_MembersInjector.injectLocalizedStringsUtil(editCardio, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditCardio_MembersInjector.injectSession(editCardio, DoubleCheck.lazy(this.providesSessionProvider));
        EditCardio_MembersInjector.injectDiaryService(editCardio, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return editCardio;
    }

    private EditCardioExercise injectEditCardioExercise(EditCardioExercise editCardioExercise) {
        MfpActivity_MembersInjector.injectAdsSettings(editCardioExercise, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editCardioExercise, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editCardioExercise, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editCardioExercise, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editCardioExercise, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editCardioExercise, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editCardioExercise, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editCardioExercise, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editCardioExercise, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editCardioExercise, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editCardioExercise, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editCardioExercise, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editCardioExercise, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editCardioExercise, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editCardioExercise, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editCardioExercise, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editCardioExercise, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editCardioExercise, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editCardioExercise, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editCardioExercise, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editCardioExercise, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editCardioExercise, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editCardioExercise, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editCardioExercise, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editCardioExercise, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editCardioExercise, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editCardioExercise, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editCardioExercise, DoubleCheck.lazy(this.provideLocationServiceProvider));
        GenericExercise_MembersInjector.injectExerciseService(editCardioExercise, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        GenericExercise_MembersInjector.injectDiaryService(editCardioExercise, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        EditCardioExercise_MembersInjector.injectUserEnergyService(editCardioExercise, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditCardioExercise_MembersInjector.injectLocalizedStringsUtil(editCardioExercise, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return editCardioExercise;
    }

    private EditCustomMacroGoalsActivity injectEditCustomMacroGoalsActivity(EditCustomMacroGoalsActivity editCustomMacroGoalsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editCustomMacroGoalsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editCustomMacroGoalsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editCustomMacroGoalsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditCustomMacroGoalsActivity_MembersInjector.injectLocalizedStringsUtil(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditCustomMacroGoalsActivity_MembersInjector.injectUserEnergyService(editCustomMacroGoalsActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return editCustomMacroGoalsActivity;
    }

    private EditDiaryNoteView injectEditDiaryNoteView(EditDiaryNoteView editDiaryNoteView) {
        MfpActivity_MembersInjector.injectAdsSettings(editDiaryNoteView, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editDiaryNoteView, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editDiaryNoteView, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editDiaryNoteView, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editDiaryNoteView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editDiaryNoteView, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editDiaryNoteView, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editDiaryNoteView, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editDiaryNoteView, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editDiaryNoteView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editDiaryNoteView, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editDiaryNoteView, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editDiaryNoteView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editDiaryNoteView, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editDiaryNoteView, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editDiaryNoteView, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editDiaryNoteView, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editDiaryNoteView, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editDiaryNoteView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editDiaryNoteView, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editDiaryNoteView, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editDiaryNoteView, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editDiaryNoteView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editDiaryNoteView, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editDiaryNoteView, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editDiaryNoteView, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editDiaryNoteView, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editDiaryNoteView, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditDiaryNoteView_MembersInjector.injectSyncScheduler(editDiaryNoteView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        EditDiaryNoteView_MembersInjector.injectDiaryService(editDiaryNoteView, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        EditDiaryNoteView_MembersInjector.injectDbConnectionManager(editDiaryNoteView, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return editDiaryNoteView;
    }

    private EditFood injectEditFood(EditFood editFood) {
        MfpActivity_MembersInjector.injectAdsSettings(editFood, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editFood, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editFood, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editFood, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editFood, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editFood, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editFood, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editFood, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editFood, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editFood, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editFood, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editFood, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editFood, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editFood, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editFood, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editFood, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editFood, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editFood, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editFood, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editFood, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editFood, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editFood, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editFood, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editFood, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editFood, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editFood, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editFood, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editFood, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditFood_MembersInjector.injectUserEnergyService(editFood, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditFood_MembersInjector.injectLocalizedStringsUtil(editFood, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditFood_MembersInjector.injectDbConnectionManager(editFood, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        EditFood_MembersInjector.injectValidator(editFood, ApplicationModule_ProvideServingSizeValidatorFactory.proxyProvideServingSizeValidator(this.applicationModule));
        return editFood;
    }

    private EditProfile injectEditProfile(EditProfile editProfile) {
        MfpActivity_MembersInjector.injectAdsSettings(editProfile, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editProfile, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editProfile, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editProfile, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editProfile, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editProfile, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editProfile, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editProfile, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editProfile, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editProfile, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editProfile, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editProfile, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editProfile, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editProfile, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editProfile, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editProfile, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editProfile, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editProfile, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editProfile, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editProfile, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editProfile, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editProfile, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editProfile, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editProfile, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editProfile, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editProfile, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editProfile, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editProfile, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditProfile_MembersInjector.injectLocalizedStringsUtil(editProfile, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditProfile_MembersInjector.injectUserWeightService(editProfile, DoubleCheck.lazy(this.userWeightServiceProvider));
        EditProfile_MembersInjector.injectUserEnergyService(editProfile, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditProfile_MembersInjector.injectUserHeightService(editProfile, DoubleCheck.lazy(this.userHeightServiceProvider));
        EditProfile_MembersInjector.injectUserDistanceService(editProfile, DoubleCheck.lazy(this.userDistanceServiceProvider));
        EditProfile_MembersInjector.injectUserPropertiesService(editProfile, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        EditProfile_MembersInjector.injectUserImageService(editProfile, DoubleCheck.lazy(this.provideUserImageServiceProvider));
        EditProfile_MembersInjector.injectWaterLoggingAnalyticsHelper(editProfile, DoubleCheck.lazy(this.providesWaterLoggingAnalyticsHelperProvider));
        EditProfile_MembersInjector.injectDbConnectionManager(editProfile, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        EditProfile_MembersInjector.injectNutrientGoalsUtil(editProfile, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        EditProfile_MembersInjector.injectDiaryService(editProfile, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        EditProfile_MembersInjector.injectNutrientGoalService(editProfile, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        EditProfile_MembersInjector.injectSession(editProfile, DoubleCheck.lazy(this.providesSessionProvider));
        EditProfile_MembersInjector.injectConsentsService(editProfile, DoubleCheck.lazy(this.providesConsentServiceProvider));
        EditProfile_MembersInjector.injectConsentsAnalyticsHelper(editProfile, DoubleCheck.lazy(this.provideConsentsAnalyticsHelperProvider));
        return editProfile;
    }

    private EditReminder injectEditReminder(EditReminder editReminder) {
        MfpActivity_MembersInjector.injectAdsSettings(editReminder, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editReminder, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editReminder, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editReminder, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editReminder, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editReminder, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editReminder, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editReminder, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editReminder, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editReminder, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editReminder, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editReminder, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editReminder, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editReminder, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editReminder, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editReminder, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editReminder, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editReminder, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editReminder, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editReminder, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editReminder, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editReminder, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editReminder, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editReminder, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editReminder, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editReminder, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editReminder, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editReminder, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditReminder_MembersInjector.injectRemindersService(editReminder, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        EditReminder_MembersInjector.injectLocalizedStringsUtil(editReminder, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return editReminder;
    }

    private EditStrength injectEditStrength(EditStrength editStrength) {
        MfpActivity_MembersInjector.injectAdsSettings(editStrength, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(editStrength, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(editStrength, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(editStrength, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(editStrength, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(editStrength, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(editStrength, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(editStrength, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(editStrength, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(editStrength, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(editStrength, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(editStrength, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(editStrength, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(editStrength, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(editStrength, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(editStrength, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(editStrength, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(editStrength, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(editStrength, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(editStrength, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(editStrength, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(editStrength, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(editStrength, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(editStrength, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(editStrength, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(editStrength, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(editStrength, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(editStrength, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EditStrength_MembersInjector.injectUserWeightService(editStrength, getUserWeightService());
        EditStrength_MembersInjector.injectExerciseStringService(editStrength, getExerciseStringService());
        EditStrength_MembersInjector.injectLocalizedStringsUtil(editStrength, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditStrength_MembersInjector.injectUserEnergyService(editStrength, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditStrength_MembersInjector.injectDiaryService(editStrength, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return editStrength;
    }

    private EndpointActivity injectEndpointActivity(EndpointActivity endpointActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(endpointActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(endpointActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(endpointActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(endpointActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(endpointActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(endpointActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(endpointActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(endpointActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(endpointActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(endpointActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(endpointActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(endpointActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(endpointActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(endpointActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(endpointActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(endpointActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(endpointActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(endpointActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(endpointActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(endpointActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(endpointActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(endpointActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(endpointActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(endpointActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(endpointActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(endpointActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(endpointActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(endpointActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        EndpointActivity_MembersInjector.injectApiSettings(endpointActivity, mfpApiSettings());
        return endpointActivity;
    }

    private ExerciseCaloriesActivity injectExerciseCaloriesActivity(ExerciseCaloriesActivity exerciseCaloriesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(exerciseCaloriesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(exerciseCaloriesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(exerciseCaloriesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(exerciseCaloriesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(exerciseCaloriesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(exerciseCaloriesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ExerciseCaloriesActivity_MembersInjector.injectNutrientGoalService(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        ExerciseCaloriesActivity_MembersInjector.injectNutritionalGoalsUtil(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        ExerciseCaloriesActivity_MembersInjector.injectLocalizedStringsUtil(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        ExerciseCaloriesActivity_MembersInjector.injectUserEnergyService(exerciseCaloriesActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        ExerciseCaloriesActivity_MembersInjector.injectPremiumApiErrorUtil(exerciseCaloriesActivity, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return exerciseCaloriesActivity;
    }

    private ExerciseSearchActivity injectExerciseSearchActivity(ExerciseSearchActivity exerciseSearchActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(exerciseSearchActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(exerciseSearchActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(exerciseSearchActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(exerciseSearchActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(exerciseSearchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(exerciseSearchActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(exerciseSearchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(exerciseSearchActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(exerciseSearchActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(exerciseSearchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(exerciseSearchActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(exerciseSearchActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(exerciseSearchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(exerciseSearchActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(exerciseSearchActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(exerciseSearchActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(exerciseSearchActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(exerciseSearchActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(exerciseSearchActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(exerciseSearchActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(exerciseSearchActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(exerciseSearchActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(exerciseSearchActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(exerciseSearchActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(exerciseSearchActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(exerciseSearchActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(exerciseSearchActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(exerciseSearchActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ExerciseSearchActivity_MembersInjector.injectActionTrackingService(exerciseSearchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        ExerciseSearchActivity_MembersInjector.injectDiaryService(exerciseSearchActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        ExerciseSearchActivity_MembersInjector.injectSearchService(exerciseSearchActivity, DoubleCheck.lazy(this.providesSearchServiceProvider));
        ExerciseSearchActivity_MembersInjector.injectSyncScheduler(exerciseSearchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        ExerciseSearchActivity_MembersInjector.injectSession(exerciseSearchActivity, DoubleCheck.lazy(this.providesSessionProvider));
        ExerciseSearchActivity_MembersInjector.injectExerciseSearchAnalyticsHelper(exerciseSearchActivity, DoubleCheck.lazy(this.providesExerciseSearchAnalyticsHelperProvider));
        ExerciseSearchActivity_MembersInjector.injectLocalSettingsService(exerciseSearchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ExerciseSearchActivity_MembersInjector.injectExerciseAnalyticsHelper(exerciseSearchActivity, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        return exerciseSearchActivity;
    }

    private ExploreActivity injectExploreActivity(ExploreActivity exploreActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(exploreActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(exploreActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(exploreActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(exploreActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(exploreActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(exploreActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(exploreActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(exploreActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(exploreActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(exploreActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(exploreActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(exploreActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(exploreActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(exploreActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(exploreActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(exploreActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(exploreActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(exploreActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(exploreActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(exploreActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(exploreActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(exploreActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(exploreActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(exploreActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(exploreActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(exploreActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(exploreActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(exploreActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ExploreActivity_MembersInjector.injectExploreService(exploreActivity, DoubleCheck.lazy(this.providesExploreServiceProvider));
        ExploreActivity_MembersInjector.injectImageService(exploreActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        ExploreActivity_MembersInjector.injectMealService(exploreActivity, DoubleCheck.lazy(this.providesMealServiceProvider));
        ExploreActivity_MembersInjector.injectUserEnergyService(exploreActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        ExploreActivity_MembersInjector.injectChallengesAnalyticsHelper(exploreActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ExploreActivity_MembersInjector.injectCommunityService(exploreActivity, DoubleCheck.lazy(this.providesVanillaServiceProvider));
        return exploreActivity;
    }

    private FacebookLoginActivity injectFacebookLoginActivity(FacebookLoginActivity facebookLoginActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(facebookLoginActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(facebookLoginActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(facebookLoginActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(facebookLoginActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(facebookLoginActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(facebookLoginActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(facebookLoginActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(facebookLoginActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(facebookLoginActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(facebookLoginActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(facebookLoginActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(facebookLoginActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(facebookLoginActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(facebookLoginActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(facebookLoginActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(facebookLoginActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(facebookLoginActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(facebookLoginActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(facebookLoginActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(facebookLoginActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(facebookLoginActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(facebookLoginActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(facebookLoginActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(facebookLoginActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(facebookLoginActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(facebookLoginActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(facebookLoginActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(facebookLoginActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FacebookLoginActivity_MembersInjector.injectFacebookService(facebookLoginActivity, DoubleCheck.lazy(this.providesFacebookServiceProvider));
        FacebookLoginActivity_MembersInjector.injectSignUpService(facebookLoginActivity, DoubleCheck.lazy(this.providesSignUpServiceProvider));
        FacebookLoginActivity_MembersInjector.injectLoginModel(facebookLoginActivity, (LoginModel) this.providesLoginModelProvider.get());
        return facebookLoginActivity;
    }

    private FacebookSettings injectFacebookSettings(FacebookSettings facebookSettings) {
        MfpActivity_MembersInjector.injectAdsSettings(facebookSettings, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(facebookSettings, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(facebookSettings, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(facebookSettings, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(facebookSettings, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(facebookSettings, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(facebookSettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(facebookSettings, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(facebookSettings, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(facebookSettings, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(facebookSettings, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(facebookSettings, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(facebookSettings, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(facebookSettings, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(facebookSettings, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(facebookSettings, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(facebookSettings, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(facebookSettings, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(facebookSettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(facebookSettings, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(facebookSettings, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(facebookSettings, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(facebookSettings, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(facebookSettings, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(facebookSettings, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(facebookSettings, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(facebookSettings, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(facebookSettings, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FacebookSettings_MembersInjector.injectDiarySharingSettingsManager(facebookSettings, getDiarySharingSettingsManager());
        FacebookSettings_MembersInjector.injectFacebookService(facebookSettings, DoubleCheck.lazy(this.providesFacebookServiceProvider));
        FacebookSettings_MembersInjector.injectLoginModel(facebookSettings, DoubleCheck.lazy(this.providesLoginModelProvider));
        return facebookSettings;
    }

    private Faq injectFaq(Faq faq) {
        MfpActivity_MembersInjector.injectAdsSettings(faq, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(faq, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(faq, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(faq, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(faq, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(faq, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(faq, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(faq, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(faq, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(faq, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(faq, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(faq, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(faq, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(faq, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(faq, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(faq, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(faq, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(faq, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(faq, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(faq, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(faq, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(faq, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(faq, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(faq, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(faq, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(faq, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(faq, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(faq, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(faq, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(faq, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        FaqFeedbackBaseActivity_MembersInjector.injectVersionCode(faq, getNamedLong());
        FaqFeedbackBaseActivity_MembersInjector.injectDeviceId(faq, (UUID) this.provideDeviceUUIDProvider.get());
        FaqFeedbackBaseActivity_MembersInjector.injectVersionName(faq, getNamedString());
        FaqFeedbackBaseActivity_MembersInjector.injectApiUrlProvider(faq, getApiUrlProvider());
        FaqFeedbackBaseActivity_MembersInjector.injectCountryService(faq, (CountryService) this.providesCountryServiceProvider.get());
        Faq_MembersInjector.injectConfigService(faq, (ConfigService) this.providesConfigServiceProvider.get());
        return faq;
    }

    private FaqFeedbackBaseActivity injectFaqFeedbackBaseActivity(FaqFeedbackBaseActivity faqFeedbackBaseActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(faqFeedbackBaseActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(faqFeedbackBaseActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(faqFeedbackBaseActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(faqFeedbackBaseActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(faqFeedbackBaseActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(faqFeedbackBaseActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        FaqFeedbackBaseActivity_MembersInjector.injectVersionCode(faqFeedbackBaseActivity, getNamedLong());
        FaqFeedbackBaseActivity_MembersInjector.injectDeviceId(faqFeedbackBaseActivity, (UUID) this.provideDeviceUUIDProvider.get());
        FaqFeedbackBaseActivity_MembersInjector.injectVersionName(faqFeedbackBaseActivity, getNamedString());
        FaqFeedbackBaseActivity_MembersInjector.injectApiUrlProvider(faqFeedbackBaseActivity, getApiUrlProvider());
        FaqFeedbackBaseActivity_MembersInjector.injectCountryService(faqFeedbackBaseActivity, (CountryService) this.providesCountryServiceProvider.get());
        return faqFeedbackBaseActivity;
    }

    private FinishOnboardingActivity injectFinishOnboardingActivity(FinishOnboardingActivity finishOnboardingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(finishOnboardingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(finishOnboardingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(finishOnboardingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(finishOnboardingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(finishOnboardingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(finishOnboardingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(finishOnboardingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(finishOnboardingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(finishOnboardingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(finishOnboardingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(finishOnboardingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(finishOnboardingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(finishOnboardingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(finishOnboardingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(finishOnboardingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(finishOnboardingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(finishOnboardingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(finishOnboardingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(finishOnboardingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(finishOnboardingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(finishOnboardingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(finishOnboardingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(finishOnboardingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(finishOnboardingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(finishOnboardingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(finishOnboardingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(finishOnboardingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(finishOnboardingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FinishOnboardingActivity_MembersInjector.injectSignInService(finishOnboardingActivity, DoubleCheck.lazy(this.providesSignInServiceProvider));
        FinishOnboardingActivity_MembersInjector.injectLoginModel(finishOnboardingActivity, DoubleCheck.lazy(this.providesLoginModelProvider));
        return finishOnboardingActivity;
    }

    private FileExport injectFileExport(FileExport fileExport) {
        MfpActivity_MembersInjector.injectAdsSettings(fileExport, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(fileExport, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(fileExport, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(fileExport, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(fileExport, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(fileExport, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(fileExport, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(fileExport, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(fileExport, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(fileExport, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(fileExport, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(fileExport, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(fileExport, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(fileExport, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(fileExport, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(fileExport, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(fileExport, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(fileExport, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(fileExport, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(fileExport, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(fileExport, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(fileExport, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(fileExport, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(fileExport, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(fileExport, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(fileExport, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(fileExport, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(fileExport, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FileExport_MembersInjector.injectUserPropertiesService(fileExport, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        FileExport_MembersInjector.injectFileExportService(fileExport, DoubleCheck.lazy(this.providesFileExportServiceProvider));
        FileExport_MembersInjector.injectPremiumService(fileExport, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        FileExport_MembersInjector.injectFileExportAnalyticsHelper(fileExport, DoubleCheck.lazy(this.providesFileExportAnalyticsHelperProvider));
        FileExport_MembersInjector.injectIdentitySdk(fileExport, DoubleCheck.lazy(this.provideUacfIdentitySdkProvider));
        FileExport_MembersInjector.injectEmailVerificationManager(fileExport, DoubleCheck.lazy(this.provideUacfEmailVerificationManagerProvider));
        return fileExport;
    }

    private FileExportPreview injectFileExportPreview(FileExportPreview fileExportPreview) {
        MfpActivity_MembersInjector.injectAdsSettings(fileExportPreview, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(fileExportPreview, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(fileExportPreview, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(fileExportPreview, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(fileExportPreview, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(fileExportPreview, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(fileExportPreview, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(fileExportPreview, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(fileExportPreview, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(fileExportPreview, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(fileExportPreview, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(fileExportPreview, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(fileExportPreview, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(fileExportPreview, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(fileExportPreview, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(fileExportPreview, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(fileExportPreview, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(fileExportPreview, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(fileExportPreview, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(fileExportPreview, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(fileExportPreview, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(fileExportPreview, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(fileExportPreview, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(fileExportPreview, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(fileExportPreview, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(fileExportPreview, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(fileExportPreview, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(fileExportPreview, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FileExportPreview_MembersInjector.injectPremiumService(fileExportPreview, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        return fileExportPreview;
    }

    private FoodEditorActivity injectFoodEditorActivity(FoodEditorActivity foodEditorActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(foodEditorActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodEditorActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodEditorActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodEditorActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodEditorActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodEditorActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodEditorActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodEditorActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodEditorActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodEditorActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodEditorActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodEditorActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodEditorActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodEditorActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodEditorActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodEditorActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodEditorActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodEditorActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodEditorActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodEditorActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodEditorActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodEditorActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodEditorActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodEditorActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodEditorActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodEditorActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodEditorActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodEditorActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FoodEditorActivity_MembersInjector.injectMultiAddFoodHelper(foodEditorActivity, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodEditorActivity_MembersInjector.injectImageAssociationService(foodEditorActivity, DoubleCheck.lazy(this.providesImageAssociationServiceProvider));
        return foodEditorActivity;
    }

    private FoodListsActivity injectFoodListsActivity(FoodListsActivity foodListsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(foodListsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodListsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodListsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodListsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodListsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodListsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodListsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodListsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodListsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodListsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodListsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodListsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodListsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodListsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodListsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodListsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodListsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodListsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodListsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodListsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodListsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodListsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodListsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodListsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodListsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodListsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodListsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodListsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        NutritionPremiumActivityBase_MembersInjector.injectUserEnergyService(foodListsActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        FoodListsActivity_MembersInjector.injectLocalizedStringsUtil(foodListsActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return foodListsActivity;
    }

    private FoodNotesActivity injectFoodNotesActivity(FoodNotesActivity foodNotesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(foodNotesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodNotesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodNotesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodNotesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodNotesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodNotesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodNotesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodNotesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodNotesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodNotesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodNotesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodNotesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodNotesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodNotesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodNotesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodNotesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodNotesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodNotesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodNotesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodNotesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodNotesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodNotesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodNotesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodNotesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodNotesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodNotesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodNotesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodNotesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FoodNotesActivity_MembersInjector.injectFoodService(foodNotesActivity, DoubleCheck.lazy(this.provideFoodServiceProvider));
        return foodNotesActivity;
    }

    private FoodSearchActivity injectFoodSearchActivity(FoodSearchActivity foodSearchActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(foodSearchActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodSearchActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodSearchActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodSearchActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodSearchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodSearchActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodSearchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodSearchActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodSearchActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodSearchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodSearchActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodSearchActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodSearchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodSearchActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodSearchActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodSearchActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodSearchActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodSearchActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodSearchActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodSearchActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodSearchActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodSearchActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodSearchActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodSearchActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodSearchActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodSearchActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodSearchActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodSearchActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FoodSearchActivity_MembersInjector.injectCountryServiceLazy(foodSearchActivity, DoubleCheck.lazy(this.providesCountryServiceProvider));
        FoodSearchActivity_MembersInjector.injectLocalizedStringsUtil(foodSearchActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        FoodSearchActivity_MembersInjector.injectUserEnergyService(foodSearchActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        FoodSearchActivity_MembersInjector.injectMultiAddFoodHelper(foodSearchActivity, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodSearchActivity_MembersInjector.injectSyncScheduler(foodSearchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        FoodSearchActivity_MembersInjector.injectPremiumService(foodSearchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        FoodSearchActivity_MembersInjector.injectFoodSearchAnalyticsHelper(foodSearchActivity, DoubleCheck.lazy(this.providesFoodSearchAnalyticsHelperProvider));
        FoodSearchActivity_MembersInjector.injectRestaurantLoggingSettingsService(foodSearchActivity, DoubleCheck.lazy(this.providesRestaurantLoggingSettingsServiceProvider));
        FoodSearchActivity_MembersInjector.injectRestaurantLoggingAnalyticsHelper(foodSearchActivity, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        FoodSearchActivity_MembersInjector.injectLocalSettingsService(foodSearchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        FoodSearchActivity_MembersInjector.injectMealIngredientMapper(foodSearchActivity, DoubleCheck.lazy(this.providesMealIngedientMapperProvider));
        FoodSearchActivity_MembersInjector.injectDiaryService(foodSearchActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        FoodSearchActivity_MembersInjector.injectDbConnectionManager(foodSearchActivity, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        FoodSearchActivity_MembersInjector.injectFoodEditorAnalytics(foodSearchActivity, DoubleCheck.lazy(this.providesFoodEditorAnalyticsProvider));
        FoodSearchActivity_MembersInjector.injectFoodSearchRouter(foodSearchActivity, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return foodSearchActivity;
    }

    private FoodSearchActivityV2 injectFoodSearchActivityV2(FoodSearchActivityV2 foodSearchActivityV2) {
        MfpActivity_MembersInjector.injectAdsSettings(foodSearchActivityV2, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodSearchActivityV2, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodSearchActivityV2, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodSearchActivityV2, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodSearchActivityV2, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodSearchActivityV2, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodSearchActivityV2, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodSearchActivityV2, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodSearchActivityV2, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodSearchActivityV2, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodSearchActivityV2, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodSearchActivityV2, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodSearchActivityV2, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodSearchActivityV2, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodSearchActivityV2, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodSearchActivityV2, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodSearchActivityV2, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodSearchActivityV2, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodSearchActivityV2, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodSearchActivityV2, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodSearchActivityV2, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodSearchActivityV2, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodSearchActivityV2, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodSearchActivityV2, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodSearchActivityV2, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodSearchActivityV2, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodSearchActivityV2, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodSearchActivityV2, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FoodSearchActivityV2_MembersInjector.injectVmFactory(foodSearchActivityV2, (VMFactory) this.vMFactoryProvider.get());
        return foodSearchActivityV2;
    }

    private ForgotPasswordActivity injectForgotPasswordActivity(ForgotPasswordActivity forgotPasswordActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(forgotPasswordActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(forgotPasswordActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(forgotPasswordActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(forgotPasswordActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(forgotPasswordActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(forgotPasswordActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(forgotPasswordActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(forgotPasswordActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(forgotPasswordActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(forgotPasswordActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(forgotPasswordActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(forgotPasswordActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(forgotPasswordActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(forgotPasswordActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(forgotPasswordActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(forgotPasswordActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(forgotPasswordActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(forgotPasswordActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(forgotPasswordActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(forgotPasswordActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(forgotPasswordActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(forgotPasswordActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(forgotPasswordActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(forgotPasswordActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(forgotPasswordActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(forgotPasswordActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(forgotPasswordActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(forgotPasswordActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ForgotPasswordActivity_MembersInjector.injectApiUrlProvider(forgotPasswordActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        ForgotPasswordActivity_MembersInjector.injectAppSettings(forgotPasswordActivity, DoubleCheck.lazy(this.appSettingsProvider));
        return forgotPasswordActivity;
    }

    private FriendDiary injectFriendDiary(FriendDiary friendDiary) {
        MfpActivity_MembersInjector.injectAdsSettings(friendDiary, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(friendDiary, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(friendDiary, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(friendDiary, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(friendDiary, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(friendDiary, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(friendDiary, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(friendDiary, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(friendDiary, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(friendDiary, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(friendDiary, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(friendDiary, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(friendDiary, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(friendDiary, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(friendDiary, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(friendDiary, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(friendDiary, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(friendDiary, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(friendDiary, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(friendDiary, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(friendDiary, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(friendDiary, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(friendDiary, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(friendDiary, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(friendDiary, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(friendDiary, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(friendDiary, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(friendDiary, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return friendDiary;
    }

    private FriendsActivity injectFriendsActivity(FriendsActivity friendsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(friendsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(friendsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(friendsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(friendsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(friendsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(friendsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(friendsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(friendsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(friendsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(friendsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(friendsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(friendsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(friendsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(friendsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(friendsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(friendsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(friendsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(friendsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(friendsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(friendsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(friendsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(friendsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(friendsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(friendsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(friendsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(friendsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(friendsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(friendsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FriendsActivity_MembersInjector.injectMfpNotificationHandler(friendsActivity, DoubleCheck.lazy(this.mfpNotificationHandlerProvider));
        FriendsActivity_MembersInjector.injectFriendService(friendsActivity, DoubleCheck.lazy(this.providesFriendServiceProvider));
        FriendsActivity_MembersInjector.injectMiniUserInfoMapper(friendsActivity, DoubleCheck.lazy(this.providesMiniUserInfoMapperProvider));
        return friendsActivity;
    }

    private FullScreenWebView injectFullScreenWebView(FullScreenWebView fullScreenWebView) {
        MfpActivity_MembersInjector.injectAdsSettings(fullScreenWebView, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(fullScreenWebView, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(fullScreenWebView, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(fullScreenWebView, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(fullScreenWebView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(fullScreenWebView, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(fullScreenWebView, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(fullScreenWebView, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(fullScreenWebView, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(fullScreenWebView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(fullScreenWebView, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(fullScreenWebView, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(fullScreenWebView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(fullScreenWebView, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(fullScreenWebView, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(fullScreenWebView, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(fullScreenWebView, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(fullScreenWebView, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(fullScreenWebView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(fullScreenWebView, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(fullScreenWebView, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(fullScreenWebView, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(fullScreenWebView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(fullScreenWebView, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(fullScreenWebView, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(fullScreenWebView, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(fullScreenWebView, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(fullScreenWebView, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(fullScreenWebView, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(fullScreenWebView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return fullScreenWebView;
    }

    private GDPRHelpActivity injectGDPRHelpActivity(GDPRHelpActivity gDPRHelpActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(gDPRHelpActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(gDPRHelpActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(gDPRHelpActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(gDPRHelpActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(gDPRHelpActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(gDPRHelpActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(gDPRHelpActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(gDPRHelpActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(gDPRHelpActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(gDPRHelpActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(gDPRHelpActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(gDPRHelpActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(gDPRHelpActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(gDPRHelpActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(gDPRHelpActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(gDPRHelpActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(gDPRHelpActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(gDPRHelpActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(gDPRHelpActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(gDPRHelpActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(gDPRHelpActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(gDPRHelpActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(gDPRHelpActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(gDPRHelpActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(gDPRHelpActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        GDPRHelpActivity_MembersInjector.injectPremiumService(gDPRHelpActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        GDPRHelpActivity_MembersInjector.injectDeleteAccountAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.provideDeleteAccountAnalyticsHelperProvider));
        GDPRHelpActivity_MembersInjector.injectGdprHelpAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.provideGDPRHelpAnalyticsHelperProvider));
        GDPRHelpActivity_MembersInjector.injectUpdatedTermsAnalyticsHelper(gDPRHelpActivity, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        return gDPRHelpActivity;
    }

    private GenericExercise injectGenericExercise(GenericExercise genericExercise) {
        MfpActivity_MembersInjector.injectAdsSettings(genericExercise, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(genericExercise, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(genericExercise, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(genericExercise, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(genericExercise, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(genericExercise, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(genericExercise, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(genericExercise, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(genericExercise, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(genericExercise, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(genericExercise, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(genericExercise, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(genericExercise, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(genericExercise, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(genericExercise, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(genericExercise, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(genericExercise, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(genericExercise, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(genericExercise, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(genericExercise, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(genericExercise, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(genericExercise, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(genericExercise, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(genericExercise, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(genericExercise, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(genericExercise, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(genericExercise, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(genericExercise, DoubleCheck.lazy(this.provideLocationServiceProvider));
        GenericExercise_MembersInjector.injectExerciseService(genericExercise, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        GenericExercise_MembersInjector.injectDiaryService(genericExercise, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return genericExercise;
    }

    private GooglePlayPaymentActivity injectGooglePlayPaymentActivity(GooglePlayPaymentActivity googlePlayPaymentActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(googlePlayPaymentActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(googlePlayPaymentActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(googlePlayPaymentActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(googlePlayPaymentActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(googlePlayPaymentActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(googlePlayPaymentActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PaymentActivityBase_MembersInjector.injectSubscriptionService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesSubscriptionServiceProvider));
        PaymentActivityBase_MembersInjector.injectPaymentService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesPaymentServiceProvider));
        PaymentActivityBase_MembersInjector.injectGeoLocationService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesGeoLocationServiceProvider));
        PaymentActivityBase_MembersInjector.injectPaymentAnalytics(googlePlayPaymentActivity, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        GooglePlayPaymentActivity_MembersInjector.injectConfigService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        GooglePlayPaymentActivity_MembersInjector.injectAnalyticsService(googlePlayPaymentActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return googlePlayPaymentActivity;
    }

    private FlagResetActivity injectFlagResetActivity(FlagResetActivity flagResetActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(flagResetActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(flagResetActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(flagResetActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(flagResetActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(flagResetActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(flagResetActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(flagResetActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(flagResetActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(flagResetActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(flagResetActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(flagResetActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(flagResetActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(flagResetActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(flagResetActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(flagResetActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(flagResetActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(flagResetActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(flagResetActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(flagResetActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(flagResetActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(flagResetActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(flagResetActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(flagResetActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(flagResetActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(flagResetActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(flagResetActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(flagResetActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(flagResetActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FlagResetActivity_MembersInjector.injectLocalSettingsService(flagResetActivity, getLocalSettingsService());
        FlagResetActivity_MembersInjector.injectUserApplicationSettingsService(flagResetActivity, (UserApplicationSettingsService) this.providesUserApplicationSettingsServiceProvider.get());
        FlagResetActivity_MembersInjector.injectProductService(flagResetActivity, (ProductService) this.providesProductServiceProvider.get());
        FlagResetActivity_MembersInjector.injectAppSettings(flagResetActivity, getAppSettings());
        FlagResetActivity_MembersInjector.injectEmailVerificationManager(flagResetActivity, (UacfEmailVerificationManager) this.provideUacfEmailVerificationManagerProvider.get());
        FlagResetActivity_MembersInjector.injectDebugSettingsService(flagResetActivity, getDebugSettingsService());
        return flagResetActivity;
    }

    private HomeActivity injectHomeActivity(HomeActivity homeActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(homeActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(homeActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(homeActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(homeActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(homeActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(homeActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(homeActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(homeActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(homeActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(homeActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(homeActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(homeActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(homeActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(homeActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(homeActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(homeActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(homeActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(homeActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(homeActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(homeActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(homeActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(homeActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(homeActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(homeActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(homeActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(homeActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(homeActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(homeActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        HomeActivity_MembersInjector.injectGlobalSettings(homeActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        HomeActivity_MembersInjector.injectUserApplicationSettings(homeActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        return homeActivity;
    }

    private HomeMessagesActivity injectHomeMessagesActivity(HomeMessagesActivity homeMessagesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(homeMessagesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(homeMessagesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(homeMessagesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(homeMessagesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(homeMessagesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(homeMessagesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(homeMessagesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(homeMessagesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(homeMessagesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(homeMessagesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(homeMessagesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(homeMessagesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(homeMessagesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(homeMessagesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(homeMessagesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(homeMessagesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(homeMessagesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(homeMessagesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(homeMessagesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(homeMessagesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(homeMessagesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(homeMessagesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(homeMessagesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(homeMessagesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(homeMessagesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(homeMessagesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(homeMessagesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(homeMessagesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return homeMessagesActivity;
    }

    private ImageReportingActivity injectImageReportingActivity(ImageReportingActivity imageReportingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(imageReportingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(imageReportingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(imageReportingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(imageReportingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(imageReportingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(imageReportingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(imageReportingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(imageReportingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(imageReportingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(imageReportingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(imageReportingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(imageReportingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(imageReportingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(imageReportingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(imageReportingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(imageReportingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(imageReportingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(imageReportingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(imageReportingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(imageReportingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(imageReportingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(imageReportingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(imageReportingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(imageReportingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(imageReportingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(imageReportingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(imageReportingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(imageReportingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return imageReportingActivity;
    }

    private ImageReportingDetailsActivity injectImageReportingDetailsActivity(ImageReportingDetailsActivity imageReportingDetailsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(imageReportingDetailsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(imageReportingDetailsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(imageReportingDetailsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(imageReportingDetailsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(imageReportingDetailsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(imageReportingDetailsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ImageReportingDetailsActivity_MembersInjector.injectImageReportingService(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesImageReportingServiceProvider));
        ImageReportingDetailsActivity_MembersInjector.injectProgressAnalytics(imageReportingDetailsActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        return imageReportingDetailsActivity;
    }

    private ImportPhotoActivity injectImportPhotoActivity(ImportPhotoActivity importPhotoActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(importPhotoActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(importPhotoActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(importPhotoActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(importPhotoActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(importPhotoActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(importPhotoActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(importPhotoActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(importPhotoActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(importPhotoActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(importPhotoActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(importPhotoActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(importPhotoActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(importPhotoActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(importPhotoActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(importPhotoActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(importPhotoActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(importPhotoActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(importPhotoActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(importPhotoActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(importPhotoActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(importPhotoActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(importPhotoActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(importPhotoActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(importPhotoActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(importPhotoActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(importPhotoActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(importPhotoActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(importPhotoActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ImportPhotoActivity_MembersInjector.injectMeasurementsService(importPhotoActivity, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        return importPhotoActivity;
    }

    private IngredientMatchingActivity injectIngredientMatchingActivity(IngredientMatchingActivity ingredientMatchingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(ingredientMatchingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(ingredientMatchingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(ingredientMatchingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(ingredientMatchingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(ingredientMatchingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(ingredientMatchingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(ingredientMatchingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(ingredientMatchingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(ingredientMatchingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(ingredientMatchingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(ingredientMatchingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(ingredientMatchingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(ingredientMatchingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(ingredientMatchingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(ingredientMatchingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(ingredientMatchingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(ingredientMatchingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(ingredientMatchingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(ingredientMatchingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(ingredientMatchingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(ingredientMatchingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(ingredientMatchingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        IngredientMatchingActivity_MembersInjector.injectRecipeService(ingredientMatchingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        IngredientMatchingActivity_MembersInjector.injectUserEnergyService(ingredientMatchingActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        IngredientMatchingActivity_MembersInjector.injectRecipesAnalyticsHelper(ingredientMatchingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return ingredientMatchingActivity;
    }

    private InviteContactsToChallengeActivity injectInviteContactsToChallengeActivity(InviteContactsToChallengeActivity inviteContactsToChallengeActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(inviteContactsToChallengeActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(inviteContactsToChallengeActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(inviteContactsToChallengeActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        InviteContactsToChallengeActivity_MembersInjector.injectFriendService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesFriendServiceProvider));
        InviteContactsToChallengeActivity_MembersInjector.injectContactsService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.contactsOnMfpServiceProvider));
        InviteContactsToChallengeActivity_MembersInjector.injectChallengesService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        InviteContactsToChallengeActivity_MembersInjector.injectChallengesAnalyticsHelper(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        InviteContactsToChallengeActivity_MembersInjector.injectActionTrackingService(inviteContactsToChallengeActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        return inviteContactsToChallengeActivity;
    }

    private InviteFriendActivity injectInviteFriendActivity(InviteFriendActivity inviteFriendActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(inviteFriendActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(inviteFriendActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(inviteFriendActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(inviteFriendActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(inviteFriendActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(inviteFriendActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(inviteFriendActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(inviteFriendActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(inviteFriendActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(inviteFriendActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(inviteFriendActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(inviteFriendActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(inviteFriendActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(inviteFriendActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(inviteFriendActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(inviteFriendActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(inviteFriendActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(inviteFriendActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(inviteFriendActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(inviteFriendActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(inviteFriendActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(inviteFriendActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(inviteFriendActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(inviteFriendActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(inviteFriendActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(inviteFriendActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(inviteFriendActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(inviteFriendActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        InviteFriendActivity_MembersInjector.injectFriendService(inviteFriendActivity, DoubleCheck.lazy(this.providesFriendServiceProvider));
        InviteFriendActivity_MembersInjector.injectActionTrackingService(inviteFriendActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        return inviteFriendActivity;
    }

    private InviteSourceListActivity injectInviteSourceListActivity(InviteSourceListActivity inviteSourceListActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(inviteSourceListActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(inviteSourceListActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(inviteSourceListActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(inviteSourceListActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(inviteSourceListActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(inviteSourceListActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(inviteSourceListActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(inviteSourceListActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(inviteSourceListActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(inviteSourceListActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(inviteSourceListActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(inviteSourceListActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(inviteSourceListActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(inviteSourceListActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(inviteSourceListActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(inviteSourceListActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(inviteSourceListActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(inviteSourceListActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(inviteSourceListActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(inviteSourceListActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(inviteSourceListActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(inviteSourceListActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(inviteSourceListActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(inviteSourceListActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(inviteSourceListActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(inviteSourceListActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(inviteSourceListActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(inviteSourceListActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        InviteSourceListActivity_MembersInjector.injectChallengesAnalyticsHelper(inviteSourceListActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return inviteSourceListActivity;
    }

    private JoinChallengeActivity injectJoinChallengeActivity(JoinChallengeActivity joinChallengeActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(joinChallengeActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(joinChallengeActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(joinChallengeActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(joinChallengeActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(joinChallengeActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(joinChallengeActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(joinChallengeActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(joinChallengeActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(joinChallengeActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(joinChallengeActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(joinChallengeActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(joinChallengeActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(joinChallengeActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(joinChallengeActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(joinChallengeActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(joinChallengeActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(joinChallengeActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(joinChallengeActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(joinChallengeActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(joinChallengeActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(joinChallengeActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(joinChallengeActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(joinChallengeActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(joinChallengeActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(joinChallengeActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(joinChallengeActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(joinChallengeActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(joinChallengeActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        JoinChallengeActivity_MembersInjector.injectChallengesAnalyticsHelper(joinChallengeActivity, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return joinChallengeActivity;
    }

    private LearnMoreActivity injectLearnMoreActivity(LearnMoreActivity learnMoreActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(learnMoreActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(learnMoreActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(learnMoreActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(learnMoreActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(learnMoreActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(learnMoreActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(learnMoreActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(learnMoreActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(learnMoreActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(learnMoreActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(learnMoreActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(learnMoreActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(learnMoreActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(learnMoreActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(learnMoreActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(learnMoreActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(learnMoreActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(learnMoreActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(learnMoreActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(learnMoreActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(learnMoreActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(learnMoreActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(learnMoreActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(learnMoreActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(learnMoreActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(learnMoreActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(learnMoreActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(learnMoreActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(learnMoreActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(learnMoreActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return learnMoreActivity;
    }

    private LocaleOverrideActivity injectLocaleOverrideActivity(LocaleOverrideActivity localeOverrideActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(localeOverrideActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(localeOverrideActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(localeOverrideActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(localeOverrideActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(localeOverrideActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(localeOverrideActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(localeOverrideActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(localeOverrideActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(localeOverrideActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(localeOverrideActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(localeOverrideActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(localeOverrideActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(localeOverrideActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(localeOverrideActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(localeOverrideActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(localeOverrideActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(localeOverrideActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(localeOverrideActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(localeOverrideActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(localeOverrideActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(localeOverrideActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(localeOverrideActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(localeOverrideActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(localeOverrideActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(localeOverrideActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(localeOverrideActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(localeOverrideActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(localeOverrideActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        LocaleOverrideActivity_MembersInjector.injectSettings(localeOverrideActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        return localeOverrideActivity;
    }

    private LoginActivity injectLoginActivity(LoginActivity loginActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(loginActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(loginActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(loginActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(loginActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(loginActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(loginActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(loginActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(loginActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(loginActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(loginActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(loginActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(loginActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(loginActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(loginActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(loginActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(loginActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(loginActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(loginActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(loginActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(loginActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(loginActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(loginActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(loginActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(loginActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(loginActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(loginActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(loginActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(loginActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        LoginActivity_MembersInjector.injectSignInService(loginActivity, DoubleCheck.lazy(this.providesSignInServiceProvider));
        LoginActivity_MembersInjector.injectPasswordResetHelper(loginActivity, DoubleCheck.lazy(this.passwordResetHelperProvider));
        LoginActivity_MembersInjector.injectDiaryService(loginActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        LoginActivity_MembersInjector.injectAdvancedDebuggingUtil(loginActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        LoginActivity_MembersInjector.injectLoginModel(loginActivity, DoubleCheck.lazy(this.providesLoginModelProvider));
        return loginActivity;
    }

    private LogoutActivity injectLogoutActivity(LogoutActivity logoutActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(logoutActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(logoutActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(logoutActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(logoutActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(logoutActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(logoutActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(logoutActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(logoutActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(logoutActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(logoutActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(logoutActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(logoutActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(logoutActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(logoutActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(logoutActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(logoutActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(logoutActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(logoutActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(logoutActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(logoutActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(logoutActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(logoutActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(logoutActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(logoutActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(logoutActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(logoutActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(logoutActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(logoutActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        LogoutActivity_MembersInjector.injectSyncService(logoutActivity, (SyncService) this.providesSyncEngineProvider.get());
        LogoutActivity_MembersInjector.injectSession(logoutActivity, (Session) this.providesSessionProvider.get());
        return logoutActivity;
    }

    private MacroGoalEditorActivity injectMacroGoalEditorActivity(MacroGoalEditorActivity macroGoalEditorActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(macroGoalEditorActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(macroGoalEditorActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(macroGoalEditorActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(macroGoalEditorActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(macroGoalEditorActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(macroGoalEditorActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(macroGoalEditorActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(macroGoalEditorActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(macroGoalEditorActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(macroGoalEditorActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(macroGoalEditorActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(macroGoalEditorActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(macroGoalEditorActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(macroGoalEditorActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(macroGoalEditorActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(macroGoalEditorActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(macroGoalEditorActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(macroGoalEditorActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        MacroGoalEditorActivity_MembersInjector.injectPremiumService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MacroGoalEditorActivity_MembersInjector.injectUserService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesUserServiceProvider));
        MacroGoalEditorActivity_MembersInjector.injectSession(macroGoalEditorActivity, DoubleCheck.lazy(this.providesSessionProvider));
        MacroGoalEditorActivity_MembersInjector.injectAnalyticsService(macroGoalEditorActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MacroGoalEditorActivity_MembersInjector.injectPremiumApiErrorUtil(macroGoalEditorActivity, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return macroGoalEditorActivity;
    }

    private MeActivity injectMeActivity(MeActivity meActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(meActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(meActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(meActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(meActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(meActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(meActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(meActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(meActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(meActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(meActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(meActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(meActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(meActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(meActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(meActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(meActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(meActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(meActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(meActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(meActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(meActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(meActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(meActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(meActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(meActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(meActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(meActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(meActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        MeActivity_MembersInjector.injectUserSummaryService(meActivity, getUserSummaryService());
        MeActivity_MembersInjector.injectPremiumService(meActivity, (PremiumService) this.providesPremiumServiceProvider.get());
        return meActivity;
    }

    private MealGoalsActivity injectMealGoalsActivity(MealGoalsActivity mealGoalsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(mealGoalsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(mealGoalsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(mealGoalsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(mealGoalsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(mealGoalsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(mealGoalsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(mealGoalsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(mealGoalsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(mealGoalsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(mealGoalsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(mealGoalsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(mealGoalsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(mealGoalsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(mealGoalsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(mealGoalsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(mealGoalsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(mealGoalsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(mealGoalsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(mealGoalsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(mealGoalsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(mealGoalsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(mealGoalsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(mealGoalsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(mealGoalsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(mealGoalsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(mealGoalsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(mealGoalsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(mealGoalsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        MealGoalsActivity_MembersInjector.injectNutrientGoalsUtil(mealGoalsActivity, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        MealGoalsActivity_MembersInjector.injectNutrientGoalService(mealGoalsActivity, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        MealGoalsActivity_MembersInjector.injectDiaryService(mealGoalsActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        MealGoalsActivity_MembersInjector.injectUserEnergyService(mealGoalsActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MealGoalsActivity_MembersInjector.injectLocalSettingsService(mealGoalsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MealGoalsActivity_MembersInjector.injectSyncService(mealGoalsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MealGoalsActivity_MembersInjector.injectSession(mealGoalsActivity, DoubleCheck.lazy(this.providesSessionProvider));
        return mealGoalsActivity;
    }

    private MenusActivity injectMenusActivity(MenusActivity menusActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(menusActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(menusActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(menusActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(menusActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(menusActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(menusActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(menusActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(menusActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(menusActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(menusActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(menusActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(menusActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(menusActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(menusActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(menusActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(menusActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(menusActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(menusActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(menusActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(menusActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(menusActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(menusActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(menusActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(menusActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(menusActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(menusActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(menusActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(menusActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        MenusActivity_MembersInjector.injectVenueService(menusActivity, DoubleCheck.lazy(this.providesVenueServiceProvider));
        MenusActivity_MembersInjector.injectMenuService(menusActivity, DoubleCheck.lazy(this.providesMenuServiceProvider));
        MenusActivity_MembersInjector.injectBus(menusActivity, DoubleCheck.lazy(this.provideOttoBusProvider));
        MenusActivity_MembersInjector.injectRestaurantLoggingSettingsService(menusActivity, DoubleCheck.lazy(this.providesRestaurantLoggingSettingsServiceProvider));
        MenusActivity_MembersInjector.injectRestaurantLoggingAnalyticsHelper(menusActivity, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        MenusActivity_MembersInjector.injectMultiAddMenuItemHelper(menusActivity, DoubleCheck.lazy(this.providesMultiAddMenuItemHelperProvider));
        MenusActivity_MembersInjector.injectDiaryService(menusActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        MenusActivity_MembersInjector.injectLocalSettingsService(menusActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return menusActivity;
    }

    private MfpActivity injectMfpActivity(MfpActivity mfpActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(mfpActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(mfpActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(mfpActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(mfpActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(mfpActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(mfpActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(mfpActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(mfpActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(mfpActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(mfpActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(mfpActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(mfpActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(mfpActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(mfpActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(mfpActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(mfpActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(mfpActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(mfpActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(mfpActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(mfpActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(mfpActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(mfpActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(mfpActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(mfpActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(mfpActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(mfpActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(mfpActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(mfpActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return mfpActivity;
    }

    private RemindersActivity injectRemindersActivity(RemindersActivity remindersActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(remindersActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(remindersActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(remindersActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(remindersActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(remindersActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(remindersActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(remindersActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(remindersActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(remindersActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(remindersActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(remindersActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(remindersActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(remindersActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(remindersActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(remindersActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(remindersActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(remindersActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(remindersActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(remindersActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(remindersActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(remindersActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(remindersActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(remindersActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(remindersActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(remindersActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(remindersActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(remindersActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(remindersActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return remindersActivity;
    }

    private AutoPlaySettings injectAutoPlaySettings(AutoPlaySettings autoPlaySettings) {
        MfpActivity_MembersInjector.injectAdsSettings(autoPlaySettings, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(autoPlaySettings, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(autoPlaySettings, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(autoPlaySettings, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(autoPlaySettings, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(autoPlaySettings, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(autoPlaySettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(autoPlaySettings, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(autoPlaySettings, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(autoPlaySettings, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(autoPlaySettings, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(autoPlaySettings, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(autoPlaySettings, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(autoPlaySettings, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(autoPlaySettings, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(autoPlaySettings, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(autoPlaySettings, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(autoPlaySettings, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(autoPlaySettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(autoPlaySettings, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(autoPlaySettings, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(autoPlaySettings, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(autoPlaySettings, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(autoPlaySettings, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(autoPlaySettings, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(autoPlaySettings, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(autoPlaySettings, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(autoPlaySettings, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AutoPlaySettings_MembersInjector.injectConfigService(autoPlaySettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AutoPlaySettings_MembersInjector.injectUserApplicationSettingsService(autoPlaySettings, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        AutoPlaySettings_MembersInjector.injectPremiumService(autoPlaySettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        return autoPlaySettings;
    }

    private NewCardio injectNewCardio(NewCardio newCardio) {
        MfpActivity_MembersInjector.injectAdsSettings(newCardio, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(newCardio, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(newCardio, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(newCardio, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(newCardio, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(newCardio, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(newCardio, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(newCardio, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(newCardio, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(newCardio, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(newCardio, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(newCardio, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(newCardio, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(newCardio, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(newCardio, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(newCardio, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(newCardio, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(newCardio, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(newCardio, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(newCardio, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(newCardio, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(newCardio, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(newCardio, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(newCardio, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(newCardio, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(newCardio, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(newCardio, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(newCardio, DoubleCheck.lazy(this.provideLocationServiceProvider));
        GenericExercise_MembersInjector.injectExerciseService(newCardio, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        GenericExercise_MembersInjector.injectDiaryService(newCardio, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        NewCardio_MembersInjector.injectUserEnergyService(newCardio, DoubleCheck.lazy(this.userEnergyServiceProvider));
        NewCardio_MembersInjector.injectLocalizedStringsUtil(newCardio, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        NewCardio_MembersInjector.injectSession(newCardio, DoubleCheck.lazy(this.providesSessionProvider));
        NewCardio_MembersInjector.injectExerciseAnalyticsHelper(newCardio, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        return newCardio;
    }

    private NewsFeedSettings injectNewsFeedSettings(NewsFeedSettings newsFeedSettings) {
        MfpActivity_MembersInjector.injectAdsSettings(newsFeedSettings, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(newsFeedSettings, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(newsFeedSettings, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(newsFeedSettings, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(newsFeedSettings, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(newsFeedSettings, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(newsFeedSettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(newsFeedSettings, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(newsFeedSettings, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(newsFeedSettings, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(newsFeedSettings, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(newsFeedSettings, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(newsFeedSettings, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(newsFeedSettings, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(newsFeedSettings, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(newsFeedSettings, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(newsFeedSettings, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(newsFeedSettings, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(newsFeedSettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(newsFeedSettings, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(newsFeedSettings, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(newsFeedSettings, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(newsFeedSettings, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(newsFeedSettings, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(newsFeedSettings, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(newsFeedSettings, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(newsFeedSettings, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(newsFeedSettings, DoubleCheck.lazy(this.provideLocationServiceProvider));
        NewsFeedSettings_MembersInjector.injectLocalSettingsService(newsFeedSettings, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        NewsFeedSettings_MembersInjector.injectPremiumService(newsFeedSettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        NewsFeedSettings_MembersInjector.injectConfigService(newsFeedSettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return newsFeedSettings;
    }

    private NewStatusOrCommentActivity injectNewStatusOrCommentActivity(NewStatusOrCommentActivity newStatusOrCommentActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(newStatusOrCommentActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(newStatusOrCommentActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(newStatusOrCommentActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(newStatusOrCommentActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(newStatusOrCommentActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(newStatusOrCommentActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        NewStatusOrCommentActivity_MembersInjector.injectNewsFeedService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesNewsFeedServiceProvider));
        NewStatusOrCommentActivity_MembersInjector.injectStatusAnalytics(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesStatusAnalyticsProvider));
        NewStatusOrCommentActivity_MembersInjector.injectConfigService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        NewStatusOrCommentActivity_MembersInjector.injectImageService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        NewStatusOrCommentActivity_MembersInjector.injectImageUploadService(newStatusOrCommentActivity, DoubleCheck.lazy(this.providesImageUploadServiceProvider));
        return newStatusOrCommentActivity;
    }

    private NewStrength injectNewStrength(NewStrength newStrength) {
        MfpActivity_MembersInjector.injectAdsSettings(newStrength, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(newStrength, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(newStrength, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(newStrength, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(newStrength, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(newStrength, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(newStrength, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(newStrength, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(newStrength, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(newStrength, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(newStrength, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(newStrength, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(newStrength, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(newStrength, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(newStrength, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(newStrength, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(newStrength, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(newStrength, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(newStrength, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(newStrength, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(newStrength, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(newStrength, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(newStrength, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(newStrength, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(newStrength, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(newStrength, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(newStrength, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(newStrength, DoubleCheck.lazy(this.provideLocationServiceProvider));
        GenericExercise_MembersInjector.injectExerciseService(newStrength, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        GenericExercise_MembersInjector.injectDiaryService(newStrength, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        NewStrength_MembersInjector.injectUserWeightService(newStrength, DoubleCheck.lazy(this.userWeightServiceProvider));
        NewStrength_MembersInjector.injectLocalizedStringsUtil(newStrength, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        NewStrength_MembersInjector.injectUserEnergyService(newStrength, DoubleCheck.lazy(this.userEnergyServiceProvider));
        NewStrength_MembersInjector.injectExerciseAnalyticsHelper(newStrength, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        return newStrength;
    }

    private NotificationInboxActivity injectNotificationInboxActivity(NotificationInboxActivity notificationInboxActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(notificationInboxActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(notificationInboxActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(notificationInboxActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(notificationInboxActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(notificationInboxActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(notificationInboxActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(notificationInboxActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(notificationInboxActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(notificationInboxActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(notificationInboxActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(notificationInboxActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(notificationInboxActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(notificationInboxActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(notificationInboxActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(notificationInboxActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(notificationInboxActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(notificationInboxActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(notificationInboxActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(notificationInboxActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(notificationInboxActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(notificationInboxActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(notificationInboxActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(notificationInboxActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(notificationInboxActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(notificationInboxActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(notificationInboxActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(notificationInboxActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(notificationInboxActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return notificationInboxActivity;
    }

    private Nutrition injectNutrition(Nutrition nutrition) {
        MfpActivity_MembersInjector.injectAdsSettings(nutrition, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(nutrition, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(nutrition, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(nutrition, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(nutrition, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(nutrition, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(nutrition, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(nutrition, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(nutrition, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(nutrition, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(nutrition, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(nutrition, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(nutrition, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(nutrition, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(nutrition, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(nutrition, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(nutrition, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(nutrition, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(nutrition, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(nutrition, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(nutrition, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(nutrition, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(nutrition, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(nutrition, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(nutrition, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(nutrition, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(nutrition, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(nutrition, DoubleCheck.lazy(this.provideLocationServiceProvider));
        NutritionPremiumActivityBase_MembersInjector.injectUserEnergyService(nutrition, DoubleCheck.lazy(this.userEnergyServiceProvider));
        Nutrition_MembersInjector.injectNutritionGraphService(nutrition, DoubleCheck.lazy(this.providesNutritionGraphPreferenceServiceProvider));
        Nutrition_MembersInjector.injectPremiumService(nutrition, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        Nutrition_MembersInjector.injectLocalSettingsService(nutrition, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        Nutrition_MembersInjector.injectFileExportAnalyticsHelper(nutrition, DoubleCheck.lazy(this.providesFileExportAnalyticsHelperProvider));
        return nutrition;
    }

    private NutrientDashboardSettingsActivity injectNutrientDashboardSettingsActivity(NutrientDashboardSettingsActivity nutrientDashboardSettingsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(nutrientDashboardSettingsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(nutrientDashboardSettingsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(nutrientDashboardSettingsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        NutrientDashboardSettingsActivity_MembersInjector.injectPremiumApiErrorUtil(nutrientDashboardSettingsActivity, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return nutrientDashboardSettingsActivity;
    }

    private OAuthActivity injectOAuthActivity(OAuthActivity oAuthActivity) {
        OAuthActivity_MembersInjector.injectApiUrlProvider(oAuthActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        OAuthActivity_MembersInjector.injectNavigationHelper(oAuthActivity, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        OAuthActivity_MembersInjector.injectSession(oAuthActivity, DoubleCheck.lazy(this.providesSessionProvider));
        OAuthActivity_MembersInjector.injectLoginModel(oAuthActivity, DoubleCheck.lazy(this.providesLoginModelProvider));
        return oAuthActivity;
    }

    private PasscodeView injectPasscodeView(PasscodeView passcodeView) {
        MfpActivity_MembersInjector.injectAdsSettings(passcodeView, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(passcodeView, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(passcodeView, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(passcodeView, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(passcodeView, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(passcodeView, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(passcodeView, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(passcodeView, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(passcodeView, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(passcodeView, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(passcodeView, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(passcodeView, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(passcodeView, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(passcodeView, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(passcodeView, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(passcodeView, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(passcodeView, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(passcodeView, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(passcodeView, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(passcodeView, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(passcodeView, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(passcodeView, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(passcodeView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(passcodeView, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(passcodeView, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(passcodeView, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(passcodeView, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(passcodeView, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PasscodeView_MembersInjector.injectGlobalSettingsService(passcodeView, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        PasscodeView_MembersInjector.injectDbConnectionManager(passcodeView, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return passcodeView;
    }

    private PaymentActivityBase injectPaymentActivityBase(PaymentActivityBase paymentActivityBase) {
        MfpActivity_MembersInjector.injectAdsSettings(paymentActivityBase, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(paymentActivityBase, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(paymentActivityBase, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(paymentActivityBase, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(paymentActivityBase, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(paymentActivityBase, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(paymentActivityBase, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(paymentActivityBase, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(paymentActivityBase, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(paymentActivityBase, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(paymentActivityBase, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(paymentActivityBase, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(paymentActivityBase, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(paymentActivityBase, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(paymentActivityBase, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(paymentActivityBase, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(paymentActivityBase, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(paymentActivityBase, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(paymentActivityBase, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(paymentActivityBase, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(paymentActivityBase, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(paymentActivityBase, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(paymentActivityBase, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(paymentActivityBase, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(paymentActivityBase, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(paymentActivityBase, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(paymentActivityBase, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(paymentActivityBase, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PaymentActivityBase_MembersInjector.injectSubscriptionService(paymentActivityBase, DoubleCheck.lazy(this.providesSubscriptionServiceProvider));
        PaymentActivityBase_MembersInjector.injectPaymentService(paymentActivityBase, DoubleCheck.lazy(this.providesPaymentServiceProvider));
        PaymentActivityBase_MembersInjector.injectGeoLocationService(paymentActivityBase, DoubleCheck.lazy(this.providesGeoLocationServiceProvider));
        PaymentActivityBase_MembersInjector.injectPaymentAnalytics(paymentActivityBase, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        return paymentActivityBase;
    }

    private PaymentConfirmation injectPaymentConfirmation(PaymentConfirmation paymentConfirmation) {
        MfpActivity_MembersInjector.injectAdsSettings(paymentConfirmation, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(paymentConfirmation, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(paymentConfirmation, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(paymentConfirmation, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(paymentConfirmation, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(paymentConfirmation, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(paymentConfirmation, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(paymentConfirmation, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(paymentConfirmation, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(paymentConfirmation, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(paymentConfirmation, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(paymentConfirmation, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(paymentConfirmation, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(paymentConfirmation, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(paymentConfirmation, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(paymentConfirmation, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(paymentConfirmation, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(paymentConfirmation, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(paymentConfirmation, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(paymentConfirmation, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(paymentConfirmation, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(paymentConfirmation, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(paymentConfirmation, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(paymentConfirmation, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(paymentConfirmation, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(paymentConfirmation, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(paymentConfirmation, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(paymentConfirmation, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PaymentConfirmation_MembersInjector.injectSubscriptionService(paymentConfirmation, DoubleCheck.lazy(this.providesSubscriptionServiceProvider));
        PaymentConfirmation_MembersInjector.injectPaymentAnalyticsHelper(paymentConfirmation, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        return paymentConfirmation;
    }

    private PaymentsDebugActivity injectPaymentsDebugActivity(PaymentsDebugActivity paymentsDebugActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(paymentsDebugActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(paymentsDebugActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(paymentsDebugActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(paymentsDebugActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(paymentsDebugActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(paymentsDebugActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(paymentsDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(paymentsDebugActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(paymentsDebugActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(paymentsDebugActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(paymentsDebugActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(paymentsDebugActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(paymentsDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(paymentsDebugActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(paymentsDebugActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(paymentsDebugActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(paymentsDebugActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(paymentsDebugActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(paymentsDebugActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(paymentsDebugActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(paymentsDebugActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(paymentsDebugActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(paymentsDebugActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(paymentsDebugActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(paymentsDebugActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(paymentsDebugActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(paymentsDebugActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(paymentsDebugActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PaymentsDebugActivity_MembersInjector.injectProductService(paymentsDebugActivity, DoubleCheck.lazy(this.providesProductServiceProvider));
        PaymentsDebugActivity_MembersInjector.injectPaymentService(paymentsDebugActivity, DoubleCheck.lazy(this.providesPaymentServiceProvider));
        PaymentsDebugActivity_MembersInjector.injectSubscriptionService(paymentsDebugActivity, DoubleCheck.lazy(this.providesSubscriptionServiceProvider));
        PaymentsDebugActivity_MembersInjector.injectUpsellService(paymentsDebugActivity, DoubleCheck.lazy(this.providesUpsellServiceProvider));
        return paymentsDebugActivity;
    }

    private AdConsentsActivity injectAdConsentsActivity(AdConsentsActivity adConsentsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(adConsentsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(adConsentsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(adConsentsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(adConsentsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(adConsentsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(adConsentsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(adConsentsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(adConsentsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(adConsentsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(adConsentsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(adConsentsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(adConsentsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(adConsentsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(adConsentsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(adConsentsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(adConsentsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(adConsentsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(adConsentsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(adConsentsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(adConsentsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(adConsentsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(adConsentsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(adConsentsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(adConsentsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(adConsentsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(adConsentsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(adConsentsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(adConsentsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AdConsentsActivity_MembersInjector.injectVmFactory(adConsentsActivity, (Factory) this.vMFactoryProvider.get());
        AdConsentsActivity_MembersInjector.injectPremiumService(adConsentsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        AdConsentsActivity_MembersInjector.injectAdConsentsAnalyticsHelper(adConsentsActivity, DoubleCheck.lazy(this.provideAdConsentsAnalyticsHelperProvider));
        return adConsentsActivity;
    }

    private PremiumDebugActivity injectPremiumDebugActivity(PremiumDebugActivity premiumDebugActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(premiumDebugActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(premiumDebugActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(premiumDebugActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(premiumDebugActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(premiumDebugActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(premiumDebugActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(premiumDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(premiumDebugActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(premiumDebugActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(premiumDebugActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(premiumDebugActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(premiumDebugActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(premiumDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(premiumDebugActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(premiumDebugActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(premiumDebugActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(premiumDebugActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(premiumDebugActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(premiumDebugActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(premiumDebugActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(premiumDebugActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(premiumDebugActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(premiumDebugActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(premiumDebugActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(premiumDebugActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(premiumDebugActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(premiumDebugActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(premiumDebugActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PremiumDebugActivity_MembersInjector.injectOverrides(premiumDebugActivity, DoubleCheck.lazy(this.providesPremiumFeatureOverridesProvider));
        PremiumDebugActivity_MembersInjector.injectPremiumService(premiumDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        PremiumDebugActivity_MembersInjector.injectGeoService(premiumDebugActivity, DoubleCheck.lazy(this.providesGeoLocationServiceProvider));
        PremiumDebugActivity_MembersInjector.injectAbTestSettings(premiumDebugActivity, DoubleCheck.lazy(this.aBTestSettingsProvider));
        return premiumDebugActivity;
    }

    private PremiumUpsellActivity injectPremiumUpsellActivity(PremiumUpsellActivity premiumUpsellActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(premiumUpsellActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(premiumUpsellActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(premiumUpsellActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(premiumUpsellActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(premiumUpsellActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(premiumUpsellActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(premiumUpsellActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(premiumUpsellActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(premiumUpsellActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(premiumUpsellActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(premiumUpsellActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(premiumUpsellActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(premiumUpsellActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(premiumUpsellActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(premiumUpsellActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(premiumUpsellActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(premiumUpsellActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(premiumUpsellActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(premiumUpsellActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(premiumUpsellActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(premiumUpsellActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(premiumUpsellActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(premiumUpsellActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(premiumUpsellActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(premiumUpsellActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(premiumUpsellActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(premiumUpsellActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(premiumUpsellActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PremiumUpsellActivity_MembersInjector.injectPremiumService(premiumUpsellActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        PremiumUpsellActivity_MembersInjector.injectProductService(premiumUpsellActivity, DoubleCheck.lazy(this.providesProductServiceProvider));
        PremiumUpsellActivity_MembersInjector.injectSubscriptionService(premiumUpsellActivity, DoubleCheck.lazy(this.providesSubscriptionServiceProvider));
        PremiumUpsellActivity_MembersInjector.injectPremiumUpsellNavigator(premiumUpsellActivity, DoubleCheck.lazy(this.providePremiumUpsellNavigatorProvider));
        PremiumUpsellActivity_MembersInjector.injectVmFactory(premiumUpsellActivity, DoubleCheck.lazy(this.providePremiumUpsellViewModelFactoryProvider));
        return premiumUpsellActivity;
    }

    private PrefetchActivity injectPrefetchActivity(PrefetchActivity prefetchActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(prefetchActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(prefetchActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(prefetchActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(prefetchActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(prefetchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(prefetchActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(prefetchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(prefetchActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(prefetchActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(prefetchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(prefetchActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(prefetchActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(prefetchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(prefetchActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(prefetchActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(prefetchActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(prefetchActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(prefetchActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(prefetchActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(prefetchActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(prefetchActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(prefetchActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(prefetchActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(prefetchActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(prefetchActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(prefetchActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(prefetchActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(prefetchActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PrefetchActivity_MembersInjector.injectPrefetchService(prefetchActivity, DoubleCheck.lazy(this.providesPrefetchServiceProvider));
        return prefetchActivity;
    }

    private PremiumInterstitialActivity injectPremiumInterstitialActivity(PremiumInterstitialActivity premiumInterstitialActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(premiumInterstitialActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(premiumInterstitialActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(premiumInterstitialActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(premiumInterstitialActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(premiumInterstitialActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(premiumInterstitialActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(premiumInterstitialActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(premiumInterstitialActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(premiumInterstitialActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(premiumInterstitialActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(premiumInterstitialActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(premiumInterstitialActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(premiumInterstitialActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(premiumInterstitialActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(premiumInterstitialActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(premiumInterstitialActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(premiumInterstitialActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(premiumInterstitialActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PremiumInterstitialActivity_MembersInjector.injectPaymentAnalyticsHelperLazy(premiumInterstitialActivity, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        PremiumInterstitialActivity_MembersInjector.injectProductService(premiumInterstitialActivity, DoubleCheck.lazy(this.providesProductServiceProvider));
        return premiumInterstitialActivity;
    }

    private RestaurantLoggingInterstitial injectRestaurantLoggingInterstitial(RestaurantLoggingInterstitial restaurantLoggingInterstitial) {
        MfpActivity_MembersInjector.injectAdsSettings(restaurantLoggingInterstitial, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(restaurantLoggingInterstitial, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(restaurantLoggingInterstitial, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(restaurantLoggingInterstitial, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(restaurantLoggingInterstitial, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(restaurantLoggingInterstitial, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RestaurantLoggingInterstitial_MembersInjector.injectFoodSearchRouter(restaurantLoggingInterstitial, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return restaurantLoggingInterstitial;
    }

    private PrivacyCenterActivity injectPrivacyCenterActivity(PrivacyCenterActivity privacyCenterActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(privacyCenterActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(privacyCenterActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(privacyCenterActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(privacyCenterActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(privacyCenterActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(privacyCenterActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(privacyCenterActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(privacyCenterActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(privacyCenterActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(privacyCenterActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(privacyCenterActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(privacyCenterActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(privacyCenterActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(privacyCenterActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(privacyCenterActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(privacyCenterActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(privacyCenterActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(privacyCenterActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(privacyCenterActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(privacyCenterActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(privacyCenterActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(privacyCenterActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(privacyCenterActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(privacyCenterActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(privacyCenterActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(privacyCenterActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(privacyCenterActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(privacyCenterActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        PrivacyCenterActivity_MembersInjector.injectConsentsService(privacyCenterActivity, (ConsentsService) this.providesConsentServiceProvider.get());
        PrivacyCenterActivity_MembersInjector.injectUpdatedTermsAnalyticsHelper(privacyCenterActivity, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        return privacyCenterActivity;
    }

    private ProgressActivity injectProgressActivity(ProgressActivity progressActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(progressActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(progressActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(progressActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(progressActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(progressActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(progressActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(progressActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(progressActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(progressActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(progressActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(progressActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(progressActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(progressActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(progressActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(progressActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(progressActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(progressActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(progressActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(progressActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(progressActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(progressActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(progressActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(progressActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(progressActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(progressActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(progressActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(progressActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(progressActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ProgressActivity_MembersInjector.injectLocalizedStringsUtil(progressActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        ProgressActivity_MembersInjector.injectStepsBarChartRenderer(progressActivity, DoubleCheck.lazy(this.providesStepsBarChartRendererProvider));
        ProgressActivity_MembersInjector.injectMeasurementLineChartRenderer(progressActivity, DoubleCheck.lazy(this.providesMeasurementLineChartRendererProvider));
        ProgressActivity_MembersInjector.injectWeightService(progressActivity, DoubleCheck.lazy(this.userWeightServiceProvider));
        ProgressActivity_MembersInjector.injectMeasurementsService(progressActivity, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        ProgressActivity_MembersInjector.injectImageService(progressActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        ProgressActivity_MembersInjector.injectProgressService(progressActivity, DoubleCheck.lazy(this.providesProgressServiceProvider));
        ProgressActivity_MembersInjector.injectProgressAnalytics(progressActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        ProgressActivity_MembersInjector.injectAdsSettings(progressActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        ProgressActivity_MembersInjector.injectAdsAnalyticsHelper(progressActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        ProgressActivity_MembersInjector.injectNavigationHelper(progressActivity, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        ProgressActivity_MembersInjector.injectPremiumService(progressActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        ProgressActivity_MembersInjector.injectLocalSettingsService(progressActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ProgressActivity_MembersInjector.injectConfigService(progressActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        ProgressActivity_MembersInjector.injectUserApplicationSettingsService(progressActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        ProgressActivity_MembersInjector.injectFileExportAnalyticsHelper(progressActivity, DoubleCheck.lazy(this.providesFileExportAnalyticsHelperProvider));
        ProgressActivity_MembersInjector.injectSession(progressActivity, DoubleCheck.lazy(this.providesSessionProvider));
        return progressActivity;
    }

    private ProgressCongratsActivity injectProgressCongratsActivity(ProgressCongratsActivity progressCongratsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(progressCongratsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(progressCongratsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(progressCongratsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(progressCongratsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(progressCongratsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(progressCongratsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(progressCongratsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(progressCongratsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(progressCongratsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(progressCongratsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(progressCongratsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(progressCongratsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(progressCongratsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(progressCongratsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(progressCongratsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(progressCongratsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(progressCongratsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(progressCongratsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(progressCongratsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(progressCongratsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(progressCongratsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(progressCongratsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(progressCongratsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(progressCongratsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(progressCongratsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(progressCongratsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(progressCongratsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(progressCongratsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ProgressCongratsActivity_MembersInjector.injectCongratsService(progressCongratsActivity, DoubleCheck.lazy(this.provideProgressCongratsServiceProvider));
        ProgressCongratsActivity_MembersInjector.injectUserWeightService(progressCongratsActivity, DoubleCheck.lazy(this.userWeightServiceProvider));
        ProgressCongratsActivity_MembersInjector.injectProgressAnalytics(progressCongratsActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        return progressCongratsActivity;
    }

    private ProgressPhotosDebugActivity injectProgressPhotosDebugActivity(ProgressPhotosDebugActivity progressPhotosDebugActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(progressPhotosDebugActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(progressPhotosDebugActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(progressPhotosDebugActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(progressPhotosDebugActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(progressPhotosDebugActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ProgressPhotosDebugActivity_MembersInjector.injectLocalSettings(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ProgressPhotosDebugActivity_MembersInjector.injectImageAssociationService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesImageAssociationServiceProvider));
        ProgressPhotosDebugActivity_MembersInjector.injectImageSyncService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesImageSyncServiceProvider));
        ProgressPhotosDebugActivity_MembersInjector.injectMeasurementsService(progressPhotosDebugActivity, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        ProgressPhotosDebugActivity_MembersInjector.injectProgressCongrats(progressPhotosDebugActivity, DoubleCheck.lazy(this.provideProgressCongratsServiceProvider));
        return progressPhotosDebugActivity;
    }

    private ProgressPhotosGalleryActivity injectProgressPhotosGalleryActivity(ProgressPhotosGalleryActivity progressPhotosGalleryActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(progressPhotosGalleryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(progressPhotosGalleryActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(progressPhotosGalleryActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(progressPhotosGalleryActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ProgressPhotosGalleryActivity_MembersInjector.injectImageService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        ProgressPhotosGalleryActivity_MembersInjector.injectProgressService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesProgressServiceProvider));
        ProgressPhotosGalleryActivity_MembersInjector.injectUserWeightService(progressPhotosGalleryActivity, DoubleCheck.lazy(this.userWeightServiceProvider));
        ProgressPhotosGalleryActivity_MembersInjector.injectProgressAnalytics(progressPhotosGalleryActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        return progressPhotosGalleryActivity;
    }

    private ProgressPhotosInterstitialActivity injectProgressPhotosInterstitialActivity(ProgressPhotosInterstitialActivity progressPhotosInterstitialActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(progressPhotosInterstitialActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(progressPhotosInterstitialActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(progressPhotosInterstitialActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ProgressPhotosInterstitialActivity_MembersInjector.injectLocalSettingsService(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ProgressPhotosInterstitialActivity_MembersInjector.injectProgressAnalytics(progressPhotosInterstitialActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        return progressPhotosInterstitialActivity;
    }

    private PrototypeHomeActivity injectPrototypeHomeActivity(PrototypeHomeActivity prototypeHomeActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(prototypeHomeActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(prototypeHomeActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(prototypeHomeActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(prototypeHomeActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(prototypeHomeActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(prototypeHomeActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(prototypeHomeActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(prototypeHomeActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(prototypeHomeActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(prototypeHomeActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(prototypeHomeActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(prototypeHomeActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(prototypeHomeActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(prototypeHomeActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(prototypeHomeActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(prototypeHomeActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(prototypeHomeActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(prototypeHomeActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(prototypeHomeActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(prototypeHomeActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(prototypeHomeActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(prototypeHomeActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(prototypeHomeActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(prototypeHomeActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(prototypeHomeActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(prototypeHomeActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(prototypeHomeActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(prototypeHomeActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return prototypeHomeActivity;
    }

    private QuickAddActivity injectQuickAddActivity(QuickAddActivity quickAddActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(quickAddActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(quickAddActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(quickAddActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(quickAddActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(quickAddActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(quickAddActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(quickAddActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(quickAddActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(quickAddActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(quickAddActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(quickAddActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(quickAddActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(quickAddActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(quickAddActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(quickAddActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(quickAddActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(quickAddActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(quickAddActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(quickAddActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(quickAddActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(quickAddActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(quickAddActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(quickAddActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(quickAddActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(quickAddActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(quickAddActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(quickAddActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(quickAddActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        QuickAddActivity_MembersInjector.injectPremiumService(quickAddActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        QuickAddActivity_MembersInjector.injectUserEnergyService(quickAddActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        QuickAddActivity_MembersInjector.injectLocalizedStringsUtil(quickAddActivity, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        QuickAddActivity_MembersInjector.injectAnalyticsService(quickAddActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        QuickAddActivity_MembersInjector.injectLocalSettingsService(quickAddActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        QuickAddActivity_MembersInjector.injectDiaryService(quickAddActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        QuickAddActivity_MembersInjector.injectSyncScheduler(quickAddActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        QuickAddActivity_MembersInjector.injectDbConnectionManager(quickAddActivity, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return quickAddActivity;
    }

    private RecipesAndFoods injectRecipesAndFoods(RecipesAndFoods recipesAndFoods) {
        MfpActivity_MembersInjector.injectAdsSettings(recipesAndFoods, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(recipesAndFoods, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(recipesAndFoods, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(recipesAndFoods, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(recipesAndFoods, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(recipesAndFoods, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(recipesAndFoods, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(recipesAndFoods, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(recipesAndFoods, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(recipesAndFoods, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(recipesAndFoods, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(recipesAndFoods, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(recipesAndFoods, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(recipesAndFoods, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(recipesAndFoods, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(recipesAndFoods, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(recipesAndFoods, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(recipesAndFoods, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(recipesAndFoods, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(recipesAndFoods, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(recipesAndFoods, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(recipesAndFoods, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(recipesAndFoods, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(recipesAndFoods, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(recipesAndFoods, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(recipesAndFoods, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(recipesAndFoods, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(recipesAndFoods, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RecipesAndFoods_MembersInjector.injectMealAnalyticsHelper(recipesAndFoods, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        RecipesAndFoods_MembersInjector.injectRecipesMealsFoodsAnalyticsHelper(recipesAndFoods, DoubleCheck.lazy(this.providesSettingsAnalyticsHelperProvider));
        RecipesAndFoods_MembersInjector.injectFoodSearchRouter(recipesAndFoods, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return recipesAndFoods;
    }

    private RecipeDetailsActivity injectRecipeDetailsActivity(RecipeDetailsActivity recipeDetailsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(recipeDetailsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(recipeDetailsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(recipeDetailsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(recipeDetailsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(recipeDetailsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(recipeDetailsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(recipeDetailsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(recipeDetailsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(recipeDetailsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(recipeDetailsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(recipeDetailsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(recipeDetailsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(recipeDetailsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(recipeDetailsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(recipeDetailsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(recipeDetailsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(recipeDetailsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(recipeDetailsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(recipeDetailsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(recipeDetailsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(recipeDetailsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(recipeDetailsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(recipeDetailsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeDetailsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(recipeDetailsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(recipeDetailsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(recipeDetailsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(recipeDetailsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RecipeDetailsActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeDetailsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        RecipeDetailsActivity_MembersInjector.injectFoodSearchRouter(recipeDetailsActivity, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return recipeDetailsActivity;
    }

    private RecipeImportBrowserActivity injectRecipeImportBrowserActivity(RecipeImportBrowserActivity recipeImportBrowserActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(recipeImportBrowserActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(recipeImportBrowserActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(recipeImportBrowserActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(recipeImportBrowserActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(recipeImportBrowserActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(recipeImportBrowserActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RecipeImportBrowserActivity_MembersInjector.injectRecipeService(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        RecipeImportBrowserActivity_MembersInjector.injectApiUrlProvider(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        RecipeImportBrowserActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeImportBrowserActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return recipeImportBrowserActivity;
    }

    private RecipeImportReviewActivity injectRecipeImportReviewActivity(RecipeImportReviewActivity recipeImportReviewActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(recipeImportReviewActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(recipeImportReviewActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(recipeImportReviewActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(recipeImportReviewActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(recipeImportReviewActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(recipeImportReviewActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(recipeImportReviewActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(recipeImportReviewActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(recipeImportReviewActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(recipeImportReviewActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(recipeImportReviewActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(recipeImportReviewActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(recipeImportReviewActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(recipeImportReviewActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(recipeImportReviewActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(recipeImportReviewActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(recipeImportReviewActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(recipeImportReviewActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeImportReviewActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(recipeImportReviewActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(recipeImportReviewActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(recipeImportReviewActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(recipeImportReviewActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RecipeImportReviewActivity_MembersInjector.injectRecipesAnalyticsHelper(recipeImportReviewActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return recipeImportReviewActivity;
    }

    private RecommendGoal injectRecommendGoal(RecommendGoal recommendGoal) {
        MfpActivity_MembersInjector.injectAdsSettings(recommendGoal, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(recommendGoal, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(recommendGoal, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(recommendGoal, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(recommendGoal, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(recommendGoal, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(recommendGoal, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(recommendGoal, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(recommendGoal, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(recommendGoal, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(recommendGoal, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(recommendGoal, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(recommendGoal, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(recommendGoal, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(recommendGoal, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(recommendGoal, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(recommendGoal, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(recommendGoal, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(recommendGoal, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(recommendGoal, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(recommendGoal, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(recommendGoal, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(recommendGoal, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(recommendGoal, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(recommendGoal, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(recommendGoal, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(recommendGoal, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(recommendGoal, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RecommendGoal_MembersInjector.injectUserWeightService(recommendGoal, DoubleCheck.lazy(this.userWeightServiceProvider));
        RecommendGoal_MembersInjector.injectUserHeightService(recommendGoal, DoubleCheck.lazy(this.userHeightServiceProvider));
        RecommendGoal_MembersInjector.injectAnalyticsService(recommendGoal, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        RecommendGoal_MembersInjector.injectNutrientGoalsUtil(recommendGoal, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        RecommendGoal_MembersInjector.injectDiaryService(recommendGoal, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        RecommendGoal_MembersInjector.injectNutrientGoalService(recommendGoal, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        RecommendGoal_MembersInjector.injectSession(recommendGoal, DoubleCheck.lazy(this.providesSessionProvider));
        return recommendGoal;
    }

    private RetrieveMealFoodDebugActivity injectRetrieveMealFoodDebugActivity(RetrieveMealFoodDebugActivity retrieveMealFoodDebugActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(retrieveMealFoodDebugActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(retrieveMealFoodDebugActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(retrieveMealFoodDebugActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RetrieveMealFoodDebugActivity_MembersInjector.injectSearchService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.providesSearchServiceProvider));
        RetrieveMealFoodDebugActivity_MembersInjector.injectFoodService(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideFoodServiceProvider));
        RetrieveMealFoodDebugActivity_MembersInjector.injectDbConnectionManager(retrieveMealFoodDebugActivity, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return retrieveMealFoodDebugActivity;
    }

    private RolloutDebugActivity injectRolloutDebugActivity(RolloutDebugActivity rolloutDebugActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(rolloutDebugActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(rolloutDebugActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(rolloutDebugActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(rolloutDebugActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(rolloutDebugActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(rolloutDebugActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(rolloutDebugActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(rolloutDebugActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(rolloutDebugActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(rolloutDebugActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(rolloutDebugActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(rolloutDebugActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(rolloutDebugActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(rolloutDebugActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(rolloutDebugActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(rolloutDebugActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(rolloutDebugActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(rolloutDebugActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(rolloutDebugActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(rolloutDebugActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(rolloutDebugActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(rolloutDebugActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(rolloutDebugActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(rolloutDebugActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(rolloutDebugActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(rolloutDebugActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(rolloutDebugActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(rolloutDebugActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        RolloutDebugActivity_MembersInjector.injectAbTestSettings(rolloutDebugActivity, getABTestSettings());
        return rolloutDebugActivity;
    }

    private SearchMatchActivity injectSearchMatchActivity(SearchMatchActivity searchMatchActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(searchMatchActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(searchMatchActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(searchMatchActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(searchMatchActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(searchMatchActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(searchMatchActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(searchMatchActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(searchMatchActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(searchMatchActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(searchMatchActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(searchMatchActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(searchMatchActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(searchMatchActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(searchMatchActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(searchMatchActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(searchMatchActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(searchMatchActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(searchMatchActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(searchMatchActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(searchMatchActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(searchMatchActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(searchMatchActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(searchMatchActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(searchMatchActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(searchMatchActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(searchMatchActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(searchMatchActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(searchMatchActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        SearchMatchActivity_MembersInjector.injectRestaurantLoggingAnalyticsHelper(searchMatchActivity, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        return searchMatchActivity;
    }

    private SelectReminder injectSelectReminder(SelectReminder selectReminder) {
        MfpActivity_MembersInjector.injectAdsSettings(selectReminder, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(selectReminder, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(selectReminder, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(selectReminder, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(selectReminder, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(selectReminder, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(selectReminder, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(selectReminder, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(selectReminder, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(selectReminder, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(selectReminder, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(selectReminder, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(selectReminder, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(selectReminder, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(selectReminder, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(selectReminder, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(selectReminder, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(selectReminder, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(selectReminder, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(selectReminder, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(selectReminder, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(selectReminder, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(selectReminder, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(selectReminder, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(selectReminder, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(selectReminder, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(selectReminder, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(selectReminder, DoubleCheck.lazy(this.provideLocationServiceProvider));
        SelectReminder_MembersInjector.injectRemindersService(selectReminder, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        SelectReminder_MembersInjector.injectLocalizedStringsUtil(selectReminder, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return selectReminder;
    }

    private SettingsActivity injectSettingsActivity(SettingsActivity settingsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(settingsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(settingsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(settingsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(settingsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(settingsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(settingsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(settingsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(settingsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(settingsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(settingsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(settingsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(settingsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(settingsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(settingsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(settingsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(settingsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(settingsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(settingsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(settingsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(settingsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(settingsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(settingsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(settingsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(settingsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(settingsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(settingsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(settingsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(settingsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        SettingsActivity_MembersInjector.injectSyncService(settingsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        SettingsActivity_MembersInjector.injectPremiumService(settingsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        SettingsActivity_MembersInjector.injectDeleteAccountAnalyticsHelper(settingsActivity, DoubleCheck.lazy(this.provideDeleteAccountAnalyticsHelperProvider));
        SettingsActivity_MembersInjector.injectConsentsAnalyticsHelper(settingsActivity, DoubleCheck.lazy(this.provideConsentsAnalyticsHelperProvider));
        return settingsActivity;
    }

    private ShareProgressActivity injectShareProgressActivity(ShareProgressActivity shareProgressActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(shareProgressActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(shareProgressActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(shareProgressActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(shareProgressActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(shareProgressActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(shareProgressActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(shareProgressActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(shareProgressActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(shareProgressActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(shareProgressActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(shareProgressActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(shareProgressActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(shareProgressActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(shareProgressActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(shareProgressActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(shareProgressActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(shareProgressActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(shareProgressActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(shareProgressActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(shareProgressActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(shareProgressActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(shareProgressActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(shareProgressActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(shareProgressActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(shareProgressActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(shareProgressActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(shareProgressActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(shareProgressActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ShareProgressActivity_MembersInjector.injectProgressAnalytics(shareProgressActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        ShareProgressActivity_MembersInjector.injectProgressService(shareProgressActivity, DoubleCheck.lazy(this.providesProgressServiceProvider));
        ShareProgressActivity_MembersInjector.injectConfigService(shareProgressActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return shareProgressActivity;
    }

    private StatusUpdateActivity injectStatusUpdateActivity(StatusUpdateActivity statusUpdateActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(statusUpdateActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(statusUpdateActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(statusUpdateActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(statusUpdateActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(statusUpdateActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(statusUpdateActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(statusUpdateActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(statusUpdateActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(statusUpdateActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(statusUpdateActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(statusUpdateActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(statusUpdateActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(statusUpdateActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(statusUpdateActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(statusUpdateActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(statusUpdateActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(statusUpdateActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(statusUpdateActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(statusUpdateActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(statusUpdateActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(statusUpdateActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(statusUpdateActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(statusUpdateActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(statusUpdateActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(statusUpdateActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(statusUpdateActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(statusUpdateActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(statusUpdateActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        StatusUpdateActivity_MembersInjector.injectProgressAnalytics(statusUpdateActivity, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        StatusUpdateActivity_MembersInjector.injectImageService(statusUpdateActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        StatusUpdateActivity_MembersInjector.injectImageUploadService(statusUpdateActivity, DoubleCheck.lazy(this.providesImageUploadServiceProvider));
        StatusUpdateActivity_MembersInjector.injectNewsFeedService(statusUpdateActivity, DoubleCheck.lazy(this.providesNewsFeedServiceProvider));
        StatusUpdateActivity_MembersInjector.injectFoodPermissionsService(statusUpdateActivity, DoubleCheck.lazy(this.providesFoodPermissionsServiceProvider));
        StatusUpdateActivity_MembersInjector.injectMealService(statusUpdateActivity, DoubleCheck.lazy(this.providesMealServiceProvider));
        StatusUpdateActivity_MembersInjector.injectMealAnalyticsHelper(statusUpdateActivity, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        StatusUpdateActivity_MembersInjector.injectMealBrowseAnalytics(statusUpdateActivity, DoubleCheck.lazy(this.provideMealBrowseAnalyticsHelperProvider));
        StatusUpdateActivity_MembersInjector.injectFoodNotes(statusUpdateActivity, DoubleCheck.lazy(this.foodNotesTableProvider));
        return statusUpdateActivity;
    }

    private SignUpActivity injectSignUpActivity(SignUpActivity signUpActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(signUpActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(signUpActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(signUpActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(signUpActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(signUpActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(signUpActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(signUpActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(signUpActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(signUpActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(signUpActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(signUpActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(signUpActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(signUpActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(signUpActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(signUpActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(signUpActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(signUpActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(signUpActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(signUpActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(signUpActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(signUpActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(signUpActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(signUpActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(signUpActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(signUpActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(signUpActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(signUpActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(signUpActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        SignUpActivity_MembersInjector.injectEmailValidator(signUpActivity, ApplicationModule_ProvideEmailValidatorFactory.proxyProvideEmailValidator(this.applicationModule));
        SignUpActivity_MembersInjector.injectSignUpService(signUpActivity, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpActivity_MembersInjector.injectSignUpModel(signUpActivity, (SignUpModel) this.providesSignUpModelProvider.get());
        SignUpActivity_MembersInjector.injectLoginModel(signUpActivity, (LoginModel) this.providesLoginModelProvider.get());
        SignUpActivity_MembersInjector.injectConfigService(signUpActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpActivity_MembersInjector.injectConsentsService(signUpActivity, DoubleCheck.lazy(this.providesConsentServiceProvider));
        return signUpActivity;
    }

    private SubscriptionStatus injectSubscriptionStatus(SubscriptionStatus subscriptionStatus) {
        MfpActivity_MembersInjector.injectAdsSettings(subscriptionStatus, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(subscriptionStatus, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(subscriptionStatus, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(subscriptionStatus, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(subscriptionStatus, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(subscriptionStatus, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(subscriptionStatus, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(subscriptionStatus, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(subscriptionStatus, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(subscriptionStatus, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(subscriptionStatus, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(subscriptionStatus, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(subscriptionStatus, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(subscriptionStatus, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(subscriptionStatus, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(subscriptionStatus, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(subscriptionStatus, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(subscriptionStatus, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(subscriptionStatus, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(subscriptionStatus, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(subscriptionStatus, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(subscriptionStatus, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(subscriptionStatus, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(subscriptionStatus, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(subscriptionStatus, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(subscriptionStatus, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(subscriptionStatus, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(subscriptionStatus, DoubleCheck.lazy(this.provideLocationServiceProvider));
        SubscriptionStatus_MembersInjector.injectPaymentAnalyticsHelper(subscriptionStatus, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        return subscriptionStatus;
    }

    private TermsOfUseActivity injectTermsOfUseActivity(TermsOfUseActivity termsOfUseActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(termsOfUseActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(termsOfUseActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(termsOfUseActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(termsOfUseActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(termsOfUseActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(termsOfUseActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(termsOfUseActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(termsOfUseActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(termsOfUseActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(termsOfUseActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(termsOfUseActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(termsOfUseActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(termsOfUseActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(termsOfUseActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(termsOfUseActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(termsOfUseActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(termsOfUseActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(termsOfUseActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(termsOfUseActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(termsOfUseActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(termsOfUseActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(termsOfUseActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(termsOfUseActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(termsOfUseActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(termsOfUseActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(termsOfUseActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(termsOfUseActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(termsOfUseActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FullScreenWebView_MembersInjector.injectApiUrlProvider(termsOfUseActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        FullScreenWebView_MembersInjector.injectLocalSettingsService(termsOfUseActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        TermsOfUseActivity_MembersInjector.injectApiUrlProvider(termsOfUseActivity, getApiUrlProvider());
        TermsOfUseActivity_MembersInjector.injectConfigService(termsOfUseActivity, (ConfigService) this.providesConfigServiceProvider.get());
        TermsOfUseActivity_MembersInjector.injectCountryService(termsOfUseActivity, (CountryService) this.providesCountryServiceProvider.get());
        return termsOfUseActivity;
    }

    private TroubleshootingActivity injectTroubleshootingActivity(TroubleshootingActivity troubleshootingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(troubleshootingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(troubleshootingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(troubleshootingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(troubleshootingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(troubleshootingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(troubleshootingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(troubleshootingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(troubleshootingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(troubleshootingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(troubleshootingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(troubleshootingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(troubleshootingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(troubleshootingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(troubleshootingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(troubleshootingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(troubleshootingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(troubleshootingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(troubleshootingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(troubleshootingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(troubleshootingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(troubleshootingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(troubleshootingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(troubleshootingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(troubleshootingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(troubleshootingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(troubleshootingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(troubleshootingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(troubleshootingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        TroubleshootingActivity_MembersInjector.injectVmFactory(troubleshootingActivity, (Factory) this.vMFactoryProvider.get());
        return troubleshootingActivity;
    }

    private UpdateGoals injectUpdateGoals(UpdateGoals updateGoals) {
        MfpActivity_MembersInjector.injectAdsSettings(updateGoals, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(updateGoals, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(updateGoals, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(updateGoals, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(updateGoals, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(updateGoals, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(updateGoals, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(updateGoals, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(updateGoals, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(updateGoals, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(updateGoals, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(updateGoals, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(updateGoals, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(updateGoals, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(updateGoals, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(updateGoals, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(updateGoals, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(updateGoals, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(updateGoals, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(updateGoals, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(updateGoals, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(updateGoals, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(updateGoals, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(updateGoals, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(updateGoals, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(updateGoals, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(updateGoals, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(updateGoals, DoubleCheck.lazy(this.provideLocationServiceProvider));
        UpdateGoals_MembersInjector.injectActionTrackingService(updateGoals, (ActionTrackingService) this.providesActionTrackingServiceProvider.get());
        UpdateGoals_MembersInjector.injectAnalyticsService(updateGoals, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        UpdateGoals_MembersInjector.injectProductService(updateGoals, DoubleCheck.lazy(this.providesProductServiceProvider));
        return updateGoals;
    }

    private UpdatedTermsActivity injectUpdatedTermsActivity(UpdatedTermsActivity updatedTermsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(updatedTermsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(updatedTermsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(updatedTermsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(updatedTermsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(updatedTermsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(updatedTermsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(updatedTermsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(updatedTermsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(updatedTermsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(updatedTermsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(updatedTermsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(updatedTermsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(updatedTermsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(updatedTermsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(updatedTermsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(updatedTermsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(updatedTermsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(updatedTermsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(updatedTermsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(updatedTermsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(updatedTermsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(updatedTermsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(updatedTermsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(updatedTermsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(updatedTermsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(updatedTermsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(updatedTermsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(updatedTermsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        UpdatedTermsActivity_MembersInjector.injectUpdatedTermsAnalyticsHelper(updatedTermsActivity, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        UpdatedTermsActivity_MembersInjector.injectCountryService(updatedTermsActivity, DoubleCheck.lazy(this.providesCountryServiceProvider));
        UpdatedTermsActivity_MembersInjector.injectApiProvider(updatedTermsActivity, this.providesMfpJsonV2ApiProvider);
        UpdatedTermsActivity_MembersInjector.injectGdprHelpAnalyticsHelper(updatedTermsActivity, DoubleCheck.lazy(this.provideGDPRHelpAnalyticsHelperProvider));
        return updatedTermsActivity;
    }

    private UserAchievementsActivity injectUserAchievementsActivity(UserAchievementsActivity userAchievementsActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(userAchievementsActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(userAchievementsActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(userAchievementsActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(userAchievementsActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(userAchievementsActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(userAchievementsActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(userAchievementsActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(userAchievementsActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(userAchievementsActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(userAchievementsActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(userAchievementsActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(userAchievementsActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(userAchievementsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(userAchievementsActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(userAchievementsActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(userAchievementsActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(userAchievementsActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(userAchievementsActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(userAchievementsActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(userAchievementsActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(userAchievementsActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(userAchievementsActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(userAchievementsActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(userAchievementsActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(userAchievementsActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(userAchievementsActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(userAchievementsActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(userAchievementsActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        UserAchievementsActivity_MembersInjector.injectChallengesService(userAchievementsActivity, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        UserAchievementsActivity_MembersInjector.injectImageService(userAchievementsActivity, DoubleCheck.lazy(this.providesImageServiceProvider));
        UserAchievementsActivity_MembersInjector.injectLocalSettingsService(userAchievementsActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return userAchievementsActivity;
    }

    private VenuesActivity injectVenuesActivity(VenuesActivity venuesActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(venuesActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(venuesActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(venuesActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(venuesActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(venuesActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(venuesActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(venuesActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(venuesActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(venuesActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(venuesActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(venuesActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(venuesActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(venuesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(venuesActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(venuesActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(venuesActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(venuesActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(venuesActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(venuesActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(venuesActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(venuesActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(venuesActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(venuesActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(venuesActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(venuesActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(venuesActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(venuesActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(venuesActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        VenuesActivity_MembersInjector.injectVenueService(venuesActivity, DoubleCheck.lazy(this.providesVenueServiceProvider));
        VenuesActivity_MembersInjector.injectRestaurantLoggingAnalyticsHelper(venuesActivity, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        VenuesActivity_MembersInjector.injectLocalSettingsService(venuesActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return venuesActivity;
    }

    private VideoActivity injectVideoActivity(VideoActivity videoActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(videoActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(videoActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(videoActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(videoActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(videoActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(videoActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(videoActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(videoActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(videoActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(videoActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(videoActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(videoActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(videoActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(videoActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(videoActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(videoActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(videoActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(videoActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(videoActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(videoActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(videoActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(videoActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(videoActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(videoActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(videoActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(videoActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(videoActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(videoActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        VideoActivity_MembersInjector.injectVideoAnalyticsHelper(videoActivity, DoubleCheck.lazy(this.provideVideoAnalyticsHelperProvider));
        VideoActivity_MembersInjector.injectPremiumService(videoActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        VideoActivity_MembersInjector.injectUserApplicationSettingsService(videoActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        VideoActivity_MembersInjector.injectConfigService(videoActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        VideoActivity_MembersInjector.injectAudioManager(videoActivity, DoubleCheck.lazy(this.provideAudioManagerProvider));
        return videoActivity;
    }

    private WalkthroughLoggingActivity injectWalkthroughLoggingActivity(WalkthroughLoggingActivity walkthroughLoggingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(walkthroughLoggingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(walkthroughLoggingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(walkthroughLoggingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(walkthroughLoggingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(walkthroughLoggingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectActionTrackingService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectPremiumService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectAnalyticsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectWalkthroughUtil(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesWalkThroughUtilProvider));
        WalkthroughLoggingActivity_MembersInjector.injectMessageBus(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideOttoBusProvider));
        WalkthroughLoggingActivity_MembersInjector.injectGlobalSettingsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectLocalSettingsService(walkthroughLoggingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        WalkthroughLoggingActivity_MembersInjector.injectProductService(walkthroughLoggingActivity, DoubleCheck.lazy(this.providesProductServiceProvider));
        return walkthroughLoggingActivity;
    }

    private WaterEntryActivity injectWaterEntryActivity(WaterEntryActivity waterEntryActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(waterEntryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(waterEntryActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(waterEntryActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(waterEntryActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(waterEntryActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(waterEntryActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(waterEntryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(waterEntryActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(waterEntryActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(waterEntryActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(waterEntryActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(waterEntryActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(waterEntryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(waterEntryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(waterEntryActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(waterEntryActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(waterEntryActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(waterEntryActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(waterEntryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(waterEntryActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(waterEntryActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(waterEntryActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(waterEntryActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(waterEntryActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(waterEntryActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(waterEntryActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(waterEntryActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(waterEntryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        WaterEntryActivity_MembersInjector.injectUserApplicationSettingsService(waterEntryActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        WaterEntryActivity_MembersInjector.injectWaterLoggingAnalyticsHelper(waterEntryActivity, DoubleCheck.lazy(this.providesWaterLoggingAnalyticsHelperProvider));
        WaterEntryActivity_MembersInjector.injectConfigService(waterEntryActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        WaterEntryActivity_MembersInjector.injectAdsSettings(waterEntryActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        WaterEntryActivity_MembersInjector.injectAdsAnalytics(waterEntryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        WaterEntryActivity_MembersInjector.injectNavigationHelper(waterEntryActivity, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        WaterEntryActivity_MembersInjector.injectMessageBus(waterEntryActivity, DoubleCheck.lazy(this.provideOttoBusProvider));
        WaterEntryActivity_MembersInjector.injectPremiumService(waterEntryActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        WaterEntryActivity_MembersInjector.injectAnalyticsService(waterEntryActivity, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        WaterEntryActivity_MembersInjector.injectAdsAnalyticsHelper(waterEntryActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        WaterEntryActivity_MembersInjector.injectCountryService(waterEntryActivity, DoubleCheck.lazy(this.providesCountryServiceProvider));
        WaterEntryActivity_MembersInjector.injectLocalSettingsService(waterEntryActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        WaterEntryActivity_MembersInjector.injectDiaryService(waterEntryActivity, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        WaterEntryActivity_MembersInjector.injectLocationService(waterEntryActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return waterEntryActivity;
    }

    private WeeklyNutritionSettings injectWeeklyNutritionSettings(WeeklyNutritionSettings weeklyNutritionSettings) {
        MfpActivity_MembersInjector.injectAdsSettings(weeklyNutritionSettings, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(weeklyNutritionSettings, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(weeklyNutritionSettings, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(weeklyNutritionSettings, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(weeklyNutritionSettings, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(weeklyNutritionSettings, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(weeklyNutritionSettings, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(weeklyNutritionSettings, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(weeklyNutritionSettings, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(weeklyNutritionSettings, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(weeklyNutritionSettings, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(weeklyNutritionSettings, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(weeklyNutritionSettings, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(weeklyNutritionSettings, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(weeklyNutritionSettings, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(weeklyNutritionSettings, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(weeklyNutritionSettings, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(weeklyNutritionSettings, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(weeklyNutritionSettings, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(weeklyNutritionSettings, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(weeklyNutritionSettings, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(weeklyNutritionSettings, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(weeklyNutritionSettings, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return weeklyNutritionSettings;
    }

    private Welcome injectWelcome(Welcome welcome) {
        Welcome_MembersInjector.injectStartupManager(welcome, DoubleCheck.lazy(this.provideStartupManagerProvider));
        Welcome_MembersInjector.injectNavigationHelper(welcome, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        Welcome_MembersInjector.injectConfigService(welcome, DoubleCheck.lazy(this.providesConfigServiceProvider));
        Welcome_MembersInjector.injectLogConfig(welcome, DoubleCheck.lazy(this.providesLnConfigProvider));
        Welcome_MembersInjector.injectPrinter(welcome, DoubleCheck.lazy(this.providesPrinterProvider));
        Welcome_MembersInjector.injectSession(welcome, DoubleCheck.lazy(this.providesSessionProvider));
        return welcome;
    }

    private XPromoInterstitialActivity injectXPromoInterstitialActivity(XPromoInterstitialActivity xPromoInterstitialActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(xPromoInterstitialActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(xPromoInterstitialActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(xPromoInterstitialActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(xPromoInterstitialActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(xPromoInterstitialActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(xPromoInterstitialActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(xPromoInterstitialActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        return xPromoInterstitialActivity;
    }

    private ViewFoodActivity injectViewFoodActivity(ViewFoodActivity viewFoodActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(viewFoodActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(viewFoodActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(viewFoodActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(viewFoodActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(viewFoodActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(viewFoodActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(viewFoodActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(viewFoodActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(viewFoodActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(viewFoodActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(viewFoodActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(viewFoodActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(viewFoodActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(viewFoodActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(viewFoodActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(viewFoodActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(viewFoodActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(viewFoodActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(viewFoodActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(viewFoodActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(viewFoodActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(viewFoodActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(viewFoodActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(viewFoodActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(viewFoodActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(viewFoodActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(viewFoodActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(viewFoodActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        ViewFoodActivity_MembersInjector.injectUserEnergyService(viewFoodActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return viewFoodActivity;
    }

    private FoodFeedbackActivity injectFoodFeedbackActivity(FoodFeedbackActivity foodFeedbackActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(foodFeedbackActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(foodFeedbackActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(foodFeedbackActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(foodFeedbackActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(foodFeedbackActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(foodFeedbackActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(foodFeedbackActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(foodFeedbackActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(foodFeedbackActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(foodFeedbackActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(foodFeedbackActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(foodFeedbackActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(foodFeedbackActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(foodFeedbackActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(foodFeedbackActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(foodFeedbackActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(foodFeedbackActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(foodFeedbackActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(foodFeedbackActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(foodFeedbackActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(foodFeedbackActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(foodFeedbackActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(foodFeedbackActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(foodFeedbackActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(foodFeedbackActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(foodFeedbackActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(foodFeedbackActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(foodFeedbackActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        FoodFeedbackActivity_MembersInjector.injectVmFactory(foodFeedbackActivity, (Factory) this.vMFactoryProvider.get());
        FoodFeedbackActivity_MembersInjector.injectFoodFeedbackAnalyticsHelper(foodFeedbackActivity, DoubleCheck.lazy(this.provideFoodFoodbackAnalyticsHelperProvider));
        FoodFeedbackActivity_MembersInjector.injectUserEnergyService(foodFeedbackActivity, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return foodFeedbackActivity;
    }

    private OnboardingActivity injectOnboardingActivity(OnboardingActivity onboardingActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(onboardingActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(onboardingActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(onboardingActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(onboardingActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(onboardingActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(onboardingActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(onboardingActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(onboardingActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(onboardingActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(onboardingActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(onboardingActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(onboardingActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(onboardingActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(onboardingActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(onboardingActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(onboardingActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(onboardingActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(onboardingActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(onboardingActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(onboardingActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(onboardingActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(onboardingActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(onboardingActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(onboardingActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(onboardingActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(onboardingActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(onboardingActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(onboardingActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        OnboardingActivity_MembersInjector.injectNutrientGoalService(onboardingActivity, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        OnboardingActivity_MembersInjector.injectNavigator(onboardingActivity, (Navigator) this.provideNavigatorProvider.get());
        OnboardingActivity_MembersInjector.injectVmFactory(onboardingActivity, (PremiumOnboardingViewModelFactory) this.providePremiumOnboardingViewFactoryProvider.get());
        return onboardingActivity;
    }

    private AlexaInterstitialActivity injectAlexaInterstitialActivity(AlexaInterstitialActivity alexaInterstitialActivity) {
        MfpActivity_MembersInjector.injectAdsSettings(alexaInterstitialActivity, DoubleCheck.lazy(this.adsSettingsProvider));
        MfpActivity_MembersInjector.injectImm(alexaInterstitialActivity, DoubleCheck.lazy(this.provideInputMethodManagerProvider));
        MfpActivity_MembersInjector.injectStartupManager(alexaInterstitialActivity, (StartupManager) this.provideStartupManagerProvider.get());
        MfpActivity_MembersInjector.injectRecipeService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MfpActivity_MembersInjector.injectActionTrackingService(alexaInterstitialActivity, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MfpActivity_MembersInjector.injectBackgroundServiceHelper(alexaInterstitialActivity, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpActivity_MembersInjector.injectPremiumService(alexaInterstitialActivity, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpActivity_MembersInjector.injectSyncService(alexaInterstitialActivity, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MfpActivity_MembersInjector.injectStepService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpActivity_MembersInjector.injectSyncScheduler(alexaInterstitialActivity, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAnalyticsSyncScheduler(alexaInterstitialActivity, DoubleCheck.lazy(this.providesAnalyticsSyncSchedulerProvider));
        MfpActivity_MembersInjector.injectAppIndexerBot(alexaInterstitialActivity, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        MfpActivity_MembersInjector.injectLocalSettingsService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MfpActivity_MembersInjector.injectAdsAnalyticsHelper(alexaInterstitialActivity, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        MfpActivity_MembersInjector.injectMfpAnalyticsService(alexaInterstitialActivity, DoubleCheck.lazy(this.providesMfpAnalyticsServiceProvider));
        MfpActivity_MembersInjector.injectGoogleFitClient(alexaInterstitialActivity, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        MfpActivity_MembersInjector.injectSamsungConnection(alexaInterstitialActivity, DoubleCheck.lazy(this.providesSHealthConnectionProvider));
        MfpActivity_MembersInjector.injectDeepLinkManager(alexaInterstitialActivity, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        MfpActivity_MembersInjector.injectConfigService(alexaInterstitialActivity, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpActivity_MembersInjector.injectAdUnitService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        MfpActivity_MembersInjector.injectApiUrlProvider(alexaInterstitialActivity, DoubleCheck.lazy(this.provideApiUrlProvider));
        MfpActivity_MembersInjector.injectGlide(alexaInterstitialActivity, (Glide) this.providesGlideProvider.get());
        MfpActivity_MembersInjector.injectGlobalSettingsService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        MfpActivity_MembersInjector.injectRecipesAnalyticsHelper(alexaInterstitialActivity, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectDbConnectionManager(alexaInterstitialActivity, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MfpActivity_MembersInjector.injectAdvancedDebuggingUtil(alexaInterstitialActivity, DoubleCheck.lazy(this.providesAdvancedDebuggingUtilProvider));
        MfpActivity_MembersInjector.injectPermissionAnalyticsHelper(alexaInterstitialActivity, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        MfpActivity_MembersInjector.injectLocationService(alexaInterstitialActivity, DoubleCheck.lazy(this.provideLocationServiceProvider));
        AlexaInterstitialActivity_MembersInjector.injectUserApplicationSettings(alexaInterstitialActivity, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        AlexaInterstitialActivity_MembersInjector.injectAnalyticsHelper(alexaInterstitialActivity, getAlexaInterstitialAnalyticsHelper());
        return alexaInterstitialActivity;
    }

    private AccountRestrictedDialogFragment injectAccountRestrictedDialogFragment(AccountRestrictedDialogFragment accountRestrictedDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(accountRestrictedDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(accountRestrictedDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(accountRestrictedDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(accountRestrictedDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AccountRestrictedDialogFragment_MembersInjector.injectNavigationHelper(accountRestrictedDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        AccountRestrictedDialogFragment_MembersInjector.injectSession(accountRestrictedDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        return accountRestrictedDialogFragment;
    }

    private ActivityLevelDialogFragment injectActivityLevelDialogFragment(ActivityLevelDialogFragment activityLevelDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(activityLevelDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(activityLevelDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(activityLevelDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(activityLevelDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return activityLevelDialogFragment;
    }

    private AdditionalNutrientGoalsFragment injectAdditionalNutrientGoalsFragment(AdditionalNutrientGoalsFragment additionalNutrientGoalsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(additionalNutrientGoalsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(additionalNutrientGoalsFragment, (Glide) this.providesGlideProvider.get());
        AdditionalNutrientGoalsFragment_MembersInjector.injectNutrientGoalsUtil(additionalNutrientGoalsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        AdditionalNutrientGoalsFragment_MembersInjector.injectNutrientGoalService(additionalNutrientGoalsFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        AdditionalNutrientGoalsFragment_MembersInjector.injectPremiumApiErrorUtil(additionalNutrientGoalsFragment, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return additionalNutrientGoalsFragment;
    }

    private AddCustomFoodImprovementDialogFragment injectAddCustomFoodImprovementDialogFragment(AddCustomFoodImprovementDialogFragment addCustomFoodImprovementDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(addCustomFoodImprovementDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(addCustomFoodImprovementDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(addCustomFoodImprovementDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(addCustomFoodImprovementDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AddCustomFoodImprovementDialogFragment_MembersInjector.injectActionTrackingService(addCustomFoodImprovementDialogFragment, (ActionTrackingService) this.providesActionTrackingServiceProvider.get());
        AddCustomFoodImprovementDialogFragment_MembersInjector.injectConfigService(addCustomFoodImprovementDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        AddCustomFoodImprovementDialogFragment_MembersInjector.injectAnalyticsService(addCustomFoodImprovementDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return addCustomFoodImprovementDialogFragment;
    }

    private AdvancedDebuggingFragment injectAdvancedDebuggingFragment(AdvancedDebuggingFragment advancedDebuggingFragment) {
        AdvancedDebuggingFragment_MembersInjector.injectApiUrlProvider(advancedDebuggingFragment, getApiUrlProvider());
        AdvancedDebuggingFragment_MembersInjector.injectMfpApiSettings(advancedDebuggingFragment, mfpApiSettings());
        AdvancedDebuggingFragment_MembersInjector.injectAppSettings(advancedDebuggingFragment, getAppSettings());
        AdvancedDebuggingFragment_MembersInjector.injectAdsSettings(advancedDebuggingFragment, getAdsSettings());
        AdvancedDebuggingFragment_MembersInjector.injectRequestInterceptor(advancedDebuggingFragment, (RequestInterceptor) this.providesInterceptorProvider.get());
        AdvancedDebuggingFragment_MembersInjector.injectNavigationHelper(advancedDebuggingFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        AdvancedDebuggingFragment_MembersInjector.injectSignUpService(advancedDebuggingFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        AdvancedDebuggingFragment_MembersInjector.injectSession(advancedDebuggingFragment, (Session) this.providesSessionProvider.get());
        AdvancedDebuggingFragment_MembersInjector.injectLocalSettingsService(advancedDebuggingFragment, getLocalSettingsService());
        AdvancedDebuggingFragment_MembersInjector.injectAuthTokenProvider(advancedDebuggingFragment, authTokenProvider());
        AdvancedDebuggingFragment_MembersInjector.injectUserApplicationSettingsService(advancedDebuggingFragment, (UserApplicationSettingsService) this.providesUserApplicationSettingsServiceProvider.get());
        AdvancedDebuggingFragment_MembersInjector.injectGlobalSettingsService(advancedDebuggingFragment, getGlobalSettingsService());
        AdvancedDebuggingFragment_MembersInjector.injectProductService(advancedDebuggingFragment, (ProductService) this.providesProductServiceProvider.get());
        AdvancedDebuggingFragment_MembersInjector.injectFoodSearchActivityFactory(advancedDebuggingFragment, foodSearchRouter());
        AdvancedDebuggingFragment_MembersInjector.injectDebugSettingsService(advancedDebuggingFragment, getDebugSettingsService());
        AdvancedDebuggingFragment_MembersInjector.injectStoredAchievementEvents(advancedDebuggingFragment, getStoredAchievementEvents());
        return advancedDebuggingFragment;
    }

    private AnalyticsEventsFragment injectAnalyticsEventsFragment(AnalyticsEventsFragment analyticsEventsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(analyticsEventsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(analyticsEventsFragment, (Glide) this.providesGlideProvider.get());
        return analyticsEventsFragment;
    }

    private AppDetailFragment injectAppDetailFragment(AppDetailFragment appDetailFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(appDetailFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(appDetailFragment, (Glide) this.providesGlideProvider.get());
        AppDetailFragment_MembersInjector.injectActionTrackingService(appDetailFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AppDetailFragment_MembersInjector.injectAppGalleryService(appDetailFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        return appDetailFragment;
    }

    private AppsHomeFragment injectAppsHomeFragment(AppsHomeFragment appsHomeFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(appsHomeFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(appsHomeFragment, (Glide) this.providesGlideProvider.get());
        AppsHomeFragment_MembersInjector.injectActionTrackingService(appsHomeFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        AppsHomeFragment_MembersInjector.injectAppGalleryService(appsHomeFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        return appsHomeFragment;
    }

    private AppRatingDialogFragment injectAppRatingDialogFragment(AppRatingDialogFragment appRatingDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(appRatingDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(appRatingDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(appRatingDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(appRatingDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppRatingDialogFragment_MembersInjector.injectNavigationHelper(appRatingDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        AppRatingDialogFragment_MembersInjector.injectAnalyticsService(appRatingDialogFragment, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        AppRatingDialogFragment_MembersInjector.injectLocalSettingsService(appRatingDialogFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        AppRatingDialogFragment_MembersInjector.injectGlobalSettingsService(appRatingDialogFragment, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        return appRatingDialogFragment;
    }

    private BarcodeScanDialogFragment injectBarcodeScanDialogFragment(BarcodeScanDialogFragment barcodeScanDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(barcodeScanDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(barcodeScanDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(barcodeScanDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(barcodeScanDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        BarcodeScanDialogFragment_MembersInjector.injectConfigService(barcodeScanDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return barcodeScanDialogFragment;
    }

    private BlogFragment injectBlogFragment(BlogFragment blogFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(blogFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(blogFragment, (Glide) this.providesGlideProvider.get());
        ExternalWebViewFragment_MembersInjector.injectAnalyticsService(blogFragment, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        ExternalWebViewFragment_MembersInjector.injectConfigService(blogFragment, (ConfigService) this.providesConfigServiceProvider.get());
        BlogFragment_MembersInjector.injectCountryService(blogFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        BlogFragment_MembersInjector.injectPremiumService(blogFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        BlogFragment_MembersInjector.injectApiUrlProvider(blogFragment, DoubleCheck.lazy(this.provideApiUrlProvider));
        return blogFragment;
    }

    private CalorieAddErrorDialogFragment injectCalorieAddErrorDialogFragment(CalorieAddErrorDialogFragment calorieAddErrorDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(calorieAddErrorDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(calorieAddErrorDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(calorieAddErrorDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(calorieAddErrorDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        CalorieAddErrorDialogFragment_MembersInjector.injectLocalizedStringsUtil(calorieAddErrorDialogFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        CalorieAddErrorDialogFragment_MembersInjector.injectUserEnergyService(calorieAddErrorDialogFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        CalorieAddErrorDialogFragment_MembersInjector.injectBus(calorieAddErrorDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        return calorieAddErrorDialogFragment;
    }

    private GenderDialogFragment injectGenderDialogFragment(GenderDialogFragment genderDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(genderDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(genderDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(genderDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(genderDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return genderDialogFragment;
    }

    private GraphPeriodDialogFragment injectGraphPeriodDialogFragment(GraphPeriodDialogFragment graphPeriodDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(graphPeriodDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(graphPeriodDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(graphPeriodDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(graphPeriodDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        GraphPeriodDialogFragment_MembersInjector.injectConfigService(graphPeriodDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return graphPeriodDialogFragment;
    }

    private ChallengesFragment injectChallengesFragment(ChallengesFragment challengesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(challengesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(challengesFragment, (Glide) this.providesGlideProvider.get());
        ChallengesFragment_MembersInjector.injectLocalSettingsService(challengesFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ChallengesFragment_MembersInjector.injectChallengesService(challengesFragment, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        ChallengesFragment_MembersInjector.injectChallengesAnalyticsHelper(challengesFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ChallengesFragment_MembersInjector.injectImageService(challengesFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        return challengesFragment;
    }

    private ChallengeDetailsFragment injectChallengeDetailsFragment(ChallengeDetailsFragment challengeDetailsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(challengeDetailsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(challengeDetailsFragment, (Glide) this.providesGlideProvider.get());
        ChallengeDetailsFragment_MembersInjector.injectImageService(challengeDetailsFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        ChallengeDetailsFragment_MembersInjector.injectChallengesAnalyticsHelper(challengeDetailsFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ChallengeDetailsFragment_MembersInjector.injectDeviceInfo(challengeDetailsFragment, DoubleCheck.lazy(this.providesDeviceInfoProvider));
        return challengeDetailsFragment;
    }

    private ChallengePrizesFragment injectChallengePrizesFragment(ChallengePrizesFragment challengePrizesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(challengePrizesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(challengePrizesFragment, (Glide) this.providesGlideProvider.get());
        ChallengePrizesFragment_MembersInjector.injectImageService(challengePrizesFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        return challengePrizesFragment;
    }

    private ChallengeFriendsFragment injectChallengeFriendsFragment(ChallengeFriendsFragment challengeFriendsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(challengeFriendsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(challengeFriendsFragment, (Glide) this.providesGlideProvider.get());
        ChallengeFriendsFragment_MembersInjector.injectImageService(challengeFriendsFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        ChallengeFriendsFragment_MembersInjector.injectChallengesAnalyticsHelper(challengeFriendsFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ChallengeFriendsFragment_MembersInjector.injectDeviceInfo(challengeFriendsFragment, DoubleCheck.lazy(this.providesDeviceInfoProvider));
        return challengeFriendsFragment;
    }

    private ChallengeWebViewFragment injectChallengeWebViewFragment(ChallengeWebViewFragment challengeWebViewFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(challengeWebViewFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(challengeWebViewFragment, (Glide) this.providesGlideProvider.get());
        ChallengeWebViewFragment_MembersInjector.injectImageService(challengeWebViewFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        return challengeWebViewFragment;
    }

    private CommunityFragment injectCommunityFragment(CommunityFragment communityFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(communityFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(communityFragment, (Glide) this.providesGlideProvider.get());
        ExternalWebViewFragment_MembersInjector.injectAnalyticsService(communityFragment, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        ExternalWebViewFragment_MembersInjector.injectConfigService(communityFragment, (ConfigService) this.providesConfigServiceProvider.get());
        CommunityFragment_MembersInjector.injectCommunityService(communityFragment, getCommunityService());
        return communityFragment;
    }

    private CountryDialogFragment injectCountryDialogFragment(CountryDialogFragment countryDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(countryDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(countryDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(countryDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(countryDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        CountryDialogFragment_MembersInjector.injectCountryService(countryDialogFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        return countryDialogFragment;
    }

    private CreateOrEditRecipeFragment injectCreateOrEditRecipeFragment(CreateOrEditRecipeFragment createOrEditRecipeFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(createOrEditRecipeFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(createOrEditRecipeFragment, (Glide) this.providesGlideProvider.get());
        CreateOrEditRecipeFragment_MembersInjector.injectRecipeService(createOrEditRecipeFragment, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        CreateOrEditRecipeFragment_MembersInjector.injectSyncService(createOrEditRecipeFragment, DoubleCheck.lazy(this.providesSyncEngineProvider));
        CreateOrEditRecipeFragment_MembersInjector.injectRecipesAnalyticsHelper(createOrEditRecipeFragment, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return createOrEditRecipeFragment;
    }

    private CreateRecipeDialogFragment injectCreateRecipeDialogFragment(CreateRecipeDialogFragment createRecipeDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(createRecipeDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(createRecipeDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(createRecipeDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(createRecipeDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        CreateRecipeDialogFragment_MembersInjector.injectConfigService(createRecipeDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        CreateRecipeDialogFragment_MembersInjector.injectRecipesAnalyticsHelper(createRecipeDialogFragment, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        return createRecipeDialogFragment;
    }

    private CustomGoalByDayFragment injectCustomGoalByDayFragment(CustomGoalByDayFragment customGoalByDayFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(customGoalByDayFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(customGoalByDayFragment, (Glide) this.providesGlideProvider.get());
        CustomGoalByDayFragment_MembersInjector.injectNutrientGoalUtils(customGoalByDayFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        CustomGoalByDayFragment_MembersInjector.injectUserEnergyService(customGoalByDayFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        CustomGoalByDayFragment_MembersInjector.injectLocalizedStringsUtil(customGoalByDayFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        CustomGoalByDayFragment_MembersInjector.injectNutrientGoalService(customGoalByDayFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        CustomGoalByDayFragment_MembersInjector.injectSession(customGoalByDayFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomGoalByDayFragment_MembersInjector.injectAnalyticsService(customGoalByDayFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        CustomGoalByDayFragment_MembersInjector.injectPremiumApiErrorUtil(customGoalByDayFragment, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return customGoalByDayFragment;
    }

    private CustomNutrientDashboardSelectionFragment injectCustomNutrientDashboardSelectionFragment(CustomNutrientDashboardSelectionFragment customNutrientDashboardSelectionFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(customNutrientDashboardSelectionFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(customNutrientDashboardSelectionFragment, (Glide) this.providesGlideProvider.get());
        CustomNutrientDashboardSelectionFragment_MembersInjector.injectPremiumApiErrorUtil(customNutrientDashboardSelectionFragment, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return customNutrientDashboardSelectionFragment;
    }

    private CustomLayoutBaseDialogFragment injectCustomLayoutBaseDialogFragment(CustomLayoutBaseDialogFragment customLayoutBaseDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(customLayoutBaseDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(customLayoutBaseDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(customLayoutBaseDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(customLayoutBaseDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return customLayoutBaseDialogFragment;
    }

    private DebugLogsFragment injectDebugLogsFragment(DebugLogsFragment debugLogsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(debugLogsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(debugLogsFragment, (Glide) this.providesGlideProvider.get());
        DebugLogsFragment_MembersInjector.injectLogsDir(debugLogsFragment, getNamedFile());
        DebugLogsFragment_MembersInjector.injectAppSettings(debugLogsFragment, DoubleCheck.lazy(this.appSettingsProvider));
        return debugLogsFragment;
    }

    private DeleteMealConfirmationDialogFragment injectDeleteMealConfirmationDialogFragment(DeleteMealConfirmationDialogFragment deleteMealConfirmationDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(deleteMealConfirmationDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(deleteMealConfirmationDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(deleteMealConfirmationDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(deleteMealConfirmationDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DeleteMealConfirmationDialogFragment_MembersInjector.injectMealService(deleteMealConfirmationDialogFragment, DoubleCheck.lazy(this.providesMealServiceProvider));
        DeleteMealConfirmationDialogFragment_MembersInjector.injectLocalSettingsService(deleteMealConfirmationDialogFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return deleteMealConfirmationDialogFragment;
    }

    private DiaryFragmentBase injectDiaryFragmentBase(DiaryFragmentBase diaryFragmentBase) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(diaryFragmentBase, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(diaryFragmentBase, (Glide) this.providesGlideProvider.get());
        DiaryFragmentBase_MembersInjector.injectUserEnergyService(diaryFragmentBase, DoubleCheck.lazy(this.userEnergyServiceProvider));
        DiaryFragmentBase_MembersInjector.injectLocalizedStringsUtil(diaryFragmentBase, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryService(diaryFragmentBase, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientDashboardRenderer(diaryFragmentBase, DoubleCheck.lazy(this.providesNutrientDashboardRendererProvider));
        DiaryFragmentBase_MembersInjector.injectPremiumService(diaryFragmentBase, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSyncScheduler(diaryFragmentBase, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        DiaryFragmentBase_MembersInjector.injectExerciseStringService(diaryFragmentBase, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNavigationHelper(diaryFragmentBase, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryAnalyticsHelper(diaryFragmentBase, DoubleCheck.lazy(this.providesDiaryAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectActionTrackingService(diaryFragmentBase, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        DiaryFragmentBase_MembersInjector.injectConfigService(diaryFragmentBase, DoubleCheck.lazy(this.providesConfigServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSession(diaryFragmentBase, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryFragmentBase_MembersInjector.injectLocalSettingsService(diaryFragmentBase, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalService(diaryFragmentBase, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalsUtil(diaryFragmentBase, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        DiaryFragmentBase_MembersInjector.injectAppGalleryService(diaryFragmentBase, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectStepsService(diaryFragmentBase, DoubleCheck.lazy(this.provideStepsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNewsFeedAnalyticsHelper(diaryFragmentBase, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectMealAnalyticsHelper(diaryFragmentBase, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectUserApplicationSettingsService(diaryFragmentBase, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectDbConnectionManager(diaryFragmentBase, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        DiaryFragmentBase_MembersInjector.injectFoodSearchRouter(diaryFragmentBase, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return diaryFragmentBase;
    }

    private DiaryMoreActionsDialog injectDiaryMoreActionsDialog(DiaryMoreActionsDialog diaryMoreActionsDialog) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(diaryMoreActionsDialog, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(diaryMoreActionsDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(diaryMoreActionsDialog, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(diaryMoreActionsDialog, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryMoreActionsDialog_MembersInjector.injectConfigService(diaryMoreActionsDialog, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return diaryMoreActionsDialog;
    }

    private DiaryLongPressDialogFragment injectDiaryLongPressDialogFragment(DiaryLongPressDialogFragment diaryLongPressDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(diaryLongPressDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(diaryLongPressDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(diaryLongPressDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(diaryLongPressDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryLongPressDialogFragment_MembersInjector.injectAnalyticsService(diaryLongPressDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryLongPressDialogFragment_MembersInjector.injectBus(diaryLongPressDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        DiaryLongPressDialogFragment_MembersInjector.injectConfigService(diaryLongPressDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return diaryLongPressDialogFragment;
    }

    private DiaryQuickToolsDialogFragment injectDiaryQuickToolsDialogFragment(DiaryQuickToolsDialogFragment diaryQuickToolsDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(diaryQuickToolsDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(diaryQuickToolsDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(diaryQuickToolsDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(diaryQuickToolsDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryQuickToolsDialogFragment_MembersInjector.injectBus(diaryQuickToolsDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        return diaryQuickToolsDialogFragment;
    }

    private DiarySettingsFragment injectDiarySettingsFragment(DiarySettingsFragment diarySettingsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(diarySettingsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(diarySettingsFragment, (Glide) this.providesGlideProvider.get());
        DiarySettingsFragment_MembersInjector.injectDiarySharingSettingsManager(diarySettingsFragment, DoubleCheck.lazy(this.diarySharingSettingsManagerProvider));
        DiarySettingsFragment_MembersInjector.injectCountryService(diarySettingsFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        DiarySettingsFragment_MembersInjector.injectAnalyticsService(diarySettingsFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiarySettingsFragment_MembersInjector.injectInsightSettings(diarySettingsFragment, DoubleCheck.lazy(this.insightSettingsProvider));
        DiarySettingsFragment_MembersInjector.injectPremiumService(diarySettingsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiarySettingsFragment_MembersInjector.injectLocalSettingsService(diarySettingsFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiarySettingsFragment_MembersInjector.injectPremiumAnalyticsHelper(diarySettingsFragment, DoubleCheck.lazy(this.providesPremiumAnalyticsHelperProvider));
        DiarySettingsFragment_MembersInjector.injectGlobalSettingsService(diarySettingsFragment, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        DiarySettingsFragment_MembersInjector.injectNutrientDashboardAnalyticsHelper(diarySettingsFragment, DoubleCheck.lazy(this.providesNutrientDashboardAnalyticsHelperProvider));
        DiarySettingsFragment_MembersInjector.injectTimestampAnalyticsHelper(diarySettingsFragment, DoubleCheck.lazy(this.timestampAnalyticsHelperProvider));
        return diarySettingsFragment;
    }

    private EatingDisorderUpdateGoalCompleteFragment injectEatingDisorderUpdateGoalCompleteFragment(EatingDisorderUpdateGoalCompleteFragment eatingDisorderUpdateGoalCompleteFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(eatingDisorderUpdateGoalCompleteFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(eatingDisorderUpdateGoalCompleteFragment, (Glide) this.providesGlideProvider.get());
        EatingDisorderUpdateGoalCompleteFragment_MembersInjector.injectUserWeightService(eatingDisorderUpdateGoalCompleteFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        EatingDisorderUpdateGoalCompleteFragment_MembersInjector.injectUserEnergyService(eatingDisorderUpdateGoalCompleteFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EatingDisorderUpdateGoalCompleteFragment_MembersInjector.injectNutrientGoalsUtil(eatingDisorderUpdateGoalCompleteFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        EatingDisorderUpdateGoalCompleteFragment_MembersInjector.injectLocalizedStringsUtil(eatingDisorderUpdateGoalCompleteFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return eatingDisorderUpdateGoalCompleteFragment;
    }

    private EditCustomMacroGoalsFragment injectEditCustomMacroGoalsFragment(EditCustomMacroGoalsFragment editCustomMacroGoalsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(editCustomMacroGoalsFragment, (Glide) this.providesGlideProvider.get());
        EditCustomMacroGoalsFragment_MembersInjector.injectUserEnergyService(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectLocalizedStringsUtil(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectPremiumService(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectNutrientGoalService(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectNutritionalGoalsUtil(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectSession(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesSessionProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectAnalyticsService(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        EditCustomMacroGoalsFragment_MembersInjector.injectPremiumApiErrorUtil(editCustomMacroGoalsFragment, DoubleCheck.lazy(this.providesPremiumApiErrorUtilProvider));
        return editCustomMacroGoalsFragment;
    }

    private EditMacroGoalsByGramsFragment injectEditMacroGoalsByGramsFragment(EditMacroGoalsByGramsFragment editMacroGoalsByGramsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(editMacroGoalsByGramsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(editMacroGoalsByGramsFragment, (Glide) this.providesGlideProvider.get());
        EditMacroGoalsByGramsFragment_MembersInjector.injectNutrientGoalsUtil(editMacroGoalsByGramsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        EditMacroGoalsByGramsFragment_MembersInjector.injectUserEnergy(editMacroGoalsByGramsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return editMacroGoalsByGramsFragment;
    }

    private EditMacroGoalsByPercentFragment injectEditMacroGoalsByPercentFragment(EditMacroGoalsByPercentFragment editMacroGoalsByPercentFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(editMacroGoalsByPercentFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(editMacroGoalsByPercentFragment, (Glide) this.providesGlideProvider.get());
        EditMacroGoalsByPercentFragment_MembersInjector.injectNutrientGoalsUtil(editMacroGoalsByPercentFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        EditMacroGoalsByPercentFragment_MembersInjector.injectSession(editMacroGoalsByPercentFragment, DoubleCheck.lazy(this.providesSessionProvider));
        EditMacroGoalsByPercentFragment_MembersInjector.injectUserEnergy(editMacroGoalsByPercentFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return editMacroGoalsByPercentFragment;
    }

    private EditMealNameDialogFragment injectEditMealNameDialogFragment(EditMealNameDialogFragment editMealNameDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(editMealNameDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(editMealNameDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(editMealNameDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(editMealNameDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return editMealNameDialogFragment;
    }

    private EditServingsDialogFragment injectEditServingsDialogFragment(EditServingsDialogFragment editServingsDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(editServingsDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(editServingsDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(editServingsDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(editServingsDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return editServingsDialogFragment;
    }

    private EditServingsDialogFragmentV2 injectEditServingsDialogFragmentV2(EditServingsDialogFragmentV2 editServingsDialogFragmentV2) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(editServingsDialogFragmentV2, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(editServingsDialogFragmentV2, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(editServingsDialogFragmentV2, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(editServingsDialogFragmentV2, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        EditServingsDialogFragmentV2_MembersInjector.injectFoodService(editServingsDialogFragmentV2, DoubleCheck.lazy(this.provideFoodServiceProvider));
        return editServingsDialogFragmentV2;
    }

    private EditServingsDialogFragmentBase injectEditServingsDialogFragmentBase(EditServingsDialogFragmentBase editServingsDialogFragmentBase) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(editServingsDialogFragmentBase, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(editServingsDialogFragmentBase, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(editServingsDialogFragmentBase, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(editServingsDialogFragmentBase, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return editServingsDialogFragmentBase;
    }

    private EditV2SearchServingsDialogFragment injectEditV2SearchServingsDialogFragment(EditV2SearchServingsDialogFragment editV2SearchServingsDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(editV2SearchServingsDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(editV2SearchServingsDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(editV2SearchServingsDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(editV2SearchServingsDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        EditV2SearchServingsDialogFragment_MembersInjector.injectFoodService(editV2SearchServingsDialogFragment, DoubleCheck.lazy(this.provideFoodServiceProvider));
        EditV2SearchServingsDialogFragment_MembersInjector.injectActionTrackingService(editV2SearchServingsDialogFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        EditV2SearchServingsDialogFragment_MembersInjector.injectCountryService(editV2SearchServingsDialogFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        return editV2SearchServingsDialogFragment;
    }

    private WalkthroughServingSizeV2Fragment injectWalkthroughServingSizeV2Fragment(WalkthroughServingSizeV2Fragment walkthroughServingSizeV2Fragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(walkthroughServingSizeV2Fragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(walkthroughServingSizeV2Fragment, (Glide) this.providesGlideProvider.get());
        WalkthroughServingSizeV2Fragment_MembersInjector.injectWalkthroughUtil(walkthroughServingSizeV2Fragment, getWalkthroughUtil());
        WalkthroughServingSizeV2Fragment_MembersInjector.injectFoodMapper(walkthroughServingSizeV2Fragment, getFoodMapper());
        WalkthroughServingSizeV2Fragment_MembersInjector.injectFoodService(walkthroughServingSizeV2Fragment, DoubleCheck.lazy(this.provideFoodServiceProvider));
        WalkthroughServingSizeV2Fragment_MembersInjector.injectDiaryService(walkthroughServingSizeV2Fragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        WalkthroughServingSizeV2Fragment_MembersInjector.injectActionTrackingService(walkthroughServingSizeV2Fragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        return walkthroughServingSizeV2Fragment;
    }

    private EmailSettingsListFragment injectEmailSettingsListFragment(EmailSettingsListFragment emailSettingsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(emailSettingsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(emailSettingsListFragment, (Glide) this.providesGlideProvider.get());
        EmailSettingsListFragment_MembersInjector.injectUserPropertiesService(emailSettingsListFragment, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        EmailSettingsListFragment_MembersInjector.injectActionTrackingService(emailSettingsListFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        EmailSettingsListFragment_MembersInjector.injectConfigService(emailSettingsListFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        EmailSettingsListFragment_MembersInjector.injectLoginModel(emailSettingsListFragment, DoubleCheck.lazy(this.providesLoginModelProvider));
        EmailSettingsListFragment_MembersInjector.injectDbConnectionManager(emailSettingsListFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        EmailSettingsListFragment_MembersInjector.injectEmailValidator(emailSettingsListFragment, ApplicationModule_ProvideEmailValidatorFactory.proxyProvideEmailValidator(this.applicationModule));
        EmailSettingsListFragment_MembersInjector.injectEmailVerificationManager(emailSettingsListFragment, DoubleCheck.lazy(this.provideUacfEmailVerificationManagerProvider));
        return emailSettingsListFragment;
    }

    private ExerciseCaloriesFragment injectExerciseCaloriesFragment(ExerciseCaloriesFragment exerciseCaloriesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(exerciseCaloriesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(exerciseCaloriesFragment, (Glide) this.providesGlideProvider.get());
        ExerciseCaloriesFragment_MembersInjector.injectNutrientGoalsUtil(exerciseCaloriesFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        ExerciseCaloriesFragment_MembersInjector.injectLocalizedStringsUtil(exerciseCaloriesFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        ExerciseCaloriesFragment_MembersInjector.injectUserEnergyService(exerciseCaloriesFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        ExerciseCaloriesFragment_MembersInjector.injectAnalyticsService(exerciseCaloriesFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return exerciseCaloriesFragment;
    }

    private ExerciseGoalsDialogFragment injectExerciseGoalsDialogFragment(ExerciseGoalsDialogFragment exerciseGoalsDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(exerciseGoalsDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(exerciseGoalsDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(exerciseGoalsDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(exerciseGoalsDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ExerciseGoalsDialogFragment_MembersInjector.injectNutrientGoalsUtil(exerciseGoalsDialogFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        return exerciseGoalsDialogFragment;
    }

    private ExerciseSearchFragment injectExerciseSearchFragment(ExerciseSearchFragment exerciseSearchFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(exerciseSearchFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(exerciseSearchFragment, (Glide) this.providesGlideProvider.get());
        ExerciseSearchFragment_MembersInjector.injectExerciseService(exerciseSearchFragment, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        ExerciseSearchFragment_MembersInjector.injectDiaryService(exerciseSearchFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        ExerciseSearchFragment_MembersInjector.injectSearchService(exerciseSearchFragment, DoubleCheck.lazy(this.providesSearchServiceProvider));
        ExerciseSearchFragment_MembersInjector.injectSortOrderHelper(exerciseSearchFragment, DoubleCheck.lazy(this.sortOrderHelperProvider));
        ExerciseSearchFragment_MembersInjector.injectExerciseStringService(exerciseSearchFragment, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        ExerciseSearchFragment_MembersInjector.injectExerciseSearchAnalyticsHelper(exerciseSearchFragment, DoubleCheck.lazy(this.providesExerciseSearchAnalyticsHelperProvider));
        ExerciseSearchFragment_MembersInjector.injectExerciseEntryMapper(exerciseSearchFragment, DoubleCheck.lazy(this.providesExerciseEntryMapperProvider));
        ExerciseSearchFragment_MembersInjector.injectExerciseMapper(exerciseSearchFragment, DoubleCheck.lazy(this.providesExerciseMapperProvider));
        ExerciseSearchFragment_MembersInjector.injectExerciseAnalyticsHelper(exerciseSearchFragment, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        return exerciseSearchFragment;
    }

    private ExerciseSortOrderDialogFragment injectExerciseSortOrderDialogFragment(ExerciseSortOrderDialogFragment exerciseSortOrderDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(exerciseSortOrderDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(exerciseSortOrderDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(exerciseSortOrderDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(exerciseSortOrderDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ExerciseSortOrderDialogFragment_MembersInjector.injectSortOrderHelper(exerciseSortOrderDialogFragment, DoubleCheck.lazy(this.sortOrderHelperProvider));
        ExerciseSortOrderDialogFragment_MembersInjector.injectAnalyticsService(exerciseSortOrderDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return exerciseSortOrderDialogFragment;
    }

    private ExerciseTypeDialogFragment injectExerciseTypeDialogFragment(ExerciseTypeDialogFragment exerciseTypeDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(exerciseTypeDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(exerciseTypeDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(exerciseTypeDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(exerciseTypeDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ExerciseTypeDialogFragment_MembersInjector.injectLocalizedStringsUtil(exerciseTypeDialogFragment, getLocalizedStringsUtil());
        return exerciseTypeDialogFragment;
    }

    private PrototypeExploreFragment injectPrototypeExploreFragment(PrototypeExploreFragment prototypeExploreFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(prototypeExploreFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(prototypeExploreFragment, (Glide) this.providesGlideProvider.get());
        return prototypeExploreFragment;
    }

    private ExternalWebViewFragment injectExternalWebViewFragment(ExternalWebViewFragment externalWebViewFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(externalWebViewFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(externalWebViewFragment, (Glide) this.providesGlideProvider.get());
        ExternalWebViewFragment_MembersInjector.injectAnalyticsService(externalWebViewFragment, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        ExternalWebViewFragment_MembersInjector.injectConfigService(externalWebViewFragment, (ConfigService) this.providesConfigServiceProvider.get());
        return externalWebViewFragment;
    }

    private FriendDiaryFragment injectFriendDiaryFragment(FriendDiaryFragment friendDiaryFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(friendDiaryFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(friendDiaryFragment, (Glide) this.providesGlideProvider.get());
        DiaryFragmentBase_MembersInjector.injectUserEnergyService(friendDiaryFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        DiaryFragmentBase_MembersInjector.injectLocalizedStringsUtil(friendDiaryFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryService(friendDiaryFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientDashboardRenderer(friendDiaryFragment, DoubleCheck.lazy(this.providesNutrientDashboardRendererProvider));
        DiaryFragmentBase_MembersInjector.injectPremiumService(friendDiaryFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSyncScheduler(friendDiaryFragment, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        DiaryFragmentBase_MembersInjector.injectExerciseStringService(friendDiaryFragment, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNavigationHelper(friendDiaryFragment, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryAnalyticsHelper(friendDiaryFragment, DoubleCheck.lazy(this.providesDiaryAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectActionTrackingService(friendDiaryFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        DiaryFragmentBase_MembersInjector.injectConfigService(friendDiaryFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSession(friendDiaryFragment, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryFragmentBase_MembersInjector.injectLocalSettingsService(friendDiaryFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalService(friendDiaryFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalsUtil(friendDiaryFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        DiaryFragmentBase_MembersInjector.injectAppGalleryService(friendDiaryFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectStepsService(friendDiaryFragment, DoubleCheck.lazy(this.provideStepsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNewsFeedAnalyticsHelper(friendDiaryFragment, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectMealAnalyticsHelper(friendDiaryFragment, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectUserApplicationSettingsService(friendDiaryFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectDbConnectionManager(friendDiaryFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        DiaryFragmentBase_MembersInjector.injectFoodSearchRouter(friendDiaryFragment, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        FriendDiaryFragment_MembersInjector.injectUserSummaryService(friendDiaryFragment, DoubleCheck.lazy(this.providesUserSummaryServiceProvider));
        return friendDiaryFragment;
    }

    private FriendDiaryPasswordDialogFragment injectFriendDiaryPasswordDialogFragment(FriendDiaryPasswordDialogFragment friendDiaryPasswordDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(friendDiaryPasswordDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(friendDiaryPasswordDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(friendDiaryPasswordDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(friendDiaryPasswordDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        FriendDiaryPasswordDialogFragment_MembersInjector.injectBus(friendDiaryPasswordDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        return friendDiaryPasswordDialogFragment;
    }

    private GraphViewFragment injectGraphViewFragment(GraphViewFragment graphViewFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(graphViewFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(graphViewFragment, (Glide) this.providesGlideProvider.get());
        GraphViewFragment_MembersInjector.injectLocalSettingsService(graphViewFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        GraphViewFragment_MembersInjector.injectChartRendererFactoryLazy(graphViewFragment, DoubleCheck.lazy(this.providesChartRendererFactoryProvider));
        GraphViewFragment_MembersInjector.injectNutritionGraphServiceLazy(graphViewFragment, DoubleCheck.lazy(this.providesNutritionGraphPreferenceServiceProvider));
        GraphViewFragment_MembersInjector.injectNutritionGraphAnalyticsHelper(graphViewFragment, DoubleCheck.lazy(this.providesNutritionGraphAnalyticsHelperProvider));
        GraphViewFragment_MembersInjector.injectUserEnergyService(graphViewFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        GraphViewFragment_MembersInjector.injectPremiumServiceLazy(graphViewFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        return graphViewFragment;
    }

    private GoalsFragment injectGoalsFragment(GoalsFragment goalsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(goalsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(goalsFragment, (Glide) this.providesGlideProvider.get());
        GoalsFragment_MembersInjector.injectUserWeightService(goalsFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        GoalsFragment_MembersInjector.injectUserHeightService(goalsFragment, DoubleCheck.lazy(this.userHeightServiceProvider));
        GoalsFragment_MembersInjector.injectUserEnergyService(goalsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        GoalsFragment_MembersInjector.injectLocalizedStringsUtil(goalsFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        GoalsFragment_MembersInjector.injectPremiumService(goalsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        GoalsFragment_MembersInjector.injectSession(goalsFragment, DoubleCheck.lazy(this.providesSessionProvider));
        GoalsFragment_MembersInjector.injectNutrientGoalService(goalsFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        GoalsFragment_MembersInjector.injectNutrientGoalsUtil(goalsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        GoalsFragment_MembersInjector.injectSyncService(goalsFragment, DoubleCheck.lazy(this.providesSyncEngineProvider));
        GoalsFragment_MembersInjector.injectAnalyticsService(goalsFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        GoalsFragment_MembersInjector.injectPremiumAnalyticsHelper(goalsFragment, DoubleCheck.lazy(this.providesPremiumAnalyticsHelperProvider));
        GoalsFragment_MembersInjector.injectDiaryService(goalsFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return goalsFragment;
    }

    private GoogleFitPermissionsFragment injectGoogleFitPermissionsFragment(GoogleFitPermissionsFragment googleFitPermissionsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(googleFitPermissionsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(googleFitPermissionsFragment, (Glide) this.providesGlideProvider.get());
        return googleFitPermissionsFragment;
    }

    private HeightDialogFragment injectHeightDialogFragment(HeightDialogFragment heightDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(heightDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(heightDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(heightDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(heightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        HeightDialogFragment_MembersInjector.injectUserHeightService(heightDialogFragment, getUserHeightService());
        HeightDialogFragment_MembersInjector.injectSession(heightDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        return heightDialogFragment;
    }

    private HelpListFragment injectHelpListFragment(HelpListFragment helpListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(helpListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(helpListFragment, (Glide) this.providesGlideProvider.get());
        HelpListFragment_MembersInjector.injectPremiumService(helpListFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        HelpListFragment_MembersInjector.injectDeleteAccountAnalyticsHelper(helpListFragment, DoubleCheck.lazy(this.provideDeleteAccountAnalyticsHelperProvider));
        return helpListFragment;
    }

    private HomeFragment injectHomeFragment(HomeFragment homeFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(homeFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(homeFragment, (Glide) this.providesGlideProvider.get());
        HomeFragment_MembersInjector.injectAdsSettings(homeFragment, DoubleCheck.lazy(this.adsSettingsProvider));
        HomeFragment_MembersInjector.injectNewsFeedService(homeFragment, DoubleCheck.lazy(this.providesNewsFeedServiceProvider));
        HomeFragment_MembersInjector.injectNewsFeedAnalyticsHelper(homeFragment, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        HomeFragment_MembersInjector.injectConfigService(homeFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        HomeFragment_MembersInjector.injectUserPropertiesService(homeFragment, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        HomeFragment_MembersInjector.injectPremiumService(homeFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        HomeFragment_MembersInjector.injectAdUnitService(homeFragment, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        HomeFragment_MembersInjector.injectLocalSettingsService(homeFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        HomeFragment_MembersInjector.injectNutrientDashboardRenderer(homeFragment, DoubleCheck.lazy(this.providesNutrientDashboardRendererProvider));
        HomeFragment_MembersInjector.injectImageService(homeFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        HomeFragment_MembersInjector.injectGlobalSettingsService(homeFragment, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        HomeFragment_MembersInjector.injectChallengesService(homeFragment, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        HomeFragment_MembersInjector.injectDiaryService(homeFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        HomeFragment_MembersInjector.injectDeepLinkManager(homeFragment, DoubleCheck.lazy(this.providesDeepLinkManagerProvider));
        HomeFragment_MembersInjector.injectAppRatingService(homeFragment, DoubleCheck.lazy(this.appRatingServiceProvider));
        HomeFragment_MembersInjector.injectMessageService(homeFragment, DoubleCheck.lazy(this.providesMessageServiceProvider));
        HomeFragment_MembersInjector.injectUserApplicationSettingsService(homeFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        HomeFragment_MembersInjector.injectEmailVerificationManager(homeFragment, DoubleCheck.lazy(this.provideUacfEmailVerificationManagerProvider));
        HomeFragment_MembersInjector.injectLocationService(homeFragment, DoubleCheck.lazy(this.provideLocationServiceProvider));
        HomeFragment_MembersInjector.injectAchievementInterstitialAd(homeFragment, (AchievementInterstitialAd) this.provideAchievementInterstitialAdProvider.get());
        HomeFragment_MembersInjector.injectAchievementAdManager(homeFragment, DoubleCheck.lazy(this.provideAchievementAdManagerProvider));
        HomeFragment_MembersInjector.injectPremiumOnboardingAnalyticsHelper(homeFragment, DoubleCheck.lazy(this.providePremiumOnboardingAnalyticsHelperProvider));
        return homeFragment;
    }

    private ImageChooserDialogFragment injectImageChooserDialogFragment(ImageChooserDialogFragment imageChooserDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(imageChooserDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(imageChooserDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(imageChooserDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(imageChooserDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ImageChooserDialogFragment_MembersInjector.injectPackageManager(imageChooserDialogFragment, getPackageManager());
        return imageChooserDialogFragment;
    }

    private ImportPhotoFragment injectImportPhotoFragment(ImportPhotoFragment importPhotoFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(importPhotoFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(importPhotoFragment, (Glide) this.providesGlideProvider.get());
        ImportPhotoFragment_MembersInjector.injectProgressAnalytics(importPhotoFragment, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        return importPhotoFragment;
    }

    private JoinedChallengeSummaryFragment injectJoinedChallengeSummaryFragment(JoinedChallengeSummaryFragment joinedChallengeSummaryFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(joinedChallengeSummaryFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(joinedChallengeSummaryFragment, (Glide) this.providesGlideProvider.get());
        JoinedChallengeSummaryFragment_MembersInjector.injectImageService(joinedChallengeSummaryFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        JoinedChallengeSummaryFragment_MembersInjector.injectChallengesService(joinedChallengeSummaryFragment, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        JoinedChallengeSummaryFragment_MembersInjector.injectLocalSettingsService(joinedChallengeSummaryFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        JoinedChallengeSummaryFragment_MembersInjector.injectChallengesAnalyticsHelper(joinedChallengeSummaryFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return joinedChallengeSummaryFragment;
    }

    private JoinedFriendsFragment injectJoinedFriendsFragment(JoinedFriendsFragment joinedFriendsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(joinedFriendsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(joinedFriendsFragment, (Glide) this.providesGlideProvider.get());
        JoinedFriendsFragment_MembersInjector.injectImageService(joinedFriendsFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        return joinedFriendsFragment;
    }

    private JoinedPrizesFragment injectJoinedPrizesFragment(JoinedPrizesFragment joinedPrizesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(joinedPrizesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(joinedPrizesFragment, (Glide) this.providesGlideProvider.get());
        JoinedPrizesFragment_MembersInjector.injectImageService(joinedPrizesFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        return joinedPrizesFragment;
    }

    private MacroNutrientEditorDialog injectMacroNutrientEditorDialog(MacroNutrientEditorDialog macroNutrientEditorDialog) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(macroNutrientEditorDialog, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(macroNutrientEditorDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(macroNutrientEditorDialog, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(macroNutrientEditorDialog, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MacroNutrientEditorDialog_MembersInjector.injectNgu(macroNutrientEditorDialog, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        return macroNutrientEditorDialog;
    }

    private MealFilterDialog injectMealFilterDialog(MealFilterDialog mealFilterDialog) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(mealFilterDialog, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(mealFilterDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(mealFilterDialog, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(mealFilterDialog, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MealFilterDialog_MembersInjector.injectLocalizedStringsUtil(mealFilterDialog, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MealFilterDialog_MembersInjector.injectUserEnergyService(mealFilterDialog, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MealFilterDialog_MembersInjector.injectLocalSettingsService(mealFilterDialog, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return mealFilterDialog;
    }

    private MealFoodPermissionSelectionDialogFragment injectMealFoodPermissionSelectionDialogFragment(MealFoodPermissionSelectionDialogFragment mealFoodPermissionSelectionDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(mealFoodPermissionSelectionDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(mealFoodPermissionSelectionDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(mealFoodPermissionSelectionDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(mealFoodPermissionSelectionDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return mealFoodPermissionSelectionDialogFragment;
    }

    private MealGoalsFragment injectMealGoalsFragment(MealGoalsFragment mealGoalsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(mealGoalsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(mealGoalsFragment, (Glide) this.providesGlideProvider.get());
        MealGoalsFragment_MembersInjector.injectUserEnergyService(mealGoalsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MealGoalsFragment_MembersInjector.injectNutrientGoalsUtil(mealGoalsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        MealGoalsFragment_MembersInjector.injectLocalizedStringsUtil(mealGoalsFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return mealGoalsFragment;
    }

    private MealNamesDialogFragment injectMealNamesDialogFragment(MealNamesDialogFragment mealNamesDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(mealNamesDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(mealNamesDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(mealNamesDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(mealNamesDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MealNamesDialogFragment_MembersInjector.injectUserEnergyService(mealNamesDialogFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MealNamesDialogFragment_MembersInjector.injectLocalizedStringsUtil(mealNamesDialogFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MealNamesDialogFragment_MembersInjector.injectSession(mealNamesDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        return mealNamesDialogFragment;
    }

    private MeasurementTypeDialogFragment injectMeasurementTypeDialogFragment(MeasurementTypeDialogFragment measurementTypeDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(measurementTypeDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(measurementTypeDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(measurementTypeDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(measurementTypeDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MeasurementTypeDialogFragment_MembersInjector.injectLocalizedStringsUtil(measurementTypeDialogFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MeasurementTypeDialogFragment_MembersInjector.injectStepServices(measurementTypeDialogFragment, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MeasurementTypeDialogFragment_MembersInjector.injectDbConnectionManager(measurementTypeDialogFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return measurementTypeDialogFragment;
    }

    private MeasurementValueDialogFragment injectMeasurementValueDialogFragment(MeasurementValueDialogFragment measurementValueDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(measurementValueDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(measurementValueDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(measurementValueDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(measurementValueDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MeasurementValueDialogFragment_MembersInjector.injectUserHeightService(measurementValueDialogFragment, getUserHeightService());
        MeasurementValueDialogFragment_MembersInjector.injectValidator(measurementValueDialogFragment, ApplicationModule_ProvideWeightValidatorFactory.proxyProvideWeightValidator(this.applicationModule));
        MeasurementValueDialogFragment_MembersInjector.injectLocalizedStringsUtil(measurementValueDialogFragment, getLocalizedStringsUtil());
        return measurementValueDialogFragment;
    }

    private MessagesFragment injectMessagesFragment(MessagesFragment messagesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(messagesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(messagesFragment, (Glide) this.providesGlideProvider.get());
        MessagesFragment_MembersInjector.injectMessageService(messagesFragment, DoubleCheck.lazy(this.providesMessageServiceProvider));
        return messagesFragment;
    }

    private MfpFragment injectMfpFragment(MfpFragment mfpFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(mfpFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(mfpFragment, (Glide) this.providesGlideProvider.get());
        return mfpFragment;
    }

    private MyExercisesFragment injectMyExercisesFragment(MyExercisesFragment myExercisesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myExercisesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myExercisesFragment, (Glide) this.providesGlideProvider.get());
        MyExercisesFragment_MembersInjector.injectExerciseService(myExercisesFragment, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        MyExercisesFragment_MembersInjector.injectExerciseMapper(myExercisesFragment, DoubleCheck.lazy(this.providesExerciseMapperProvider));
        return myExercisesFragment;
    }

    private MyFoodsFragment injectMyFoodsFragment(MyFoodsFragment myFoodsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myFoodsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myFoodsFragment, (Glide) this.providesGlideProvider.get());
        MyFoodsFragment_MembersInjector.injectDbConnectionManager(myFoodsFragment, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        MyFoodsFragment_MembersInjector.injectUserEnergyService(myFoodsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MyFoodsFragment_MembersInjector.injectLocalSettingsService(myFoodsFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return myFoodsFragment;
    }

    private MyInfoFragment injectMyInfoFragment(MyInfoFragment myInfoFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myInfoFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myInfoFragment, (Glide) this.providesGlideProvider.get());
        MyInfoFragment_MembersInjector.injectPremiumService(myInfoFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MyInfoFragment_MembersInjector.injectUserEnergyService(myInfoFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MyInfoFragment_MembersInjector.injectUserWeightService(myInfoFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        MyInfoFragment_MembersInjector.injectImageService(myInfoFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        MyInfoFragment_MembersInjector.injectConfigService(myInfoFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MyInfoFragment_MembersInjector.injectChallengesAnalytics(myInfoFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        return myInfoFragment;
    }

    private MyItemsFragment injectMyItemsFragment(MyItemsFragment myItemsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myItemsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myItemsFragment, (Glide) this.providesGlideProvider.get());
        MyItemsFragment_MembersInjector.injectPremium(myItemsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        return myItemsFragment;
    }

    private MyMealsFragment injectMyMealsFragment(MyMealsFragment myMealsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myMealsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myMealsFragment, (Glide) this.providesGlideProvider.get());
        MyMealsFragment_MembersInjector.injectMealUtil(myMealsFragment, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        MyMealsFragment_MembersInjector.injectUserEnergyService(myMealsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MyMealsFragment_MembersInjector.injectConfigService(myMealsFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MyMealsFragment_MembersInjector.injectImageService(myMealsFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        MyMealsFragment_MembersInjector.injectDbConnectionManager(myMealsFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        MyMealsFragment_MembersInjector.injectLocalSettingsService(myMealsFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        return myMealsFragment;
    }

    private MyRecipesFragment injectMyRecipesFragment(MyRecipesFragment myRecipesFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(myRecipesFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(myRecipesFragment, (Glide) this.providesGlideProvider.get());
        MyRecipesFragment_MembersInjector.injectUserEnergyService(myRecipesFragment, getUserEnergyService());
        MyRecipesFragment_MembersInjector.injectActionTrackingService(myRecipesFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        MyRecipesFragment_MembersInjector.injectRecipeService(myRecipesFragment, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        MyRecipesFragment_MembersInjector.injectRecipesAnalyticsHelper(myRecipesFragment, DoubleCheck.lazy(this.provideRecipesAnalyticsHelperProvider));
        MyRecipesFragment_MembersInjector.injectLocalSettingsService(myRecipesFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MyRecipesFragment_MembersInjector.injectDbConnectionManager(myRecipesFragment, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        return myRecipesFragment;
    }

    private NetEnergyGoalDialogFragment injectNetEnergyGoalDialogFragment(NetEnergyGoalDialogFragment netEnergyGoalDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(netEnergyGoalDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(netEnergyGoalDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        NetEnergyGoalDialogFragment_MembersInjector.injectUserEnergyService(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        NetEnergyGoalDialogFragment_MembersInjector.injectLocalizedStringsUtil(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        NetEnergyGoalDialogFragment_MembersInjector.injectSyncScheduler(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        NetEnergyGoalDialogFragment_MembersInjector.injectDbConnectionManager(netEnergyGoalDialogFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return netEnergyGoalDialogFragment;
    }

    private NotifyRequestMenuDialogFragment injectNotifyRequestMenuDialogFragment(NotifyRequestMenuDialogFragment notifyRequestMenuDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(notifyRequestMenuDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(notifyRequestMenuDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(notifyRequestMenuDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(notifyRequestMenuDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        NotifyRequestMenuDialogFragment_MembersInjector.injectRestaurantLoggingAnalyticsHelper(notifyRequestMenuDialogFragment, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        return notifyRequestMenuDialogFragment;
    }

    private NutrientDashboardPresetSelectionFragment injectNutrientDashboardPresetSelectionFragment(NutrientDashboardPresetSelectionFragment nutrientDashboardPresetSelectionFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(nutrientDashboardPresetSelectionFragment, (Glide) this.providesGlideProvider.get());
        NutrientDashboardPresetSelectionFragment_MembersInjector.injectPremiumService(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        NutrientDashboardPresetSelectionFragment_MembersInjector.injectGoalsUtil(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        NutrientDashboardPresetSelectionFragment_MembersInjector.injectLocalizedStringsUtil(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        NutrientDashboardPresetSelectionFragment_MembersInjector.injectUserEnergyService(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        NutrientDashboardPresetSelectionFragment_MembersInjector.injectAnalyticsService(nutrientDashboardPresetSelectionFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return nutrientDashboardPresetSelectionFragment;
    }

    private NutritionFactsFragmentBase injectNutritionFactsFragmentBase(NutritionFactsFragmentBase nutritionFactsFragmentBase) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(nutritionFactsFragmentBase, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(nutritionFactsFragmentBase, (Glide) this.providesGlideProvider.get());
        NutritionFactsFragmentBase_MembersInjector.injectUserEnergyService(nutritionFactsFragmentBase, getUserEnergyService());
        return nutritionFactsFragmentBase;
    }

    private NewNutritionFactsFragment injectNewNutritionFactsFragment(NewNutritionFactsFragment newNutritionFactsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(newNutritionFactsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(newNutritionFactsFragment, (Glide) this.providesGlideProvider.get());
        NutritionFactsFragmentBase_MembersInjector.injectUserEnergyService(newNutritionFactsFragment, getUserEnergyService());
        NewNutritionFactsFragment_MembersInjector.injectPremiumService(newNutritionFactsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        NewNutritionFactsFragment_MembersInjector.injectNutrientGoalsUtil(newNutritionFactsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        NewNutritionFactsFragment_MembersInjector.injectNutrientGoalService(newNutritionFactsFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        NewNutritionFactsFragment_MembersInjector.injectUserEnergyService(newNutritionFactsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return newNutritionFactsFragment;
    }

    private NotificationInboxFragment injectNotificationInboxFragment(NotificationInboxFragment notificationInboxFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(notificationInboxFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(notificationInboxFragment, (Glide) this.providesGlideProvider.get());
        NotificationInboxFragment_MembersInjector.injectInboxAnalyticsHelper(notificationInboxFragment, DoubleCheck.lazy(this.providesNotificationInboxAnalyticsServiceProvider));
        NotificationInboxFragment_MembersInjector.injectSyncService(notificationInboxFragment, DoubleCheck.lazy(this.providesSyncEngineProvider));
        return notificationInboxFragment;
    }

    private LegacyWeightPickerFragment injectLegacyWeightPickerFragment(LegacyWeightPickerFragment legacyWeightPickerFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(legacyWeightPickerFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(legacyWeightPickerFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(legacyWeightPickerFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(legacyWeightPickerFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        LegacyWeightPickerFragment_MembersInjector.injectMessageBus(legacyWeightPickerFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        LegacyWeightPickerFragment_MembersInjector.injectUserWeightService(legacyWeightPickerFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        LegacyWeightPickerFragment_MembersInjector.injectConfigService(legacyWeightPickerFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        LegacyWeightPickerFragment_MembersInjector.injectAnalyticsService(legacyWeightPickerFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return legacyWeightPickerFragment;
    }

    private LikesListFragment injectLikesListFragment(LikesListFragment likesListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(likesListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(likesListFragment, (Glide) this.providesGlideProvider.get());
        LikesListFragment_MembersInjector.injectNewsFeedService(likesListFragment, getNewsFeedService());
        return likesListFragment;
    }

    private LocalFoodSearchFragment injectLocalFoodSearchFragment(LocalFoodSearchFragment localFoodSearchFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(localFoodSearchFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(localFoodSearchFragment, (Glide) this.providesGlideProvider.get());
        LocalFoodSearchFragment_MembersInjector.injectMultiAddFoodHelper(localFoodSearchFragment, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        LocalFoodSearchFragment_MembersInjector.injectFoodSearchAnalyticsHelper(localFoodSearchFragment, DoubleCheck.lazy(this.providesFoodSearchAnalyticsHelperProvider));
        LocalFoodSearchFragment_MembersInjector.injectUserEnergyService(localFoodSearchFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        LocalFoodSearchFragment_MembersInjector.injectImageService(localFoodSearchFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        LocalFoodSearchFragment_MembersInjector.injectMealHelperUtil(localFoodSearchFragment, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        LocalFoodSearchFragment_MembersInjector.injectLocalizedStringsUtil(localFoodSearchFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        LocalFoodSearchFragment_MembersInjector.injectPremiumService(localFoodSearchFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        LocalFoodSearchFragment_MembersInjector.injectSearchService(localFoodSearchFragment, DoubleCheck.lazy(this.providesSearchServiceProvider));
        LocalFoodSearchFragment_MembersInjector.injectDbConnectionManager(localFoodSearchFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        LocalFoodSearchFragment_MembersInjector.injectLocalSettingsService(localFoodSearchFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        LocalFoodSearchFragment_MembersInjector.injectFoodSearchRouter(localFoodSearchFragment, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return localFoodSearchFragment;
    }

    private LocalFoodSearchFragmentV2 injectLocalFoodSearchFragmentV2(LocalFoodSearchFragmentV2 localFoodSearchFragmentV2) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(localFoodSearchFragmentV2, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(localFoodSearchFragmentV2, (Glide) this.providesGlideProvider.get());
        LocalFoodSearchFragmentV2_MembersInjector.injectVmFactory(localFoodSearchFragmentV2, (VMFactory) this.vMFactoryProvider.get());
        LocalFoodSearchFragmentV2_MembersInjector.injectImageService(localFoodSearchFragmentV2, DoubleCheck.lazy(this.providesImageServiceProvider));
        LocalFoodSearchFragmentV2_MembersInjector.injectUserEnergyService(localFoodSearchFragmentV2, DoubleCheck.lazy(this.userEnergyServiceProvider));
        LocalFoodSearchFragmentV2_MembersInjector.injectMultiAddFoodHelper(localFoodSearchFragmentV2, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        LocalFoodSearchFragmentV2_MembersInjector.injectMealUtil(localFoodSearchFragmentV2, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        return localFoodSearchFragmentV2;
    }

    private LoginPleaseWaitFragment injectLoginPleaseWaitFragment(LoginPleaseWaitFragment loginPleaseWaitFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(loginPleaseWaitFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(loginPleaseWaitFragment, (Glide) this.providesGlideProvider.get());
        return loginPleaseWaitFragment;
    }

    private LoginSignInUpButtonsFragment injectLoginSignInUpButtonsFragment(LoginSignInUpButtonsFragment loginSignInUpButtonsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(loginSignInUpButtonsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(loginSignInUpButtonsFragment, (Glide) this.providesGlideProvider.get());
        return loginSignInUpButtonsFragment;
    }

    private LoginUserPassFragment injectLoginUserPassFragment(LoginUserPassFragment loginUserPassFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(loginUserPassFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(loginUserPassFragment, (Glide) this.providesGlideProvider.get());
        LoginUserPassFragment_MembersInjector.injectLoginModel(loginUserPassFragment, DoubleCheck.lazy(this.providesLoginModelProvider));
        return loginUserPassFragment;
    }

    private OnlineFoodSearchFragment injectOnlineFoodSearchFragment(OnlineFoodSearchFragment onlineFoodSearchFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(onlineFoodSearchFragment, (Glide) this.providesGlideProvider.get());
        OnlineFoodSearchFragment_MembersInjector.injectSearchService(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesSearchServiceProvider));
        OnlineFoodSearchFragment_MembersInjector.injectActionTrackingService(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        OnlineFoodSearchFragment_MembersInjector.injectUserEnergyService(onlineFoodSearchFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        OnlineFoodSearchFragment_MembersInjector.injectFoodMapper(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesFoodMapperProvider));
        OnlineFoodSearchFragment_MembersInjector.injectCountryService(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        OnlineFoodSearchFragment_MembersInjector.injectDiaryService(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        OnlineFoodSearchFragment_MembersInjector.injectMultiAddFoodHelper(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        OnlineFoodSearchFragment_MembersInjector.injectDeviceInfo(onlineFoodSearchFragment, DoubleCheck.lazy(this.providesDeviceInfoProvider));
        OnlineFoodSearchFragment_MembersInjector.injectVmFactory(onlineFoodSearchFragment, (VMFactory) this.vMFactoryProvider.get());
        return onlineFoodSearchFragment;
    }

    private OurOtherAppsFragment injectOurOtherAppsFragment(OurOtherAppsFragment ourOtherAppsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(ourOtherAppsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(ourOtherAppsFragment, (Glide) this.providesGlideProvider.get());
        OurOtherAppsFragment_MembersInjector.injectAnalyticsService(ourOtherAppsFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        OurOtherAppsFragment_MembersInjector.injectAppGalleryService(ourOtherAppsFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        return ourOtherAppsFragment;
    }

    private PinCodeDialogFragment injectPinCodeDialogFragment(PinCodeDialogFragment pinCodeDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(pinCodeDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(pinCodeDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(pinCodeDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(pinCodeDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        PinCodeDialogFragment_MembersInjector.injectCountryService(pinCodeDialogFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        PinCodeDialogFragment_MembersInjector.injectBus(pinCodeDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        return pinCodeDialogFragment;
    }

    private PremiumUpsellFragment injectPremiumUpsellFragment(PremiumUpsellFragment premiumUpsellFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(premiumUpsellFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(premiumUpsellFragment, (Glide) this.providesGlideProvider.get());
        PremiumUpsellFragment_MembersInjector.injectLocalSettings(premiumUpsellFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectUpsellService(premiumUpsellFragment, DoubleCheck.lazy(this.providesUpsellServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectProductService(premiumUpsellFragment, DoubleCheck.lazy(this.providesProductServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectPaymentService(premiumUpsellFragment, DoubleCheck.lazy(this.providesPaymentServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectGeoLocationService(premiumUpsellFragment, DoubleCheck.lazy(this.providesGeoLocationServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectApiUrlProvider(premiumUpsellFragment, DoubleCheck.lazy(this.provideApiUrlProvider));
        PremiumUpsellFragment_MembersInjector.injectAnalytics(premiumUpsellFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectConfigService(premiumUpsellFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectPaymentAnalytics(premiumUpsellFragment, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        PremiumUpsellFragment_MembersInjector.injectPremiumService(premiumUpsellFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectUserApplicationSettingsService(premiumUpsellFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        return premiumUpsellFragment;
    }

    private PremiumUpsellWebFragment injectPremiumUpsellWebFragment(PremiumUpsellWebFragment premiumUpsellWebFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(premiumUpsellWebFragment, (Glide) this.providesGlideProvider.get());
        PremiumUpsellFragment_MembersInjector.injectLocalSettings(premiumUpsellWebFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectUpsellService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesUpsellServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectProductService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesProductServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectPaymentService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesPaymentServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectGeoLocationService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesGeoLocationServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectApiUrlProvider(premiumUpsellWebFragment, DoubleCheck.lazy(this.provideApiUrlProvider));
        PremiumUpsellFragment_MembersInjector.injectAnalytics(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectConfigService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectPaymentAnalytics(premiumUpsellWebFragment, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        PremiumUpsellFragment_MembersInjector.injectPremiumService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        PremiumUpsellFragment_MembersInjector.injectUserApplicationSettingsService(premiumUpsellWebFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        PremiumUpsellWebFragment_MembersInjector.injectApiSettings(premiumUpsellWebFragment, mfpApiSettings());
        return premiumUpsellWebFragment;
    }

    private ProfileFragment injectProfileFragment(ProfileFragment profileFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(profileFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(profileFragment, (Glide) this.providesGlideProvider.get());
        ProfileFragment_MembersInjector.injectNewsFeedAnalyticsHelper(profileFragment, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        ProfileFragment_MembersInjector.injectUserWeightService(profileFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        ProfileFragment_MembersInjector.injectGrammarService(profileFragment, DoubleCheck.lazy(this.providesLocalizedStringServiceProvider));
        ProfileFragment_MembersInjector.injectMiniUserInfoMapper(profileFragment, ApplicationModule_ProvidesMiniUserInfoMapperFactory.proxyProvidesMiniUserInfoMapper(this.applicationModule));
        ProfileFragment_MembersInjector.injectFriendService(profileFragment, DoubleCheck.lazy(this.providesFriendServiceProvider));
        ProfileFragment_MembersInjector.injectUserSummaryService(profileFragment, DoubleCheck.lazy(this.providesUserSummaryServiceProvider));
        ProfileFragment_MembersInjector.injectNewsFeedService(profileFragment, DoubleCheck.lazy(this.providesNewsFeedServiceProvider));
        ProfileFragment_MembersInjector.injectChallengesAnalyticsHelper(profileFragment, DoubleCheck.lazy(this.providesChallengesAnalyticsHelperProvider));
        ProfileFragment_MembersInjector.injectConfigService(profileFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        ProfileFragment_MembersInjector.injectImageService(profileFragment, DoubleCheck.lazy(this.providesImageServiceProvider));
        ProfileFragment_MembersInjector.injectLocalSettingsService(profileFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        ProfileFragment_MembersInjector.injectAppSettings(profileFragment, DoubleCheck.lazy(this.appSettingsProvider));
        ProfileFragment_MembersInjector.injectPremiumService(profileFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        ProfileFragment_MembersInjector.injectPremiumAnalyticsHelper(profileFragment, DoubleCheck.lazy(this.providesPremiumAnalyticsHelperProvider));
        ProfileFragment_MembersInjector.injectUserApplicationSettingsService(profileFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        ProfileFragment_MembersInjector.injectAchievementAdManager(profileFragment, DoubleCheck.lazy(this.provideAchievementAdManagerProvider));
        return profileFragment;
    }

    private ProgressEntryLongPressDialogFragment injectProgressEntryLongPressDialogFragment(ProgressEntryLongPressDialogFragment progressEntryLongPressDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(progressEntryLongPressDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(progressEntryLongPressDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(progressEntryLongPressDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(progressEntryLongPressDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ProgressEntryLongPressDialogFragment_MembersInjector.injectMeasurementService(progressEntryLongPressDialogFragment, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        ProgressEntryLongPressDialogFragment_MembersInjector.injectImageAssociationService(progressEntryLongPressDialogFragment, DoubleCheck.lazy(this.providesImageAssociationServiceProvider));
        return progressEntryLongPressDialogFragment;
    }

    private QuickAddCaloriesDialogFragment injectQuickAddCaloriesDialogFragment(QuickAddCaloriesDialogFragment quickAddCaloriesDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(quickAddCaloriesDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(quickAddCaloriesDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(quickAddCaloriesDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(quickAddCaloriesDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        QuickAddCaloriesDialogFragment_MembersInjector.injectUserEnergyService(quickAddCaloriesDialogFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        QuickAddCaloriesDialogFragment_MembersInjector.injectLocalizedStringsUtil(quickAddCaloriesDialogFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        QuickAddCaloriesDialogFragment_MembersInjector.injectBus(quickAddCaloriesDialogFragment, DoubleCheck.lazy(this.provideOttoBusProvider));
        return quickAddCaloriesDialogFragment;
    }

    private RecipeDetailsFragment injectRecipeDetailsFragment(RecipeDetailsFragment recipeDetailsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(recipeDetailsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(recipeDetailsFragment, (Glide) this.providesGlideProvider.get());
        RecipeDetailsFragment_MembersInjector.injectUserEnergyService(recipeDetailsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        RecipeDetailsFragment_MembersInjector.injectRecipeService(recipeDetailsFragment, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        RecipeDetailsFragment_MembersInjector.injectActionTrackingService(recipeDetailsFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        return recipeDetailsFragment;
    }

    private RemindersFragment injectRemindersFragment(RemindersFragment remindersFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(remindersFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(remindersFragment, (Glide) this.providesGlideProvider.get());
        RemindersFragment_MembersInjector.injectRemindersService(remindersFragment, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        RemindersFragment_MembersInjector.injectLocalizedStringsUtil(remindersFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        RemindersFragment_MembersInjector.injectSyncService(remindersFragment, DoubleCheck.lazy(this.providesSyncEngineProvider));
        return remindersFragment;
    }

    private SearchCategoryDialog injectSearchCategoryDialog(SearchCategoryDialog searchCategoryDialog) {
        SearchCategoryDialog_MembersInjector.injectNavigationHelper(searchCategoryDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        SearchCategoryDialog_MembersInjector.injectSession(searchCategoryDialog, (Session) this.providesSessionProvider.get());
        SearchCategoryDialog_MembersInjector.injectFoodSearchRouter(searchCategoryDialog, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return searchCategoryDialog;
    }

    private SearchViewItemContextualDialog injectSearchViewItemContextualDialog(SearchViewItemContextualDialog searchViewItemContextualDialog) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(searchViewItemContextualDialog, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(searchViewItemContextualDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(searchViewItemContextualDialog, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(searchViewItemContextualDialog, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SearchViewItemContextualDialog_MembersInjector.injectFoodService(searchViewItemContextualDialog, getFoodService());
        return searchViewItemContextualDialog;
    }

    private SettingsListFragment injectSettingsListFragment(SettingsListFragment settingsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(settingsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(settingsListFragment, (Glide) this.providesGlideProvider.get());
        SettingsListFragment_MembersInjector.injectPremiumService(settingsListFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        SettingsListFragment_MembersInjector.injectPremiumAnalyticsHelper(settingsListFragment, DoubleCheck.lazy(this.providesPremiumAnalyticsHelperProvider));
        SettingsListFragment_MembersInjector.injectUserWeightService(settingsListFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        return settingsListFragment;
    }

    private SignUpActivityLevelFragment injectSignUpActivityLevelFragment(SignUpActivityLevelFragment signUpActivityLevelFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpActivityLevelFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpActivityLevelFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpActivityLevelFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpActivityLevelFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpActivityLevelFragment_MembersInjector.injectModel(signUpActivityLevelFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        return signUpActivityLevelFragment;
    }

    private SignUpCongratsFragment injectSignUpCongratsFragment(SignUpCongratsFragment signUpCongratsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpCongratsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpCongratsFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpCongratsFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpCongratsFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectRemindersService(signUpCongratsFragment, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectActionTrackingService(signUpCongratsFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectPremiumService(signUpCongratsFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectLocalSettingsService(signUpCongratsFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectNutrientGoalsUtil(signUpCongratsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectCountryService(signUpCongratsFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        SignUpCongratsFragment_MembersInjector.injectConfigService(signUpCongratsFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return signUpCongratsFragment;
    }

    private SignUpFragmentBase injectSignUpFragmentBase(SignUpFragmentBase signUpFragmentBase) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpFragmentBase, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpFragmentBase, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpFragmentBase, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpFragmentBase, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return signUpFragmentBase;
    }

    private SignUpGenderAgeFragment injectSignUpGenderAgeFragment(SignUpGenderAgeFragment signUpGenderAgeFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpGenderAgeFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpGenderAgeFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpGenderAgeFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpGenderAgeFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpGenderAgeFragment_MembersInjector.injectModel(signUpGenderAgeFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        SignUpGenderAgeFragment_MembersInjector.injectSignUpService(signUpGenderAgeFragment, DoubleCheck.lazy(this.providesSignUpServiceProvider));
        return signUpGenderAgeFragment;
    }

    private SignUpGoalTypeFragment injectSignUpGoalTypeFragment(SignUpGoalTypeFragment signUpGoalTypeFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpGoalTypeFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpGoalTypeFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpGoalTypeFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpGoalTypeFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpGoalTypeFragment_MembersInjector.injectModel(signUpGoalTypeFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        return signUpGoalTypeFragment;
    }

    private SignUpHeightDialogFragment injectSignUpHeightDialogFragment(SignUpHeightDialogFragment signUpHeightDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(signUpHeightDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(signUpHeightDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(signUpHeightDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(signUpHeightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SignUpHeightDialogFragment_MembersInjector.injectModel(signUpHeightDialogFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        return signUpHeightDialogFragment;
    }

    private SignUpMarketingOptInFragment injectSignUpMarketingOptInFragment(SignUpMarketingOptInFragment signUpMarketingOptInFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpMarketingOptInFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpMarketingOptInFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpMarketingOptInFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpMarketingOptInFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpMarketingOptInFragment_MembersInjector.injectSignUpModel(signUpMarketingOptInFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        SignUpMarketingOptInFragment_MembersInjector.injectLoginModel(signUpMarketingOptInFragment, (LoginModel) this.providesLoginModelProvider.get());
        SignUpMarketingOptInFragment_MembersInjector.injectSignUpService(signUpMarketingOptInFragment, DoubleCheck.lazy(this.providesSignUpServiceProvider));
        return signUpMarketingOptInFragment;
    }

    private SignUpUsernamePasswordEmailFragment injectSignUpUsernamePasswordEmailFragment(SignUpUsernamePasswordEmailFragment signUpUsernamePasswordEmailFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpUsernamePasswordEmailFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpUsernamePasswordEmailFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectSignUpModel(signUpUsernamePasswordEmailFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectLoginModel(signUpUsernamePasswordEmailFragment, (LoginModel) this.providesLoginModelProvider.get());
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectCountryService(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectConsentsService(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.providesConsentServiceProvider));
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectConsentsAnalyticsHelper(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.provideConsentsAnalyticsHelperProvider));
        SignUpUsernamePasswordEmailFragment_MembersInjector.injectUpdatedTermsAnalyticsHelper(signUpUsernamePasswordEmailFragment, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        return signUpUsernamePasswordEmailFragment;
    }

    private SignUpWeightHeightFragment injectSignUpWeightHeightFragment(SignUpWeightHeightFragment signUpWeightHeightFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpWeightHeightFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpWeightHeightFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpWeightHeightFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpWeightHeightFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpWeightHeightFragment_MembersInjector.injectModel(signUpWeightHeightFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        return signUpWeightHeightFragment;
    }

    private SharingAndPrivacySettingsListFragment injectSharingAndPrivacySettingsListFragment(SharingAndPrivacySettingsListFragment sharingAndPrivacySettingsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(sharingAndPrivacySettingsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(sharingAndPrivacySettingsListFragment, (Glide) this.providesGlideProvider.get());
        SharingAndPrivacySettingsListFragment_MembersInjector.injectDiarySharingSettingsManager(sharingAndPrivacySettingsListFragment, getDiarySharingSettingsManager());
        SharingAndPrivacySettingsListFragment_MembersInjector.injectGlobalSettingsService(sharingAndPrivacySettingsListFragment, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        SharingAndPrivacySettingsListFragment_MembersInjector.injectDbConnectionManager(sharingAndPrivacySettingsListFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return sharingAndPrivacySettingsListFragment;
    }

    private SortOrderDialog injectSortOrderDialog(SortOrderDialog sortOrderDialog) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(sortOrderDialog, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(sortOrderDialog, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(sortOrderDialog, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(sortOrderDialog, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SortOrderDialog_MembersInjector.injectSortOrderHelper(sortOrderDialog, getSortOrderHelper());
        return sortOrderDialog;
    }

    private StepsSettingsListFragment injectStepsSettingsListFragment(StepsSettingsListFragment stepsSettingsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(stepsSettingsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(stepsSettingsListFragment, (Glide) this.providesGlideProvider.get());
        StepsSettingsListFragment_MembersInjector.injectStepsService(stepsSettingsListFragment, DoubleCheck.lazy(this.provideStepsServiceProvider));
        StepsSettingsListFragment_MembersInjector.injectAppGalleryService(stepsSettingsListFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        StepsSettingsListFragment_MembersInjector.injectAuthTokens(stepsSettingsListFragment, DoubleCheck.lazy(this.provideAuthTokenProvider));
        StepsSettingsListFragment_MembersInjector.injectRouter(stepsSettingsListFragment, DoubleCheck.lazy(this.providesDeepLinkRouterProvider));
        StepsSettingsListFragment_MembersInjector.injectDeviceInfo(stepsSettingsListFragment, DoubleCheck.lazy(this.providesDeviceInfoProvider));
        StepsSettingsListFragment_MembersInjector.injectApiUrlProvider(stepsSettingsListFragment, DoubleCheck.lazy(this.provideApiUrlProvider));
        StepsSettingsListFragment_MembersInjector.injectAppSettings(stepsSettingsListFragment, DoubleCheck.lazy(this.appSettingsProvider));
        StepsSettingsListFragment_MembersInjector.injectGoogleFit(stepsSettingsListFragment, (GoogleFitClient) this.providesGoogleFitClientProvider.get());
        StepsSettingsListFragment_MembersInjector.injectSamsungHealth(stepsSettingsListFragment, (SHealthConnection) this.providesSHealthConnectionProvider.get());
        return stepsSettingsListFragment;
    }

    private SubscriptionStatusFragment injectSubscriptionStatusFragment(SubscriptionStatusFragment subscriptionStatusFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(subscriptionStatusFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(subscriptionStatusFragment, (Glide) this.providesGlideProvider.get());
        SubscriptionStatusFragment_MembersInjector.injectPaymentAnalyticsHelper(subscriptionStatusFragment, DoubleCheck.lazy(this.providePaymentAnalyticsHelperProvider));
        SubscriptionStatusFragment_MembersInjector.injectSubscriptionService(subscriptionStatusFragment, (SubscriptionService) this.providesSubscriptionServiceProvider.get());
        return subscriptionStatusFragment;
    }

    private SignUpWeeklyWeightGoalFragment injectSignUpWeeklyWeightGoalFragment(SignUpWeeklyWeightGoalFragment signUpWeeklyWeightGoalFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(signUpWeeklyWeightGoalFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(signUpWeeklyWeightGoalFragment, (Glide) this.providesGlideProvider.get());
        SignUpFragmentBase_MembersInjector.injectSignUpService(signUpWeeklyWeightGoalFragment, (SignUpService) this.providesSignUpServiceProvider.get());
        SignUpFragmentBase_MembersInjector.injectConfigService(signUpWeeklyWeightGoalFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        SignUpWeeklyWeightGoalFragment_MembersInjector.injectModel(signUpWeeklyWeightGoalFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        return signUpWeeklyWeightGoalFragment;
    }

    private SignUpWeightDialogFragment injectSignUpWeightDialogFragment(SignUpWeightDialogFragment signUpWeightDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(signUpWeightDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(signUpWeightDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(signUpWeightDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(signUpWeightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SignUpWeightDialogFragment_MembersInjector.injectModel(signUpWeightDialogFragment, (SignUpModel) this.providesSignUpModelProvider.get());
        SignUpWeightDialogFragment_MembersInjector.injectAnalyticsService(signUpWeightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return signUpWeightDialogFragment;
    }

    private UnitsDialogFragment injectUnitsDialogFragment(UnitsDialogFragment unitsDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(unitsDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(unitsDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(unitsDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(unitsDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        UnitsDialogFragment_MembersInjector.injectUserWeightService(unitsDialogFragment, getUserWeightService());
        UnitsDialogFragment_MembersInjector.injectUserHeightService(unitsDialogFragment, getUserHeightService());
        UnitsDialogFragment_MembersInjector.injectUserEnergyService(unitsDialogFragment, getUserEnergyService());
        UnitsDialogFragment_MembersInjector.injectUserDistanceService(unitsDialogFragment, getUserDistanceService());
        UnitsDialogFragment_MembersInjector.injectConfigService(unitsDialogFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return unitsDialogFragment;
    }

    private UpdateGoalsCompleteFragment injectUpdateGoalsCompleteFragment(UpdateGoalsCompleteFragment updateGoalsCompleteFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(updateGoalsCompleteFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(updateGoalsCompleteFragment, (Glide) this.providesGlideProvider.get());
        UpdateGoalsCompleteFragment_MembersInjector.injectUserWeightService(updateGoalsCompleteFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        UpdateGoalsCompleteFragment_MembersInjector.injectUserEnergyService(updateGoalsCompleteFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        UpdateGoalsCompleteFragment_MembersInjector.injectNutrientGoalsUtil(updateGoalsCompleteFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        UpdateGoalsCompleteFragment_MembersInjector.injectLocalizedStringsUtil(updateGoalsCompleteFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        return updateGoalsCompleteFragment;
    }

    private UpdateGoalsFragment injectUpdateGoalsFragment(UpdateGoalsFragment updateGoalsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(updateGoalsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(updateGoalsFragment, (Glide) this.providesGlideProvider.get());
        UpdateGoalsFragment_MembersInjector.injectUserWeightService(updateGoalsFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectRemindersService(updateGoalsFragment, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectUserEnergyService(updateGoalsFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectNutrientGoalsUtil(updateGoalsFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectLocalizedStringsUtil(updateGoalsFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        UpdateGoalsFragment_MembersInjector.injectAnalyticsService(updateGoalsFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectMeasurementsService(updateGoalsFragment, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectCountryService(updateGoalsFragment, DoubleCheck.lazy(this.providesCountryServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectDiaryService(updateGoalsFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectNutrientGoalService(updateGoalsFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        UpdateGoalsFragment_MembersInjector.injectSession(updateGoalsFragment, DoubleCheck.lazy(this.providesSessionProvider));
        UpdateGoalsFragment_MembersInjector.injectSignUpService(updateGoalsFragment, DoubleCheck.lazy(this.providesSignUpServiceProvider));
        return updateGoalsFragment;
    }

    private UserDiaryFragment injectUserDiaryFragment(UserDiaryFragment userDiaryFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(userDiaryFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(userDiaryFragment, (Glide) this.providesGlideProvider.get());
        DiaryFragmentBase_MembersInjector.injectUserEnergyService(userDiaryFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        DiaryFragmentBase_MembersInjector.injectLocalizedStringsUtil(userDiaryFragment, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryService(userDiaryFragment, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientDashboardRenderer(userDiaryFragment, DoubleCheck.lazy(this.providesNutrientDashboardRendererProvider));
        DiaryFragmentBase_MembersInjector.injectPremiumService(userDiaryFragment, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSyncScheduler(userDiaryFragment, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        DiaryFragmentBase_MembersInjector.injectExerciseStringService(userDiaryFragment, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNavigationHelper(userDiaryFragment, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        DiaryFragmentBase_MembersInjector.injectDiaryAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesDiaryAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectActionTrackingService(userDiaryFragment, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        DiaryFragmentBase_MembersInjector.injectConfigService(userDiaryFragment, DoubleCheck.lazy(this.providesConfigServiceProvider));
        DiaryFragmentBase_MembersInjector.injectSession(userDiaryFragment, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryFragmentBase_MembersInjector.injectLocalSettingsService(userDiaryFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalService(userDiaryFragment, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNutrientGoalsUtil(userDiaryFragment, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        DiaryFragmentBase_MembersInjector.injectAppGalleryService(userDiaryFragment, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        DiaryFragmentBase_MembersInjector.injectStepsService(userDiaryFragment, DoubleCheck.lazy(this.provideStepsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectNewsFeedAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectMealAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        DiaryFragmentBase_MembersInjector.injectUserApplicationSettingsService(userDiaryFragment, DoubleCheck.lazy(this.providesUserApplicationSettingsServiceProvider));
        DiaryFragmentBase_MembersInjector.injectDbConnectionManager(userDiaryFragment, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        DiaryFragmentBase_MembersInjector.injectFoodSearchRouter(userDiaryFragment, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        UserDiaryFragment_MembersInjector.injectSession(userDiaryFragment, DoubleCheck.lazy(this.providesSessionProvider));
        UserDiaryFragment_MembersInjector.injectMfpNotificationHandler(userDiaryFragment, DoubleCheck.lazy(this.mfpNotificationHandlerProvider));
        UserDiaryFragment_MembersInjector.injectWalkthroughUtil(userDiaryFragment, DoubleCheck.lazy(this.providesWalkThroughUtilProvider));
        UserDiaryFragment_MembersInjector.injectAdsAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        UserDiaryFragment_MembersInjector.injectLocalSettingsService(userDiaryFragment, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        UserDiaryFragment_MembersInjector.injectWaterLoggingAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesWaterLoggingAnalyticsHelperProvider));
        UserDiaryFragment_MembersInjector.injectMealAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        UserDiaryFragment_MembersInjector.injectSyncService(userDiaryFragment, DoubleCheck.lazy(this.providesSyncEngineProvider));
        UserDiaryFragment_MembersInjector.injectGlobalSettingsService(userDiaryFragment, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        UserDiaryFragment_MembersInjector.injectExerciseAnalyticsHelper(userDiaryFragment, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        UserDiaryFragment_MembersInjector.injectFoodSearchRouter(userDiaryFragment, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return userDiaryFragment;
    }

    private WalkthroughFoodSearchFragment injectWalkthroughFoodSearchFragment(WalkthroughFoodSearchFragment walkthroughFoodSearchFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(walkthroughFoodSearchFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(walkthroughFoodSearchFragment, (Glide) this.providesGlideProvider.get());
        WalkthroughFoodSearchFragment_MembersInjector.injectWalkthroughUtil(walkthroughFoodSearchFragment, getWalkthroughUtil());
        WalkthroughFoodSearchFragment_MembersInjector.injectSearchService(walkthroughFoodSearchFragment, DoubleCheck.lazy(this.providesSearchServiceProvider));
        WalkthroughFoodSearchFragment_MembersInjector.injectLocalizedStringsUtil(walkthroughFoodSearchFragment, getLocalizedStringsUtil());
        WalkthroughFoodSearchFragment_MembersInjector.injectUserEnergyService(walkthroughFoodSearchFragment, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return walkthroughFoodSearchFragment;
    }

    private WeeklyNutritionSettingsListFragment injectWeeklyNutritionSettingsListFragment(WeeklyNutritionSettingsListFragment weeklyNutritionSettingsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(weeklyNutritionSettingsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(weeklyNutritionSettingsListFragment, (Glide) this.providesGlideProvider.get());
        WeeklyNutritionSettingsListFragment_MembersInjector.injectLocalSettingsService(weeklyNutritionSettingsListFragment, getLocalSettingsService());
        WeeklyNutritionSettingsListFragment_MembersInjector.injectAnalytics(weeklyNutritionSettingsListFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return weeklyNutritionSettingsListFragment;
    }

    private WeightDialogFragment injectWeightDialogFragment(WeightDialogFragment weightDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(weightDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(weightDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(weightDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(weightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        WeightDialogFragment_MembersInjector.injectUserWeightService(weightDialogFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        WeightDialogFragment_MembersInjector.injectAnalyticsService(weightDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return weightDialogFragment;
    }

    private WeightGoalDialogFragment injectWeightGoalDialogFragment(WeightGoalDialogFragment weightGoalDialogFragment) {
        CustomLayoutBaseDialogFragment_MembersInjector.injectMessageBus(weightGoalDialogFragment, (Bus) this.provideOttoBusProvider.get());
        CustomLayoutBaseDialogFragment_MembersInjector.injectNavigationHelper(weightGoalDialogFragment, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        CustomLayoutBaseDialogFragment_MembersInjector.injectSession(weightGoalDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        CustomLayoutBaseDialogFragment_MembersInjector.injectAnalyticsService(weightGoalDialogFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        WeightGoalDialogFragment_MembersInjector.injectUserWeightService(weightGoalDialogFragment, getUserWeightService());
        WeightGoalDialogFragment_MembersInjector.injectSession(weightGoalDialogFragment, DoubleCheck.lazy(this.providesSessionProvider));
        return weightGoalDialogFragment;
    }

    private XPromoInterstitialFragment injectXPromoInterstitialFragment(XPromoInterstitialFragment xPromoInterstitialFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(xPromoInterstitialFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(xPromoInterstitialFragment, (Glide) this.providesGlideProvider.get());
        XPromoInterstitialFragment_MembersInjector.injectAnalyticsService(xPromoInterstitialFragment, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        XPromoInterstitialFragment_MembersInjector.injectXpromoSettings(xPromoInterstitialFragment, getXPromoSettings());
        return xPromoInterstitialFragment;
    }

    private FriendsListFragment injectFriendsListFragment(FriendsListFragment friendsListFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(friendsListFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(friendsListFragment, (Glide) this.providesGlideProvider.get());
        FriendsListFragment_MembersInjector.injectFriendService(friendsListFragment, DoubleCheck.lazy(this.providesFriendServiceProvider));
        FriendsListFragment_MembersInjector.injectUserWeightService(friendsListFragment, DoubleCheck.lazy(this.userWeightServiceProvider));
        FriendsListFragment_MembersInjector.injectMiniUserInfoMapper(friendsListFragment, DoubleCheck.lazy(this.providesMiniUserInfoMapperProvider));
        FriendsListFragment_MembersInjector.injectNavigationHelper(friendsListFragment, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        return friendsListFragment;
    }

    private FriendRequestsFragment injectFriendRequestsFragment(FriendRequestsFragment friendRequestsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(friendRequestsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(friendRequestsFragment, (Glide) this.providesGlideProvider.get());
        FriendRequestsFragment_MembersInjector.injectNavigationHelper(friendRequestsFragment, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        FriendRequestsFragment_MembersInjector.injectFriendService(friendRequestsFragment, DoubleCheck.lazy(this.providesFriendServiceProvider));
        return friendRequestsFragment;
    }

    private PermissionsFragment injectPermissionsFragment(PermissionsFragment permissionsFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(permissionsFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(permissionsFragment, (Glide) this.providesGlideProvider.get());
        PermissionsFragment_MembersInjector.injectPermissionAnalyticsHelper(permissionsFragment, DoubleCheck.lazy(this.providePermissionAnalyticsHelperProvider));
        return permissionsFragment;
    }

    private AnimatedOnboardingFragment injectAnimatedOnboardingFragment(AnimatedOnboardingFragment animatedOnboardingFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(animatedOnboardingFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(animatedOnboardingFragment, (Glide) this.providesGlideProvider.get());
        AnimatedOnboardingFragment_MembersInjector.injectAnalyticsHelper(animatedOnboardingFragment, DoubleCheck.lazy(this.providePremiumOnboardingAnalyticsHelperProvider));
        AnimatedOnboardingFragment_MembersInjector.injectVmFactory(animatedOnboardingFragment, (PremiumOnboardingViewModelFactory) this.providePremiumOnboardingViewFactoryProvider.get());
        return animatedOnboardingFragment;
    }

    private WelcomeScreenFragment injectWelcomeScreenFragment(WelcomeScreenFragment welcomeScreenFragment) {
        MfpFragment_MembersInjector.injectBackgroundServiceHelper(welcomeScreenFragment, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        MfpFragment_MembersInjector.injectGlide(welcomeScreenFragment, (Glide) this.providesGlideProvider.get());
        WelcomeScreenFragment_MembersInjector.injectVmFactory(welcomeScreenFragment, (PremiumOnboardingViewModelFactory) this.providePremiumOnboardingViewFactoryProvider.get());
        return welcomeScreenFragment;
    }

    private CaloriePieLegend injectCaloriePieLegend(CaloriePieLegend caloriePieLegend) {
        CaloriePieLegend_MembersInjector.injectLocalizedStringsUtil(caloriePieLegend, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        CaloriePieLegend_MembersInjector.injectUserEnergyService(caloriePieLegend, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return caloriePieLegend;
    }

    private CustomBarChart injectCustomBarChart(CustomBarChart customBarChart) {
        CustomBarChart_MembersInjector.injectCoreChartLegendFactory(customBarChart, DoubleCheck.lazy(this.providesCoreChartLegendFactoryProvider));
        CustomBarChart_MembersInjector.injectSession(customBarChart, DoubleCheck.lazy(this.providesSessionProvider));
        CustomBarChart_MembersInjector.injectMessageBus(customBarChart, DoubleCheck.lazy(this.provideOttoBusProvider));
        return customBarChart;
    }

    private CustomPieChart injectCustomPieChart(CustomPieChart customPieChart) {
        CustomPieChart_MembersInjector.injectCoreChartLegendFactory(customPieChart, DoubleCheck.lazy(this.providesCoreChartLegendFactoryProvider));
        CustomPieChart_MembersInjector.injectMessageBus(customPieChart, DoubleCheck.lazy(this.provideOttoBusProvider));
        return customPieChart;
    }

    private IngredientsContainer injectIngredientsContainer(IngredientsContainer ingredientsContainer) {
        IngredientsContainer_MembersInjector.injectUserEnergyService(ingredientsContainer, DoubleCheck.lazy(this.userEnergyServiceProvider));
        return ingredientsContainer;
    }

    private LeftDrawerLayout injectLeftDrawerLayout(LeftDrawerLayout leftDrawerLayout) {
        LeftDrawerLayout_MembersInjector.injectBus(leftDrawerLayout, (Bus) this.provideOttoBusProvider.get());
        return leftDrawerLayout;
    }

    private LeftDrawerMenu injectLeftDrawerMenu(LeftDrawerMenu leftDrawerMenu) {
        LeftDrawerMenu_MembersInjector.injectNavigationHelper(leftDrawerMenu, ApplicationModule_ProvidesNavigationHelperFactory.proxyProvidesNavigationHelper(this.applicationModule));
        LeftDrawerMenu_MembersInjector.injectInAppNotificationManager(leftDrawerMenu, DoubleCheck.lazy(this.providesInAppNotificationManagerProvider));
        LeftDrawerMenu_MembersInjector.injectAnalyticsService(leftDrawerMenu, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        LeftDrawerMenu_MembersInjector.injectUserSummaryService(leftDrawerMenu, DoubleCheck.lazy(this.providesUserSummaryServiceProvider));
        LeftDrawerMenu_MembersInjector.injectBus(leftDrawerMenu, DoubleCheck.lazy(this.provideOttoBusProvider));
        LeftDrawerMenu_MembersInjector.injectUserWeightService(leftDrawerMenu, DoubleCheck.lazy(this.userWeightServiceProvider));
        LeftDrawerMenu_MembersInjector.injectConfigService(leftDrawerMenu, DoubleCheck.lazy(this.providesConfigServiceProvider));
        LeftDrawerMenu_MembersInjector.injectActionTrackingService(leftDrawerMenu, DoubleCheck.lazy(this.providesActionTrackingServiceProvider));
        LeftDrawerMenu_MembersInjector.injectBlogService(leftDrawerMenu, DoubleCheck.lazy(this.providesBlogServiceProvider));
        LeftDrawerMenu_MembersInjector.injectCommunityService(leftDrawerMenu, DoubleCheck.lazy(this.providesVanillaServiceProvider));
        LeftDrawerMenu_MembersInjector.injectSyncEngine(leftDrawerMenu, DoubleCheck.lazy(this.providesSyncEngineProvider));
        LeftDrawerMenu_MembersInjector.injectSession(leftDrawerMenu, DoubleCheck.lazy(this.providesSessionProvider));
        LeftDrawerMenu_MembersInjector.injectPremiumService(leftDrawerMenu, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        LeftDrawerMenu_MembersInjector.injectLocalSettingsService(leftDrawerMenu, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        LeftDrawerMenu_MembersInjector.injectGoogleFitClient(leftDrawerMenu, DoubleCheck.lazy(this.providesGoogleFitClientProvider));
        LeftDrawerMenu_MembersInjector.injectBackgroundJobHelper(leftDrawerMenu, DoubleCheck.lazy(this.providesBackgroundServiceHelperProvider));
        LeftDrawerMenu_MembersInjector.injectConsentsAnalyticsHelper(leftDrawerMenu, DoubleCheck.lazy(this.provideConsentsAnalyticsHelperProvider));
        return leftDrawerMenu;
    }

    private MenusListView injectMenusListView(MenusListView menusListView) {
        MenusListView_MembersInjector.injectUserEnergyService(menusListView, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MenusListView_MembersInjector.injectRestaurantLoggingSettingsService(menusListView, DoubleCheck.lazy(this.providesRestaurantLoggingSettingsServiceProvider));
        MenusListView_MembersInjector.injectMultiAddMenuItemHelper(menusListView, DoubleCheck.lazy(this.providesMultiAddMenuItemHelperProvider));
        return menusListView;
    }

    private MiniFoodList injectMiniFoodList(MiniFoodList miniFoodList) {
        MiniFoodList_MembersInjector.injectPremiumService(miniFoodList, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MiniFoodList_MembersInjector.injectCoreChartRendererBaseConstructorArgs(miniFoodList, DoubleCheck.lazy(this.providesCoreChartRendererBaseConstructorArgsProvider));
        MiniFoodList_MembersInjector.injectBus(miniFoodList, DoubleCheck.lazy(this.provideOttoBusProvider));
        MiniFoodList_MembersInjector.injectLocalizedStringUtil(miniFoodList, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MiniFoodList_MembersInjector.injectUserEnergyService(miniFoodList, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MiniFoodList_MembersInjector.injectConfigService(miniFoodList, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MiniFoodList_MembersInjector.injectNutritionAnalyticsHelper(miniFoodList, DoubleCheck.lazy(this.provideNutritionAnalyticsHelperProvider));
        return miniFoodList;
    }

    private VenuesListView injectVenuesListView(VenuesListView venuesListView) {
        VenuesListView_MembersInjector.injectUserDistanceService(venuesListView, DoubleCheck.lazy(this.userDistanceServiceProvider));
        VenuesListView_MembersInjector.injectNavigationHelper(venuesListView, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        return venuesListView;
    }

    private AddExerciseDeepLinkMixin injectAddExerciseDeepLinkMixin(AddExerciseDeepLinkMixin addExerciseDeepLinkMixin) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(addExerciseDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAnalytics(addExerciseDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAppIndexerBot(addExerciseDeepLinkMixin, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        AddExerciseDeepLinkMixin_MembersInjector.injectMapper(addExerciseDeepLinkMixin, getExerciseEntryMapper());
        AddExerciseDeepLinkMixin_MembersInjector.injectDiaryService(addExerciseDeepLinkMixin, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        AddExerciseDeepLinkMixin_MembersInjector.injectDbConnectionManager(addExerciseDeepLinkMixin, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return addExerciseDeepLinkMixin;
    }

    private AddFoodDeepLinkMixin injectAddFoodDeepLinkMixin(AddFoodDeepLinkMixin addFoodDeepLinkMixin) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAnalytics(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAppIndexerBot(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectSearchService(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesSearchServiceProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectAnalytics(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectFoodMapper(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesFoodMapperProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectMfpFoodMapper(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectDbConnectionManager(addFoodDeepLinkMixin, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        AddFoodDeepLinkMixin_MembersInjector.injectConfigService(addFoodDeepLinkMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return addFoodDeepLinkMixin;
    }

    private AppIndexerMixinBase injectAppIndexerMixinBase(AppIndexerMixinBase appIndexerMixinBase) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(appIndexerMixinBase, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAnalytics(appIndexerMixinBase, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        AppIndexerMixinBase_MembersInjector.injectAppIndexerBot(appIndexerMixinBase, DoubleCheck.lazy(this.providesAppIndexerBotProvider));
        return appIndexerMixinBase;
    }

    private BarcodeMultiAddMixin injectBarcodeMultiAddMixin(BarcodeMultiAddMixin barcodeMultiAddMixin) {
        FoodEditorMixin_MembersInjector.injectFoodMapperV1(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectFoodMapperV2(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectConfigService(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        FoodEditorMixin_MembersInjector.injectImageService(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        FoodEditorMixin_MembersInjector.injectMealUtil(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        FoodEditorMixin_MembersInjector.injectMultiAddFoodHelper(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodEditorMixin_MembersInjector.injectAnalyticsService(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        FoodEditorMixin_MembersInjector.injectFoodService(barcodeMultiAddMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        BarcodeMultiAddMixin_MembersInjector.injectMultiAddHelper(barcodeMultiAddMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        return barcodeMultiAddMixin;
    }

    private BottomBarMixin injectBottomBarMixin(BottomBarMixin bottomBarMixin) {
        BottomBarMixin_MembersInjector.injectAnalytics(bottomBarMixin, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        BottomBarMixin_MembersInjector.injectConfigService(bottomBarMixin, (ConfigService) this.providesConfigServiceProvider.get());
        BottomBarMixin_MembersInjector.injectSession(bottomBarMixin, (Session) this.providesSessionProvider.get());
        return bottomBarMixin;
    }

    private ChallengesMixin injectChallengesMixin(ChallengesMixin challengesMixin) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(challengesMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        ChallengesMixin_MembersInjector.injectChallengesService(challengesMixin, DoubleCheck.lazy(this.providesChallengesServiceProvider));
        return challengesMixin;
    }

    private DeepLinkMixinBase injectDeepLinkMixinBase(DeepLinkMixinBase deepLinkMixinBase) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(deepLinkMixinBase, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return deepLinkMixinBase;
    }

    private FoodEditorMixin injectFoodEditorMixin(FoodEditorMixin foodEditorMixin) {
        FoodEditorMixin_MembersInjector.injectFoodMapperV1(foodEditorMixin, DoubleCheck.lazy(this.providesFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectFoodMapperV2(foodEditorMixin, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectConfigService(foodEditorMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        FoodEditorMixin_MembersInjector.injectImageService(foodEditorMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        FoodEditorMixin_MembersInjector.injectMealUtil(foodEditorMixin, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        FoodEditorMixin_MembersInjector.injectMultiAddFoodHelper(foodEditorMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodEditorMixin_MembersInjector.injectAnalyticsService(foodEditorMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        FoodEditorMixin_MembersInjector.injectFoodService(foodEditorMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        return foodEditorMixin;
    }

    private GetRecipeV2Mixin injectGetRecipeV2Mixin(GetRecipeV2Mixin getRecipeV2Mixin) {
        GetRecipeV2Mixin_MembersInjector.injectRecipeService(getRecipeV2Mixin, DoubleCheck.lazy(this.provideRecipeServiceProvider));
        return getRecipeV2Mixin;
    }

    private MealEditorMixin injectMealEditorMixin(MealEditorMixin mealEditorMixin) {
        MealEditorMixin_MembersInjector.injectMealService(mealEditorMixin, DoubleCheck.lazy(this.providesMealServiceProvider));
        MealEditorMixin_MembersInjector.injectFoodService(mealEditorMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        MealEditorMixin_MembersInjector.injectMealHelperUtil(mealEditorMixin, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        MealEditorMixin_MembersInjector.injectMultiAddFoodHelper(mealEditorMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        MealEditorMixin_MembersInjector.injectMealIngredientMapper(mealEditorMixin, DoubleCheck.lazy(this.providesMealIngedientMapperProvider));
        MealEditorMixin_MembersInjector.injectImageService(mealEditorMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        MealEditorMixin_MembersInjector.injectMealAnalyticsHelper(mealEditorMixin, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        MealEditorMixin_MembersInjector.injectMealBrowseAnalytics(mealEditorMixin, DoubleCheck.lazy(this.provideMealBrowseAnalyticsHelperProvider));
        MealEditorMixin_MembersInjector.injectConfigService(mealEditorMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MealEditorMixin_MembersInjector.injectLocalSettingsService(mealEditorMixin, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        MealEditorMixin_MembersInjector.injectFoodPermissionsService(mealEditorMixin, DoubleCheck.lazy(this.providesFoodPermissionsServiceProvider));
        MealEditorMixin_MembersInjector.injectFoodNotesTable(mealEditorMixin, DoubleCheck.lazy(this.foodNotesTableProvider));
        MealEditorMixin_MembersInjector.injectFoodSearchRouter(mealEditorMixin, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return mealEditorMixin;
    }

    private MealFoodLoaderMixin injectMealFoodLoaderMixin(MealFoodLoaderMixin mealFoodLoaderMixin) {
        MealFoodLoaderMixin_MembersInjector.injectFoodService(mealFoodLoaderMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        MealFoodLoaderMixin_MembersInjector.injectMealAnalyticsHelper(mealFoodLoaderMixin, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        return mealFoodLoaderMixin;
    }

    private MealIngredientMixin injectMealIngredientMixin(MealIngredientMixin mealIngredientMixin) {
        FoodEditorMixin_MembersInjector.injectFoodMapperV1(mealIngredientMixin, DoubleCheck.lazy(this.providesFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectFoodMapperV2(mealIngredientMixin, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectConfigService(mealIngredientMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        FoodEditorMixin_MembersInjector.injectImageService(mealIngredientMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        FoodEditorMixin_MembersInjector.injectMealUtil(mealIngredientMixin, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        FoodEditorMixin_MembersInjector.injectMultiAddFoodHelper(mealIngredientMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodEditorMixin_MembersInjector.injectAnalyticsService(mealIngredientMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        FoodEditorMixin_MembersInjector.injectFoodService(mealIngredientMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        MealIngredientMixin_MembersInjector.injectMultiAddHelper(mealIngredientMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        return mealIngredientMixin;
    }

    private MenuItemEditorMixin injectMenuItemEditorMixin(MenuItemEditorMixin menuItemEditorMixin) {
        MenuItemEditorMixin_MembersInjector.injectMenuService(menuItemEditorMixin, DoubleCheck.lazy(this.providesMenuServiceProvider));
        MenuItemEditorMixin_MembersInjector.injectRestaurantLoggingSettingsService(menuItemEditorMixin, DoubleCheck.lazy(this.providesRestaurantLoggingSettingsServiceProvider));
        MenuItemEditorMixin_MembersInjector.injectRestaurantLoggingAnalyticsHelper(menuItemEditorMixin, DoubleCheck.lazy(this.providesRestaurantLoggingAnalyticsHelperProvider));
        return menuItemEditorMixin;
    }

    private MultiAddFoodEditorMixin injectMultiAddFoodEditorMixin(MultiAddFoodEditorMixin multiAddFoodEditorMixin) {
        FoodEditorMixin_MembersInjector.injectFoodMapperV1(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectFoodMapperV2(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesMfpFoodMapperProvider));
        FoodEditorMixin_MembersInjector.injectConfigService(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        FoodEditorMixin_MembersInjector.injectImageService(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        FoodEditorMixin_MembersInjector.injectMealUtil(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesMealHelperUtilProvider));
        FoodEditorMixin_MembersInjector.injectMultiAddFoodHelper(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesMultiAddFoodHelperProvider));
        FoodEditorMixin_MembersInjector.injectAnalyticsService(multiAddFoodEditorMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        FoodEditorMixin_MembersInjector.injectFoodService(multiAddFoodEditorMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        return multiAddFoodEditorMixin;
    }

    private SharedMealViewerMixin injectSharedMealViewerMixin(SharedMealViewerMixin sharedMealViewerMixin) {
        SharedMealViewerMixin_MembersInjector.injectFoodService(sharedMealViewerMixin, DoubleCheck.lazy(this.provideFoodServiceProvider));
        SharedMealViewerMixin_MembersInjector.injectImageService(sharedMealViewerMixin, DoubleCheck.lazy(this.providesImageServiceProvider));
        SharedMealViewerMixin_MembersInjector.injectFoodPermissionsService(sharedMealViewerMixin, DoubleCheck.lazy(this.providesFoodPermissionsServiceProvider));
        SharedMealViewerMixin_MembersInjector.injectMealService(sharedMealViewerMixin, DoubleCheck.lazy(this.providesMealServiceProvider));
        SharedMealViewerMixin_MembersInjector.injectUrlProvider(sharedMealViewerMixin, DoubleCheck.lazy(this.provideApiUrlProvider));
        SharedMealViewerMixin_MembersInjector.injectMealAnalyticsHelper(sharedMealViewerMixin, DoubleCheck.lazy(this.providesMealAnalyticsHelperProvider));
        return sharedMealViewerMixin;
    }

    private SendVerificationEmailMixin injectSendVerificationEmailMixin(SendVerificationEmailMixin sendVerificationEmailMixin) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(sendVerificationEmailMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SendVerificationEmailMixin_MembersInjector.injectUserPropertiesService(sendVerificationEmailMixin, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        SendVerificationEmailMixin_MembersInjector.injectNewsFeedAnalyticsHelper(sendVerificationEmailMixin, DoubleCheck.lazy(this.providesNewsFeedAnalyticsHelperProvider));
        return sendVerificationEmailMixin;
    }

    private VenueDeepLinkMixin injectVenueDeepLinkMixin(VenueDeepLinkMixin venueDeepLinkMixin) {
        DeepLinkMixinBase_MembersInjector.injectAnalytics(venueDeepLinkMixin, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        VenueDeepLinkMixin_MembersInjector.injectVenueService(venueDeepLinkMixin, DoubleCheck.lazy(this.providesVenueServiceProvider));
        return venueDeepLinkMixin;
    }

    private FoodFeedbackOptionsMixin injectFoodFeedbackOptionsMixin(FoodFeedbackOptionsMixin foodFeedbackOptionsMixin) {
        FoodFeedbackOptionsMixin_MembersInjector.injectFoodFeedbackAnalyticsHelper(foodFeedbackOptionsMixin, DoubleCheck.lazy(this.provideFoodFoodbackAnalyticsHelperProvider));
        return foodFeedbackOptionsMixin;
    }

    private FloatingButtonMixin injectFloatingButtonMixin(FloatingButtonMixin floatingButtonMixin) {
        FloatingButtonMixin_MembersInjector.injectConfigService(floatingButtonMixin, DoubleCheck.lazy(this.providesConfigServiceProvider));
        FloatingButtonMixin_MembersInjector.injectWaterLoggingAnalyticsHelper(floatingButtonMixin, DoubleCheck.lazy(this.providesWaterLoggingAnalyticsHelperProvider));
        FloatingButtonMixin_MembersInjector.injectHomeAnalyticsHelper(floatingButtonMixin, DoubleCheck.lazy(this.provideHomeAnalyticsHelperProvider));
        FloatingButtonMixin_MembersInjector.injectUserWeightService(floatingButtonMixin, DoubleCheck.lazy(this.userWeightServiceProvider));
        FloatingButtonMixin_MembersInjector.injectDiaryService(floatingButtonMixin, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        FloatingButtonMixin_MembersInjector.injectExerciseAnalyticsHelper(floatingButtonMixin, DoubleCheck.lazy(this.provideExerciseAnalyticsHelperProvider));
        FloatingButtonMixin_MembersInjector.injectFoodSearchRouter(floatingButtonMixin, DoubleCheck.lazy(this.foodSearchActivityFactoryProvider));
        return floatingButtonMixin;
    }

    private MfpWebView injectMfpWebView(MfpWebView mfpWebView) {
        MfpWebView_MembersInjector.injectUserAgentProvider(mfpWebView, (UserAgentProvider) this.provideUserAgentProvider.get());
        return mfpWebView;
    }

    private MyItemsTask injectMyItemsTask(MyItemsTask myItemsTask) {
        MyItemsViewModel_MyItemsTask_MembersInjector.injectExerciseService(myItemsTask, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        MyItemsViewModel_MyItemsTask_MembersInjector.injectDbConnectionManager(myItemsTask, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        MyItemsViewModel_MyItemsTask_MembersInjector.injectSession(myItemsTask, DoubleCheck.lazy(this.providesSessionProvider));
        return myItemsTask;
    }

    private OnlineDataTask injectOnlineDataTask(OnlineDataTask onlineDataTask) {
        MyInfoViewModel_OnlineDataTask_MembersInjector.injectAggregator(onlineDataTask, DoubleCheck.lazy(this.provideProfileAggregatorServiceProvider));
        return onlineDataTask;
    }

    private OfflineDataTask injectOfflineDataTask(OfflineDataTask offlineDataTask) {
        MyInfoViewModel_OfflineDataTask_MembersInjector.injectAggregator(offlineDataTask, DoubleCheck.lazy(this.provideProfileAggregatorServiceProvider));
        return offlineDataTask;
    }

    private ExploreDataTask injectExploreDataTask(ExploreDataTask exploreDataTask) {
        ExploreViewModel_ExploreDataTask_MembersInjector.injectExploreService(exploreDataTask, getExploreService());
        return exploreDataTask;
    }

    private MyFitnessPalApp injectMyFitnessPalApp(MyFitnessPalApp myFitnessPalApp) {
        MyFitnessPalApp_MembersInjector.injectAppLifecycleObserver(myFitnessPalApp, (AppLifecycleObserver) this.provideAppLifecycleObserverProvider.get());
        return myFitnessPalApp;
    }

    private UserV1 injectUserV1(UserV1 userV1) {
        UserV1_MembersInjector.injectCountryService(userV1, DoubleCheck.lazy(this.providesCountryServiceProvider));
        UserV1_MembersInjector.injectMeasurementsService(userV1, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        UserV1_MembersInjector.injectSyncScheduler(userV1, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        UserV1_MembersInjector.injectDiaryService(userV1, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        UserV1_MembersInjector.injectGoalPreferences(userV1, DoubleCheck.lazy(this.providesUserV1GoalPreferencesProvider));
        UserV1_MembersInjector.injectUserImageService(userV1, DoubleCheck.lazy(this.provideUserImageServiceProvider));
        UserV1_MembersInjector.injectLocalSettingsService(userV1, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        UserV1_MembersInjector.injectUpdatedTermsAnalyticsHelper(userV1, DoubleCheck.lazy(this.providesUpdatedTermsAnalyticsHelperProvider));
        UserV1_MembersInjector.injectBus(userV1, DoubleCheck.lazy(this.provideOttoBusProvider));
        UserV1_MembersInjector.injectDbConnectionManager(userV1, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return userV1;
    }

    private UserV1NutrientGoals injectUserV1NutrientGoals(UserV1NutrientGoals userV1NutrientGoals) {
        UserV1NutrientGoals_MembersInjector.injectUserEnergyService(userV1NutrientGoals, DoubleCheck.lazy(this.userEnergyServiceProvider));
        UserV1NutrientGoals_MembersInjector.injectNutrientGoalsUtil(userV1NutrientGoals, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        return userV1NutrientGoals;
    }

    private SessionDBAdapter injectSessionDBAdapter(SessionDBAdapter sessionDBAdapter) {
        SessionDBAdapter_MembersInjector.injectSession(sessionDBAdapter, DoubleCheck.lazy(this.providesSessionProvider));
        SessionDBAdapter_MembersInjector.injectFoodService(sessionDBAdapter, DoubleCheck.lazy(this.provideFoodServiceProvider));
        return sessionDBAdapter;
    }

    private SynchronizationRequest injectSynchronizationRequest(SynchronizationRequest synchronizationRequest) {
        SynchronizationRequest_MembersInjector.injectApiDeviceTokenProvider(synchronizationRequest, getApiDeviceTokenProvider());
        SynchronizationRequest_MembersInjector.injectSyncPointerService(synchronizationRequest, DoubleCheck.lazy(this.provideSyncPointerServiceProvider));
        SynchronizationRequest_MembersInjector.injectSignUpModel(synchronizationRequest, DoubleCheck.lazy(this.providesSignUpModelProvider));
        SynchronizationRequest_MembersInjector.injectLoginModel(synchronizationRequest, DoubleCheck.lazy(this.providesLoginModelProvider));
        SynchronizationRequest_MembersInjector.injectEncoder(synchronizationRequest, new BinaryEncoder());
        SynchronizationRequest_MembersInjector.injectUuidBytes(synchronizationRequest, (byte[]) this.provideDeviceUUIDBytesProvider.get());
        SynchronizationRequest_MembersInjector.injectAppSettings(synchronizationRequest, DoubleCheck.lazy(this.appSettingsProvider));
        SynchronizationRequest_MembersInjector.injectDbConnectionManager(synchronizationRequest, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return synchronizationRequest;
    }

    private SynchronizationResponse injectSynchronizationResponse(SynchronizationResponse synchronizationResponse) {
        BinaryResponse_MembersInjector.injectContext(synchronizationResponse, (Context) this.provideAppContextProvider.get());
        BinaryResponse_MembersInjector.injectAppSettings(synchronizationResponse, getAppSettings());
        BinaryResponse_MembersInjector.injectSyncSettings(synchronizationResponse, getSyncSettings());
        BinaryResponse_MembersInjector.injectSession(synchronizationResponse, DoubleCheck.lazy(this.providesSessionProvider));
        BinaryResponse_MembersInjector.injectDbConnectionManager(synchronizationResponse, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        SynchronizationResponse_MembersInjector.injectStepsService(synchronizationResponse, DoubleCheck.lazy(this.provideStepsServiceProvider));
        SynchronizationResponse_MembersInjector.injectAnalyticsService(synchronizationResponse, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        SynchronizationResponse_MembersInjector.injectSession(synchronizationResponse, DoubleCheck.lazy(this.providesSessionProvider));
        SynchronizationResponse_MembersInjector.injectDiaryService(synchronizationResponse, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        SynchronizationResponse_MembersInjector.injectRemindersService(synchronizationResponse, DoubleCheck.lazy(this.provideRemindersServiceProvider));
        SynchronizationResponse_MembersInjector.injectUserImageService(synchronizationResponse, DoubleCheck.lazy(this.provideUserImageServiceProvider));
        SynchronizationResponse_MembersInjector.injectExerciseService(synchronizationResponse, DoubleCheck.lazy(this.provideExerciseServiceProvider));
        SynchronizationResponse_MembersInjector.injectMeasurementsService(synchronizationResponse, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        SynchronizationResponse_MembersInjector.injectFoodService(synchronizationResponse, DoubleCheck.lazy(this.provideFoodServiceProvider));
        SynchronizationResponse_MembersInjector.injectLoginModel(synchronizationResponse, DoubleCheck.lazy(this.providesLoginModelProvider));
        SynchronizationResponse_MembersInjector.injectExternalNutritionService(synchronizationResponse, DoubleCheck.lazy(this.providesAggregateExternalNutritionServiceProvider));
        SynchronizationResponse_MembersInjector.injectFoodPermissionsService(synchronizationResponse, DoubleCheck.lazy(this.providesFoodPermissionsServiceProvider));
        SynchronizationResponse_MembersInjector.injectGlobalSettingsService(synchronizationResponse, DoubleCheck.lazy(this.provideGlobalSettingsServiceProvider));
        SynchronizationResponse_MembersInjector.injectDbConnectionManager(synchronizationResponse, (DbConnectionManager) this.provideDbConnectionManagerProvider.get());
        SynchronizationResponse_MembersInjector.injectRecipesTable(synchronizationResponse, DoubleCheck.lazy(this.recipesTableProvider));
        SynchronizationResponse_MembersInjector.injectFoodNotesTable(synchronizationResponse, DoubleCheck.lazy(this.foodNotesTableProvider));
        return synchronizationResponse;
    }

    private BinaryResponse injectBinaryResponse(BinaryResponse binaryResponse) {
        BinaryResponse_MembersInjector.injectContext(binaryResponse, (Context) this.provideAppContextProvider.get());
        BinaryResponse_MembersInjector.injectAppSettings(binaryResponse, getAppSettings());
        BinaryResponse_MembersInjector.injectSyncSettings(binaryResponse, getSyncSettings());
        BinaryResponse_MembersInjector.injectSession(binaryResponse, DoubleCheck.lazy(this.providesSessionProvider));
        BinaryResponse_MembersInjector.injectDbConnectionManager(binaryResponse, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return binaryResponse;
    }

    private ApiRequestPacketImpl injectApiRequestPacketImpl(ApiRequestPacketImpl apiRequestPacketImpl) {
        ApiRequestPacketImpl_MembersInjector.injectVersionCode(apiRequestPacketImpl, getNamedLong());
        ApiRequestPacketImpl_MembersInjector.injectApiDeviceTokenProvider(apiRequestPacketImpl, getApiDeviceTokenProvider());
        ApiRequestPacketImpl_MembersInjector.injectUuidBytes(apiRequestPacketImpl, (byte[]) this.provideDeviceUUIDBytesProvider.get());
        ApiRequestPacketImpl_MembersInjector.injectAppSettings(apiRequestPacketImpl, getAppSettings());
        return apiRequestPacketImpl;
    }

    private EmailUniquenessCheckRequestPacket injectEmailUniquenessCheckRequestPacket(EmailUniquenessCheckRequestPacket emailUniquenessCheckRequestPacket) {
        ApiRequestPacketImpl_MembersInjector.injectVersionCode(emailUniquenessCheckRequestPacket, getNamedLong());
        ApiRequestPacketImpl_MembersInjector.injectApiDeviceTokenProvider(emailUniquenessCheckRequestPacket, getApiDeviceTokenProvider());
        ApiRequestPacketImpl_MembersInjector.injectUuidBytes(emailUniquenessCheckRequestPacket, (byte[]) this.provideDeviceUUIDBytesProvider.get());
        ApiRequestPacketImpl_MembersInjector.injectAppSettings(emailUniquenessCheckRequestPacket, getAppSettings());
        EmailUniquenessCheckRequestPacket_MembersInjector.injectEmailValidator(emailUniquenessCheckRequestPacket, ApplicationModule_ProvideEmailValidatorFactory.proxyProvideEmailValidator(this.applicationModule));
        return emailUniquenessCheckRequestPacket;
    }

    private MfpUiComponentDelegate injectMfpUiComponentDelegate(MfpUiComponentDelegate mfpUiComponentDelegate) {
        MfpUiComponentDelegate_MembersInjector.injectNavigationHelper(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        MfpUiComponentDelegate_MembersInjector.injectMessageBus(mfpUiComponentDelegate, DoubleCheck.lazy(this.provideOttoBusProvider));
        MfpUiComponentDelegate_MembersInjector.injectBusyManager(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesBusyManagerProvider));
        MfpUiComponentDelegate_MembersInjector.injectAnalyticsService(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MfpUiComponentDelegate_MembersInjector.injectLazyCountryService(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesCountryServiceProvider));
        MfpUiComponentDelegate_MembersInjector.injectConfigService(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpUiComponentDelegate_MembersInjector.injectSession(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesSessionProvider));
        MfpUiComponentDelegate_MembersInjector.injectViewModelCache(mfpUiComponentDelegate, DoubleCheck.lazy(this.providesViewModelCacheProvider));
        return mfpUiComponentDelegate;
    }

    private NutritionDetailsDelegate injectNutritionDetailsDelegate(NutritionDetailsDelegate nutritionDetailsDelegate) {
        NutritionDetailsDelegate_MembersInjector.injectNutrientGoalService(nutritionDetailsDelegate, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        NutritionDetailsDelegate_MembersInjector.injectNutritionalGoalsUtil(nutritionDetailsDelegate, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        NutritionDetailsDelegate_MembersInjector.injectUserEnergyService(nutritionDetailsDelegate, DoubleCheck.lazy(this.userEnergyServiceProvider));
        NutritionDetailsDelegate_MembersInjector.injectMessageBus(nutritionDetailsDelegate, DoubleCheck.lazy(this.provideOttoBusProvider));
        return nutritionDetailsDelegate;
    }

    private MfpSyncV2OpDelegate injectMfpSyncV2OpDelegate(MfpSyncV2OpDelegate mfpSyncV2OpDelegate) {
        MfpSyncV2OpDelegate_MembersInjector.injectMapOfResourceNameToHandler(mfpSyncV2OpDelegate, getMapOfStringAndSyncItemHandler());
        MfpSyncV2OpDelegate_MembersInjector.injectSyncUtil(mfpSyncV2OpDelegate, DoubleCheck.lazy(this.providesSyncUtilProvider));
        MfpSyncV2OpDelegate_MembersInjector.injectPrefs(mfpSyncV2OpDelegate, getNamedKeyedSharedPreferences2());
        return mfpSyncV2OpDelegate;
    }

    private DiaryAdapter injectDiaryAdapter(DiaryAdapter diaryAdapter) {
        DiaryAdapter_MembersInjector.injectUserEnergyService(diaryAdapter, DoubleCheck.lazy(this.userEnergyServiceProvider));
        DiaryAdapter_MembersInjector.injectExerciseStringService(diaryAdapter, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        DiaryAdapter_MembersInjector.injectLocalizedStringsUtil(diaryAdapter, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        DiaryAdapter_MembersInjector.injectBus(diaryAdapter, DoubleCheck.lazy(this.provideOttoBusProvider));
        DiaryAdapter_MembersInjector.injectFoodService(diaryAdapter, DoubleCheck.lazy(this.provideFoodServiceProvider));
        DiaryAdapter_MembersInjector.injectAppGalleryService(diaryAdapter, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        DiaryAdapter_MembersInjector.injectStepService(diaryAdapter, DoubleCheck.lazy(this.provideStepsServiceProvider));
        DiaryAdapter_MembersInjector.injectAdsSettings(diaryAdapter, DoubleCheck.lazy(this.adsSettingsProvider));
        DiaryAdapter_MembersInjector.injectAdsAnalytics(diaryAdapter, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        DiaryAdapter_MembersInjector.injectNavigationHelper(diaryAdapter, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        DiaryAdapter_MembersInjector.injectConfigService(diaryAdapter, DoubleCheck.lazy(this.providesConfigServiceProvider));
        DiaryAdapter_MembersInjector.injectLocalSettingsService(diaryAdapter, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiaryAdapter_MembersInjector.injectSession(diaryAdapter, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryAdapter_MembersInjector.injectPremiumService(diaryAdapter, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryAdapter_MembersInjector.injectAnalyticsService(diaryAdapter, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryAdapter_MembersInjector.injectDiaryAnalyticsHelper(diaryAdapter, DoubleCheck.lazy(this.providesDiaryAnalyticsHelperProvider));
        DiaryAdapter_MembersInjector.injectFitStepsSharedPreferences(diaryAdapter, DoubleCheck.lazy(this.providesFitClientPreferencesProvider));
        DiaryAdapter_MembersInjector.injectLocationService(diaryAdapter, DoubleCheck.lazy(this.provideLocationServiceProvider));
        DiaryAdapter_MembersInjector.injectAdUnitService(diaryAdapter, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        return diaryAdapter;
    }

    private DiaryLandscapeAdapter injectDiaryLandscapeAdapter(DiaryLandscapeAdapter diaryLandscapeAdapter) {
        DiaryAdapter_MembersInjector.injectUserEnergyService(diaryLandscapeAdapter, DoubleCheck.lazy(this.userEnergyServiceProvider));
        DiaryAdapter_MembersInjector.injectExerciseStringService(diaryLandscapeAdapter, DoubleCheck.lazy(this.exerciseStringServiceProvider));
        DiaryAdapter_MembersInjector.injectLocalizedStringsUtil(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        DiaryAdapter_MembersInjector.injectBus(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideOttoBusProvider));
        DiaryAdapter_MembersInjector.injectFoodService(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideFoodServiceProvider));
        DiaryAdapter_MembersInjector.injectAppGalleryService(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesAppGalleryServiceProvider));
        DiaryAdapter_MembersInjector.injectStepService(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideStepsServiceProvider));
        DiaryAdapter_MembersInjector.injectAdsSettings(diaryLandscapeAdapter, DoubleCheck.lazy(this.adsSettingsProvider));
        DiaryAdapter_MembersInjector.injectAdsAnalytics(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesAdsAnalyticHelperProvider));
        DiaryAdapter_MembersInjector.injectNavigationHelper(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesNavigationHelperProvider));
        DiaryAdapter_MembersInjector.injectConfigService(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesConfigServiceProvider));
        DiaryAdapter_MembersInjector.injectLocalSettingsService(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideSettingsServiceProvider));
        DiaryAdapter_MembersInjector.injectSession(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryAdapter_MembersInjector.injectPremiumService(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryAdapter_MembersInjector.injectAnalyticsService(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        DiaryAdapter_MembersInjector.injectDiaryAnalyticsHelper(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesDiaryAnalyticsHelperProvider));
        DiaryAdapter_MembersInjector.injectFitStepsSharedPreferences(diaryLandscapeAdapter, DoubleCheck.lazy(this.providesFitClientPreferencesProvider));
        DiaryAdapter_MembersInjector.injectLocationService(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideLocationServiceProvider));
        DiaryAdapter_MembersInjector.injectAdUnitService(diaryLandscapeAdapter, DoubleCheck.lazy(this.provideAdUnitServiceProvider));
        return diaryLandscapeAdapter;
    }

    private SearchCategoryItemAdapter injectSearchCategoryItemAdapter(SearchCategoryItemAdapter searchCategoryItemAdapter) {
        SearchCategoryItemAdapter_MembersInjector.injectUserEnergyService(searchCategoryItemAdapter, getUserEnergyService());
        SearchCategoryItemAdapter_MembersInjector.injectLocalizedStringsUtil(searchCategoryItemAdapter, getLocalizedStringsUtil());
        return searchCategoryItemAdapter;
    }

    private DiaryDay injectDiaryDay(DiaryDay diaryDay) {
        DiaryDay_MembersInjector.injectUserEnergyService(diaryDay, getUserEnergyService());
        DiaryDay_MembersInjector.injectUserWeightService(diaryDay, getUserWeightService());
        DiaryDay_MembersInjector.injectUserDistanceService(diaryDay, getUserDistanceService());
        DiaryDay_MembersInjector.injectFoodEntryMapper(diaryDay, DoubleCheck.lazy(this.providesFoodEntryFromServerMapperProvider));
        DiaryDay_MembersInjector.injectExerciseV1EntryMapper(diaryDay, DoubleCheck.lazy(this.providesExerciseEntryFromServerMapperProvider));
        DiaryDay_MembersInjector.injectExerciseEntryMapper(diaryDay, DoubleCheck.lazy(this.providesExerciseEntryMapperProvider));
        DiaryDay_MembersInjector.injectWaterEntryMapper(diaryDay, DoubleCheck.lazy(this.providesWaterEntryMapperProvider));
        DiaryDay_MembersInjector.injectDiaryNoteMapper(diaryDay, DoubleCheck.lazy(this.providesDiaryNoteMapperProvider));
        DiaryDay_MembersInjector.injectNutrientGoalService(diaryDay, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        DiaryDay_MembersInjector.injectPremiumService(diaryDay, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        DiaryDay_MembersInjector.injectFoodService(diaryDay, DoubleCheck.lazy(this.provideFoodServiceProvider));
        DiaryDay_MembersInjector.injectInsightSettings(diaryDay, DoubleCheck.lazy(this.insightSettingsProvider));
        DiaryDay_MembersInjector.injectSession(diaryDay, DoubleCheck.lazy(this.providesSessionProvider));
        DiaryDay_MembersInjector.injectSyncScheduler(diaryDay, DoubleCheck.lazy(this.providesSyncSchedulerProvider));
        DiaryDay_MembersInjector.injectDiaryService(diaryDay, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        DiaryDay_MembersInjector.injectBus(diaryDay, DoubleCheck.lazy(this.provideOttoBusProvider));
        DiaryDay_MembersInjector.injectDbConnectionManager(diaryDay, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        DiaryDay_MembersInjector.injectExternalNutritionService(diaryDay, DoubleCheck.lazy(this.providesAggregateExternalNutritionServiceProvider));
        return diaryDay;
    }

    private InAppNotificationService injectInAppNotificationService(InAppNotificationService inAppNotificationService) {
        InAppNotificationService_MembersInjector.injectUserPropertiesService(inAppNotificationService, DoubleCheck.lazy(this.providesUserPropertiesServiceProvider));
        InAppNotificationService_MembersInjector.injectBus(inAppNotificationService, DoubleCheck.lazy(this.provideOttoBusProvider));
        InAppNotificationService_MembersInjector.injectInAppNotificationManager(inAppNotificationService, DoubleCheck.lazy(this.providesInAppNotificationManagerProvider));
        return inAppNotificationService;
    }

    private MFPFirebaseMessagingService injectMFPFirebaseMessagingService(MFPFirebaseMessagingService mFPFirebaseMessagingService) {
        MFPFirebaseMessagingService_MembersInjector.injectPushNotificationManager(mFPFirebaseMessagingService, (PushNotificationManager) this.providesPushNotificationManagerProvider.get());
        MFPFirebaseMessagingService_MembersInjector.injectApiDeviceTokenProvider(mFPFirebaseMessagingService, getApiDeviceTokenProvider());
        return mFPFirebaseMessagingService;
    }

    private MfpGearMessageBridge injectMfpGearMessageBridge(MfpGearMessageBridge mfpGearMessageBridge) {
        MfpGearMessageBridge_MembersInjector.injectNutrientGoalsService(mfpGearMessageBridge, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectNutrientGoalsUtil(mfpGearMessageBridge, DoubleCheck.lazy(this.providesNutritionalGoalsUtilServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectUserEnergyService(mfpGearMessageBridge, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectStepService(mfpGearMessageBridge, DoubleCheck.lazy(this.provideStepsServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectLocalizedStringsUtil(mfpGearMessageBridge, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MfpGearMessageBridge_MembersInjector.injectPremiumService(mfpGearMessageBridge, DoubleCheck.lazy(this.providesPremiumServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectConfigService(mfpGearMessageBridge, DoubleCheck.lazy(this.providesConfigServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectAnalytics(mfpGearMessageBridge, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MfpGearMessageBridge_MembersInjector.injectApi(mfpGearMessageBridge, this.providesDeviceActivationApiProvider);
        MfpGearMessageBridge_MembersInjector.injectBus(mfpGearMessageBridge, (Bus) this.provideOttoBusProvider.get());
        MfpGearMessageBridge_MembersInjector.injectSession(mfpGearMessageBridge, (Session) this.providesSessionProvider.get());
        MfpGearMessageBridge_MembersInjector.injectDbConnectionManager(mfpGearMessageBridge, DoubleCheck.lazy(this.provideDbConnectionManagerProvider));
        return mfpGearMessageBridge;
    }

    private MfpNotificationActionService injectMfpNotificationActionService(MfpNotificationActionService mfpNotificationActionService) {
        MfpNotificationActionService_MembersInjector.injectApiProvider(mfpNotificationActionService, this.providesMfpJsonV2ApiProvider);
        MfpNotificationActionService_MembersInjector.injectAnalyticsService(mfpNotificationActionService, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        return mfpNotificationActionService;
    }

    private MPFAppWidgetProvider injectMPFAppWidgetProvider(MPFAppWidgetProvider mPFAppWidgetProvider) {
        MPFAppWidgetProvider_MembersInjector.injectAnalyticsService(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesAnalyticsServiceProvider));
        MPFAppWidgetProvider_MembersInjector.injectSession(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesSessionProvider));
        MPFAppWidgetProvider_MembersInjector.injectLocalizedStringsUtil(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesLocalizedStringsUtilProvider));
        MPFAppWidgetProvider_MembersInjector.injectUserEnergyService(mPFAppWidgetProvider, DoubleCheck.lazy(this.userEnergyServiceProvider));
        MPFAppWidgetProvider_MembersInjector.injectSyncService(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesSyncEngineProvider));
        MPFAppWidgetProvider_MembersInjector.injectNutrientGoalService(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesNutrientGoalServiceProvider));
        MPFAppWidgetProvider_MembersInjector.injectDiaryService(mPFAppWidgetProvider, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        return mPFAppWidgetProvider;
    }

    private ProgressViewModel injectProgressViewModel(ProgressViewModel progressViewModel) {
        ProgressViewModel_MembersInjector.injectStepService(progressViewModel, DoubleCheck.lazy(this.provideStepsServiceProvider));
        ProgressViewModel_MembersInjector.injectProgressService(progressViewModel, DoubleCheck.lazy(this.providesProgressServiceProvider));
        ProgressViewModel_MembersInjector.injectDiaryService(progressViewModel, DoubleCheck.lazy(this.providesDiaryServiceProvider));
        ProgressViewModel_MembersInjector.injectWeightService(progressViewModel, DoubleCheck.lazy(this.userWeightServiceProvider));
        ProgressViewModel_MembersInjector.injectHeightService(progressViewModel, DoubleCheck.lazy(this.userHeightServiceProvider));
        ProgressViewModel_MembersInjector.injectSession(progressViewModel, DoubleCheck.lazy(this.providesSessionProvider));
        return progressViewModel;
    }

    private StatusUpdateObject injectStatusUpdateObject(StatusUpdateObject statusUpdateObject) {
        StatusUpdateObject_MembersInjector.injectSession(statusUpdateObject, DoubleCheck.lazy(this.providesSessionProvider));
        return statusUpdateObject;
    }

    private UpdateWeightProxy injectUpdateWeightProxy(UpdateWeightProxy updateWeightProxy) {
        UpdateWeightProxy_MembersInjector.injectProgressAnalytics(updateWeightProxy, DoubleCheck.lazy(this.providesProgressAnalyticsProvider));
        UpdateWeightProxy_MembersInjector.injectMeasurementsService(updateWeightProxy, DoubleCheck.lazy(this.providesMeasurementsServiceProvider));
        UpdateWeightProxy_MembersInjector.injectUserWeightService(updateWeightProxy, DoubleCheck.lazy(this.userWeightServiceProvider));
        UpdateWeightProxy_MembersInjector.injectUserHeightService(updateWeightProxy, DoubleCheck.lazy(this.userHeightServiceProvider));
        UpdateWeightProxy_MembersInjector.injectConfigService(updateWeightProxy, DoubleCheck.lazy(this.providesConfigServiceProvider));
        UpdateWeightProxy_MembersInjector.injectSession(updateWeightProxy, DoubleCheck.lazy(this.providesSessionProvider));
        return updateWeightProxy;
    }

    private NotificationInvokerService injectNotificationInvokerService(NotificationInvokerService notificationInvokerService) {
        NotificationInvokerService_MembersInjector.injectConfigService(notificationInvokerService, DoubleCheck.lazy(this.providesConfigServiceProvider));
        return notificationInvokerService;
    }

    private MeAnalytics injectMeAnalytics(MeAnalytics meAnalytics) {
        MeAnalytics_MembersInjector.injectAnalytics(meAnalytics, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        return meAnalytics;
    }

    private ExploreAnalytics injectExploreAnalytics(ExploreAnalytics exploreAnalytics) {
        ExploreAnalytics_MembersInjector.injectAnalytics(exploreAnalytics, (AnalyticsService) this.providesAnalyticsServiceProvider.get());
        return exploreAnalytics;
    }

    private BackgroundJobHelperImpl injectBackgroundJobHelperImpl(BackgroundJobHelperImpl backgroundJobHelperImpl) {
        BackgroundJobHelperImpl_MembersInjector.injectJobServiceFactory(backgroundJobHelperImpl, DoubleCheck.lazy(this.provideJobServiceFactoryProvider));
        return backgroundJobHelperImpl;
    }

    private MfpNotificationActionReceiver injectMfpNotificationActionReceiver(MfpNotificationActionReceiver mfpNotificationActionReceiver) {
        MfpNotificationActionReceiver_MembersInjector.injectJobServiceFactory(mfpNotificationActionReceiver, getJobServiceFactory());
        return mfpNotificationActionReceiver;
    }

    private NotificationBroadcastReceiver injectNotificationBroadcastReceiver(NotificationBroadcastReceiver notificationBroadcastReceiver) {
        NotificationBroadcastReceiver_MembersInjector.injectJobServiceFactory(notificationBroadcastReceiver, getJobServiceFactory());
        return notificationBroadcastReceiver;
    }

    private TimestampPickerMixin injectTimestampPickerMixin(TimestampPickerMixin timestampPickerMixin) {
        TimestampPickerMixin_MembersInjector.injectPremiumService(timestampPickerMixin, (PremiumService) this.providesPremiumServiceProvider.get());
        TimestampPickerMixin_MembersInjector.injectLocalSettingsService(timestampPickerMixin, getLocalSettingsService());
        TimestampPickerMixin_MembersInjector.injectAnalyticsHelper(timestampPickerMixin, DoubleCheck.lazy(this.timestampAnalyticsHelperProvider));
        return timestampPickerMixin;
    }

    private UacfThumbprintAnalyticsCallback injectUacfThumbprintAnalyticsCallback(UacfThumbprintAnalyticsCallback uacfThumbprintAnalyticsCallback) {
        UacfSharedLibrary_UacfThumbprintAnalyticsCallback_MembersInjector.injectAmplitudeService(uacfThumbprintAnalyticsCallback, (AmplitudeService) this.providesAmplitudeServiceProvider.get());
        return uacfThumbprintAnalyticsCallback;
    }
}
