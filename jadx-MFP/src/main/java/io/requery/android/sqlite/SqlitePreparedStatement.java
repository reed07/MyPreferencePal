package io.requery.android.sqlite;

import android.database.sqlite.SQLiteCursor;
import android.database.sqlite.SQLiteStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

class SqlitePreparedStatement extends BasePreparedStatement {
    private final SqliteConnection connection;
    private SQLiteCursor cursor;
    private final SQLiteStatement statement;

    SqlitePreparedStatement(SqliteConnection sqliteConnection, String str, int i) throws SQLException {
        super(sqliteConnection, str, i);
        this.connection = sqliteConnection;
        this.statement = sqliteConnection.getDatabase().compileStatement(str);
    }

    /* access modifiers changed from: protected */
    public void bindNullOrString(int i, Object obj) {
        if (obj == null) {
            this.statement.bindNull(i);
            if (this.bindings != null) {
                this.bindings.add(null);
                return;
            }
            return;
        }
        String obj2 = obj.toString();
        this.statement.bindString(i, obj2);
        if (this.bindings != null) {
            this.bindings.add(obj2);
        }
    }

    /* access modifiers changed from: protected */
    public void bindLong(int i, long j) {
        this.statement.bindLong(i, j);
        if (this.bindings != null) {
            this.bindings.add(Long.valueOf(j));
        }
    }

    /* access modifiers changed from: protected */
    public void bindDouble(int i, double d) {
        this.statement.bindDouble(i, d);
        if (this.bindings != null) {
            this.bindings.add(Double.valueOf(d));
        }
    }

    /* access modifiers changed from: protected */
    public void bindBlob(int i, byte[] bArr) {
        if (bArr == null) {
            this.statement.bindNull(i);
            if (this.bindings != null) {
                this.bindings.add(null);
                return;
            }
            return;
        }
        this.statement.bindBlob(i, bArr);
        if (this.bindings != null) {
            bindBlobLiteral(i, bArr);
        }
    }

    public void close() throws SQLException {
        clearParameters();
        this.statement.close();
        SQLiteCursor sQLiteCursor = this.cursor;
        if (sQLiteCursor != null) {
            sQLiteCursor.close();
        }
        super.close();
    }

    public boolean execute(String str, int i) throws SQLException {
        throw new UnsupportedOperationException();
    }

    public ResultSet executeQuery(String str) throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int executeUpdate(String str, int i) throws SQLException {
        throw new UnsupportedOperationException();
    }

    public void clearParameters() throws SQLException {
        throwIfClosed();
        this.statement.clearBindings();
        if (this.bindings != null) {
            this.bindings.clear();
        }
    }

    public boolean execute() throws SQLException {
        throwIfClosed();
        try {
            this.statement.execute();
        } catch (android.database.SQLException e) {
            SqliteConnection.throwSQLException(e);
        }
        return false;
    }

    public ResultSet executeQuery() throws SQLException {
        throwIfClosed();
        try {
            String[] bindingsToArray = bindingsToArray();
            if (this.cursor != null) {
                this.cursor.setSelectionArguments(bindingsToArray);
                if (!this.cursor.requery()) {
                    this.cursor.close();
                    this.cursor = null;
                }
            }
            if (this.cursor == null) {
                this.cursor = (SQLiteCursor) this.connection.getDatabase().rawQuery(getSql(), bindingsToArray);
            }
            CursorResultSet cursorResultSet = new CursorResultSet(this, this.cursor, false);
            this.queryResult = cursorResultSet;
            return cursorResultSet;
        } catch (android.database.SQLException e) {
            SqliteConnection.throwSQLException(e);
            return null;
        }
    }

    public int executeUpdate() throws SQLException {
        throwIfClosed();
        if (this.autoGeneratedKeys == 1) {
            try {
                this.insertResult = new SingleResultSet(this, this.statement.executeInsert());
                this.updateCount = 1;
            } catch (android.database.SQLException e) {
                SqliteConnection.throwSQLException(e);
            }
        } else {
            try {
                this.updateCount = this.statement.executeUpdateDelete();
            } catch (android.database.SQLException e2) {
                SqliteConnection.throwSQLException(e2);
            }
        }
        return this.updateCount;
    }
}
